{
  "version": 3,
  "sources": ["../bundle-GcmkCz/checked-fetch.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../../../../.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/modules-watch-stub.js", "../../../src/router.mjs", "../../../src/handlers/videos.mjs", "../../../src/utils/stream_urls.mjs", "../../../node_modules/@noble/hashes/src/crypto.ts", "../../../node_modules/@noble/hashes/src/utils.ts", "../../../node_modules/@noble/hashes/src/_md.ts", "../../../node_modules/@noble/hashes/src/sha2.ts", "../../../node_modules/@noble/hashes/src/hmac.ts", "../../../node_modules/@noble/curves/src/utils.ts", "../../../node_modules/@noble/curves/src/abstract/modular.ts", "../../../node_modules/@noble/curves/src/abstract/curve.ts", "../../../node_modules/@noble/curves/src/abstract/weierstrass.ts", "../../../node_modules/@noble/curves/src/_shortw_utils.ts", "../../../node_modules/@noble/curves/src/abstract/hash-to-curve.ts", "../../../node_modules/@noble/curves/src/secp256k1.ts", "../../../src/utils/image_storage.mjs", "../../../src/auth/blossom.mjs", "../bundle-GcmkCz/middleware-loader.entry.ts", "../bundle-GcmkCz/middleware-insertion-facade.js", "../../../src/worker.mjs", "../../../src/handlers/webhook.mjs", "../../../src/handlers/status.mjs", "../../../src/handlers/lookup.mjs", "../../../src/handlers/aliases.mjs", "../../../src/auth/nip98.mjs", "../../../src/handlers/users.mjs", "../../../src/handlers/migrate.mjs", "../../../src/utils/auto_enable_downloads.mjs", "../../../src/utils/dual_storage.mjs", "../../../src/handlers/migrate_batch.mjs", "../../../src/handlers/migrate_openvine.mjs", "../../../src/handlers/enable_downloads.mjs", "../../../src/handlers/home.mjs", "../../../src/handlers/blossom.mjs", "../../../src/handlers/list_all_videos.mjs", "../../../../../../.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../../../../.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/rabble/code/vine_fun/cf_streaming_service/.wrangler/tmp/dev-En9Jut",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "export function notFound() {\n  return new Response(JSON.stringify({ error: \"not_found\" }), {\n    status: 404,\n    headers: { \"content-type\": \"application/json\" },\n  });\n}\n\nexport function json(status, body) {\n  return new Response(JSON.stringify(body), {\n    status,\n    headers: { \"content-type\": \"application/json\" },\n  });\n}\n\nexport function createRouter(routes) {\n  return async (req, env, deps) => {\n    const url = new URL(req.url);\n    const method = req.method.toUpperCase();\n    for (const r of routes) {\n      if (r.method === method) {\n        const m = url.pathname.match(r.path);\n        if (m) {\n          return r.handler(req, env, deps);\n        }\n      }\n    }\n    return notFound();\n  };\n}\n", "import { json } from \"../router.mjs\";\n\nexport async function createVideo(req, env, deps) {\n  // Require NIP-98 Authorization header\n  const auth = req.headers.get(\"authorization\") || req.headers.get(\"Authorization\");\n  if (!auth) {\n    return json(401, { error: \"unauthorized\", reason: \"missing_nip98\" });\n  }\n  if (!auth.startsWith('Nostr ')) {\n    return json(400, { error: 'bad_request', reason: 'malformed_nip98' });\n  }\n  const verified = await deps.verifyNip98(req);\n  if (!verified) {\n    return json(403, { error: \"forbidden\", reason: \"invalid_nip98\" });\n  }\n\n  // Simple per-pubkey rate limit: 30/hour bucket\n  // DISABLED for private use - this is Rabble's system\n  /*\n  const limit = 30;\n  const bucket = Math.floor(deps.now() / 3600000);\n  const rlKey = `rl:pub:${verified.pubkey}:${bucket}`;\n  const currentStr = await env.MEDIA_KV.get(rlKey);\n  const current = currentStr ? parseInt(currentStr, 10) : 0;\n  if (!Number.isNaN(current) && current >= limit) {\n    return json(429, { error: \"rate_limited\" });\n  }\n  */\n\n  // Optional body with aliases\n  let bodyJson = null;\n  const ct = req.headers.get('content-type') || '';\n  if (ct.includes('application/json')) {\n    try { bodyJson = await req.json(); } catch {}\n  }\n  const providedSha = bodyJson?.sha256 ? String(bodyJson.sha256).toLowerCase() : null;\n  const providedVine = bodyJson?.vineId ? String(bodyJson.vineId) : null;\n  const providedUrl = bodyJson?.originalUrl ? String(bodyJson.originalUrl) : null;\n\n  // Pre-check conflicts for provided aliases\n  if (providedSha) {\n    const ex = await env.MEDIA_KV.get(`idx:sha256:${providedSha}`);\n    if (ex) return json(409, { error: 'conflict', fields: ['sha256'] });\n  }\n  if (providedVine) {\n    const ex = await env.MEDIA_KV.get(`idx:vine:${providedVine}`);\n    if (ex) return json(409, { error: 'conflict', fields: ['vineId'] });\n  }\n  let urlDigest = null;\n  if (providedUrl) {\n    urlDigest = await digestUrl(providedUrl);\n    const ex = await env.MEDIA_KV.get(`idx:url:${urlDigest}`);\n    if (ex) return json(409, { error: 'conflict', fields: ['url'] });\n  }\n\n  const accountId = env.STREAM_ACCOUNT_ID;\n  const apiToken = env.STREAM_API_TOKEN;\n  if (!accountId || !apiToken) {\n    return json(500, { error: \"server_error\", reason: \"misconfigured_stream_env\" });\n  }\n\n  // Mock mode for testing without real Stream API\n  if (env.MOCK_STREAM_API === 'true') {\n    const mockUid = 'mock_' + crypto.randomUUID();\n    const mockUploadUrl = `https://upload.mockstream.example.com/${mockUid}`;\n    const expiresAt = new Date(deps.now() + 3600000).toISOString();\n    \n    const video = {\n      status: 'pending_upload',\n      owner: verified.pubkey,\n      createdAt: deps.now(),\n      sha256: providedSha,\n      vineId: providedVine,\n      originalUrl: providedUrl,\n    };\n    \n    await env.MEDIA_KV.put(`video:${mockUid}`, JSON.stringify(video));\n    if (providedSha) await env.MEDIA_KV.put(`idx:sha256:${providedSha}`, JSON.stringify({ uid: mockUid }));\n    if (providedVine) await env.MEDIA_KV.put(`idx:vine:${providedVine}`, JSON.stringify({ uid: mockUid }));\n    if (urlDigest) await env.MEDIA_KV.put(`idx:url:${urlDigest}`, JSON.stringify({ uid: mockUid, url: providedUrl }));\n    await env.MEDIA_KV.put(`idx:pubkey:${verified.pubkey}:${mockUid}`, '1');\n    // Rate limit tracking disabled\n    // await env.MEDIA_KV.put(rlKey, String(current + 1), { expirationTtl: 3600 });\n    \n    return json(200, {\n      uid: mockUid,\n      uploadURL: mockUploadUrl,\n      expiresAt,\n      owner: verified.pubkey,\n    });\n  }\n\n  const url = `https://api.cloudflare.com/client/v4/accounts/${accountId}/stream/direct_upload`;\n\n  const body = {\n    maxDurationSeconds: 21600, // 6 hours max\n    requireSignedURLs: false,\n    allowedOrigins: [\"*\"]\n  };\n  \n  // Add metadata if provided\n  const meta = {};\n  if (verified.pubkey) meta.pubkey = verified.pubkey;\n  if (providedSha) meta.sha256 = providedSha;\n  if (providedVine) meta.vineId = providedVine;\n  if (providedUrl) meta.originalUrl = providedUrl;\n  \n  if (Object.keys(meta).length > 0) {\n    body.meta = meta;\n  }\n\n  const res = await deps.fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${apiToken}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n\n  if (!res.ok) {\n    let errorDetail = null;\n    try {\n      const errorBody = await res.json();\n      errorDetail = errorBody.errors?.[0]?.message || errorBody.error || null;\n    } catch {}\n    return json(502, { error: \"stream_error\", status: res.status, detail: errorDetail });\n  }\n  const data = await res.json();\n  const result = data?.result ?? {};\n  const uid = result.id || result.uid;\n  const uploadURL = result.uploadURL || result.uploadUrl;\n  const expiresAt = result.expiresAt || null;\n  if (!uid || !uploadURL) {\n    return json(502, { error: \"stream_error\", reason: \"missing_result\" });\n  }\n\n  const record = {\n    status: \"pending_upload\",\n    owner: verified.pubkey,\n    createdAt: deps.now(),\n    ...(providedSha ? { sha256: providedSha } : {}),\n    ...(providedVine ? { vineId: providedVine } : {}),\n    ...(providedUrl ? { originalUrl: providedUrl } : {}),\n  };\n  await env.MEDIA_KV.put(`video:${uid}`, JSON.stringify(record));\n  // Sparse index by publisher for listing\n  try { await env.MEDIA_KV.put(`idx:pubkey:${verified.pubkey}:${uid}`, \"1\"); } catch {}\n  // Write provided indexes\n  try {\n    if (providedSha) await env.MEDIA_KV.put(`idx:sha256:${providedSha}`, JSON.stringify({ uid }));\n    if (providedVine) await env.MEDIA_KV.put(`idx:vine:${providedVine}`, JSON.stringify({ uid }));\n    if (urlDigest) await env.MEDIA_KV.put(`idx:url:${urlDigest}`, JSON.stringify({ uid, url: providedUrl }));\n  } catch {}\n  // Increment rate counter (best-effort) - DISABLED for private use\n  // try { await env.MEDIA_KV.put(rlKey, String(current + 1)); } catch {}\n\n  return json(200, { uid, uploadURL, expiresAt, owner: verified.pubkey });\n}\n\nasync function digestUrl(input) {\n  try {\n    const u = new URL(input);\n    u.hash = '';\n    u.hostname = u.hostname.toLowerCase();\n    if ((u.protocol === 'http:' && u.port === '80') || (u.protocol === 'https:' && u.port === '443')) {\n      u.port = '';\n    }\n    const params = Array.from(u.searchParams.entries()).sort(([a],[b]) => a.localeCompare(b));\n    const usp = new URLSearchParams(params);\n    u.search = usp.toString() ? `?${usp.toString()}` : '';\n    const enc = new TextEncoder();\n    const buf = enc.encode(u.toString());\n    const hash = await crypto.subtle.digest('SHA-256', buf);\n    const arr = Array.from(new Uint8Array(hash));\n    return arr.map(b => b.toString(16).padStart(2,'0')).join('');\n  } catch {\n    return input;\n  }\n}\n", "// ABOUTME: Utility functions for generating Stream URLs with custom domain support\n// ABOUTME: Centralizes URL generation to avoid hardcoding throughout the codebase\n\nexport function getStreamUrls(uid, env, options = {}) {\n  // Use CDN domain for hybrid routing, otherwise fall back to Stream domain\n  const cdnDomain = env.CDN_DOMAIN || 'cdn.divine.video';\n  const streamDomain = env.STREAM_DOMAIN || `customer-${env.STREAM_ACCOUNT_ID}.cloudflarestream.com`;\n\n  // For hybrid routing, prefer CDN domain that can route to R2 for MP4s\n  const domain = options.useStreamDomain ? streamDomain : cdnDomain;\n\n  return {\n    hlsUrl: `https://${domain}/${uid}/manifest/video.m3u8`,\n    dashUrl: `https://${domain}/${uid}/manifest/video.mpd`,\n    mp4Url: `https://${domain}/${uid}/downloads/default.mp4`,\n    thumbnailUrl: `https://${domain}/${uid}/thumbnails/thumbnail.jpg`,\n    iframeUrl: `https://${domain}/${uid}/iframe`,\n    // Additional formats\n    webmUrl: `https://${domain}/${uid}/downloads/webm.webm`,\n    posterUrl: `https://${domain}/${uid}/thumbnails/thumbnail.jpg?time=0s`,\n    animatedThumbnailUrl: `https://${domain}/${uid}/thumbnails/thumbnail.gif`\n  };\n}\n\n/**\n * Generate hybrid URLs with Blossom-style MP4 routing\n * @param {string} uid - Stream UID\n * @param {string} sha256 - SHA-256 hash for Blossom URL\n * @param {Object} env - Environment variables\n * @param {boolean} r2Available - Whether video is available in R2\n * @returns {Object} URLs optimized for hybrid serving\n */\nexport function getHybridUrls(uid, sha256, env, r2Available = false) {\n  const cdnDomain = env.CDN_DOMAIN || 'cdn.divine.video';\n\n  return {\n    // HLS/DASH always from Stream via CDN\n    hlsUrl: `https://${cdnDomain}/${uid}/manifest/video.m3u8`,\n    dashUrl: `https://${cdnDomain}/${uid}/manifest/video.mpd`,\n\n    // MP4: Blossom-style URL if available in R2, otherwise fallback\n    mp4Url: r2Available && sha256 ?\n      `https://${cdnDomain}/${sha256}.mp4` :\n      `https://${cdnDomain}/${uid}/downloads/default.mp4`,\n\n    // Thumbnails from Stream via CDN\n    thumbnailUrl: `https://${cdnDomain}/${uid}/thumbnails/thumbnail.jpg`,\n\n    // Additional formats\n    iframeUrl: `https://${cdnDomain}/${uid}/iframe`,\n    webmUrl: `https://${cdnDomain}/${uid}/downloads/webm.webm`,\n    posterUrl: `https://${cdnDomain}/${uid}/thumbnails/thumbnail.jpg?time=0s`,\n    animatedThumbnailUrl: `https://${cdnDomain}/${uid}/thumbnails/thumbnail.gif`,\n\n    // Blossom protocol URLs (for Nostr events)\n    blossomUrl: sha256 ? `https://${cdnDomain}/${sha256}` : null,\n    blossomMp4Url: sha256 ? `https://${cdnDomain}/${sha256}.mp4` : null\n  };\n}\n\nexport function getR2Url(r2Key, env) {\n  // Use custom R2 domain if configured\n  if (env.R2_PUBLIC_DOMAIN) {\n    return `https://${env.R2_PUBLIC_DOMAIN}/${r2Key}`;\n  }\n  \n  // Fall back to R2 dev domain or public bucket URL\n  if (env.R2_BUCKET_URL) {\n    return `${env.R2_BUCKET_URL}/${r2Key}`;\n  }\n  \n  // Default R2 public URL pattern\n  return `https://pub-${env.R2_BUCKET_ID}.r2.dev/${r2Key}`;\n}\n\nexport function isStreamUrl(url) {\n  // Check if a URL is a Cloudflare Stream URL\n  return url.includes('.cloudflarestream.com/') || \n         url.includes('/manifest/video.m3u8') ||\n         url.includes('/manifest/video.mpd');\n}\n\nexport function extractUidFromStreamUrl(url) {\n  // Extract UID from various Stream URL formats\n  // https://domain.com/{uid}/manifest/video.m3u8\n  // https://domain.com/{uid}/thumbnails/thumbnail.jpg\n  const match = url.match(/\\/([a-f0-9]{32})\\//);\n  return match ? match[1] : null;\n}\n\nexport function normalizeVideoUrl(url, env) {\n  // Convert any video URL to our custom domain\n  const uid = extractUidFromStreamUrl(url);\n  if (uid) {\n    return getStreamUrls(uid, env).hlsUrl;\n  }\n  return url;\n}", "/**\n * Internal webcrypto alias.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * See utils.ts for details.\n * @module\n */\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto: any =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is positive integer. */\nexport function anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Asserts something is Uint8Array. */\nexport function abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Asserts something is hash */\nexport function ahash(h: IHash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.createHasher');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\n/** Generic type encompassing 8/16/32-byte arrays - but not 64-byte. */\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays: TypedArray[]): void {\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i].fill(0);\n  }\n}\n\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n\n/** The byte swap operation for uint32 */\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** @deprecated */\nexport const byteSwapIfBE: typeof swap8IfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): Uint32Array {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n  return arr;\n}\n\nexport const swap32IfBE: (u: Uint32Array) => Uint32Array = isLE\n  ? (u: Uint32Array) => u\n  : byteSwap32;\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  // @ts-ignore\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // @ts-ignore\n  if (hasHexBuiltin) return bytes.toHex();\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // @ts-ignore\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols, but ts doesn't see them: https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes: Uint8Array): string {\n  return new TextDecoder().decode(bytes);\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = string | Uint8Array;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** KDFs can accept string or Uint8Array for user convenience. */\nexport type KDFInput = string | Uint8Array;\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data: KDFInput): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash interface. */\nexport type IHash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  abstract clone(): T;\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n/** Hash function */\nexport type CHash = ReturnType<typeof createHasher>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof createOptHasher>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof createXOFer>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function createOptHasher<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function createXOFer<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\nexport const wrapConstructor: typeof createHasher = createHasher;\nexport const wrapConstructorWithOpts: typeof createOptHasher = createOptHasher;\nexport const wrapXOFConstructorWithOpts: typeof createXOFer = createXOFer;\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return Uint8Array.from(crypto.randomBytes(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { type Input, Hash, abytes, aexists, aoutput, clean, createView, toBytes } from './utils.ts';\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/** Choice: a ? b : c */\nexport function Chi(a: number, b: number, c: number): number {\n  return (a & b) ^ (~a & c);\n}\n\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a: number, b: number, c: number): number {\n  return (a & b) ^ (a & c) ^ (b & c);\n}\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n\n  readonly blockLen: number;\n  readonly outputLen: number;\n  readonly padOffset: number;\n  readonly isLE: boolean;\n\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(blockLen: number, outputLen: number, padOffset: number, isLE: boolean) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const { view, buffer, blockLen } = this;\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    clean(this.buffer.subarray(pos));\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.destroyed = destroyed;\n    to.finished = finished;\n    to.length = length;\n    to.pos = pos;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n  0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n  0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n", "/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from './_md.ts';\nimport * as u64 from './_u64.ts';\nimport { type CHash, clean, createHasher, rotr } from './utils.ts';\n\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor(outputLen: number = 32) {\n    super(64, outputLen, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    clean(SHA256_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\nexport class SHA224 extends SHA256 {\n  protected A: number = SHA224_IV[0] | 0;\n  protected B: number = SHA224_IV[1] | 0;\n  protected C: number = SHA224_IV[2] | 0;\n  protected D: number = SHA224_IV[3] | 0;\n  protected E: number = SHA224_IV[4] | 0;\n  protected F: number = SHA224_IV[5] | 0;\n  protected G: number = SHA224_IV[6] | 0;\n  protected H: number = SHA224_IV[7] | 0;\n  constructor() {\n    super(28);\n  }\n}\n\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\n\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = SHA512_IV[0] | 0;\n  protected Al: number = SHA512_IV[1] | 0;\n  protected Bh: number = SHA512_IV[2] | 0;\n  protected Bl: number = SHA512_IV[3] | 0;\n  protected Ch: number = SHA512_IV[4] | 0;\n  protected Cl: number = SHA512_IV[5] | 0;\n  protected Dh: number = SHA512_IV[6] | 0;\n  protected Dl: number = SHA512_IV[7] | 0;\n  protected Eh: number = SHA512_IV[8] | 0;\n  protected El: number = SHA512_IV[9] | 0;\n  protected Fh: number = SHA512_IV[10] | 0;\n  protected Fl: number = SHA512_IV[11] | 0;\n  protected Gh: number = SHA512_IV[12] | 0;\n  protected Gl: number = SHA512_IV[13] | 0;\n  protected Hh: number = SHA512_IV[14] | 0;\n  protected Hl: number = SHA512_IV[15] | 0;\n\n  constructor(outputLen: number = 64) {\n    super(128, outputLen, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ): void {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean(): void {\n    clean(SHA512_W_H, SHA512_W_L);\n  }\n  destroy(): void {\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nexport class SHA384 extends SHA512 {\n  protected Ah: number = SHA384_IV[0] | 0;\n  protected Al: number = SHA384_IV[1] | 0;\n  protected Bh: number = SHA384_IV[2] | 0;\n  protected Bl: number = SHA384_IV[3] | 0;\n  protected Ch: number = SHA384_IV[4] | 0;\n  protected Cl: number = SHA384_IV[5] | 0;\n  protected Dh: number = SHA384_IV[6] | 0;\n  protected Dl: number = SHA384_IV[7] | 0;\n  protected Eh: number = SHA384_IV[8] | 0;\n  protected El: number = SHA384_IV[9] | 0;\n  protected Fh: number = SHA384_IV[10] | 0;\n  protected Fl: number = SHA384_IV[11] | 0;\n  protected Gh: number = SHA384_IV[12] | 0;\n  protected Gl: number = SHA384_IV[13] | 0;\n  protected Hh: number = SHA384_IV[14] | 0;\n  protected Hl: number = SHA384_IV[15] | 0;\n\n  constructor() {\n    super(48);\n  }\n}\n\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n  0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n  0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n  0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n  0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\n\nexport class SHA512_224 extends SHA512 {\n  protected Ah: number = T224_IV[0] | 0;\n  protected Al: number = T224_IV[1] | 0;\n  protected Bh: number = T224_IV[2] | 0;\n  protected Bl: number = T224_IV[3] | 0;\n  protected Ch: number = T224_IV[4] | 0;\n  protected Cl: number = T224_IV[5] | 0;\n  protected Dh: number = T224_IV[6] | 0;\n  protected Dl: number = T224_IV[7] | 0;\n  protected Eh: number = T224_IV[8] | 0;\n  protected El: number = T224_IV[9] | 0;\n  protected Fh: number = T224_IV[10] | 0;\n  protected Fl: number = T224_IV[11] | 0;\n  protected Gh: number = T224_IV[12] | 0;\n  protected Gl: number = T224_IV[13] | 0;\n  protected Hh: number = T224_IV[14] | 0;\n  protected Hl: number = T224_IV[15] | 0;\n\n  constructor() {\n    super(28);\n  }\n}\n\nexport class SHA512_256 extends SHA512 {\n  protected Ah: number = T256_IV[0] | 0;\n  protected Al: number = T256_IV[1] | 0;\n  protected Bh: number = T256_IV[2] | 0;\n  protected Bl: number = T256_IV[3] | 0;\n  protected Ch: number = T256_IV[4] | 0;\n  protected Cl: number = T256_IV[5] | 0;\n  protected Dh: number = T256_IV[6] | 0;\n  protected Dl: number = T256_IV[7] | 0;\n  protected Eh: number = T256_IV[8] | 0;\n  protected El: number = T256_IV[9] | 0;\n  protected Fh: number = T256_IV[10] | 0;\n  protected Fl: number = T256_IV[11] | 0;\n  protected Gh: number = T256_IV[12] | 0;\n  protected Gl: number = T256_IV[13] | 0;\n  protected Hh: number = T256_IV[14] | 0;\n  protected Hl: number = T256_IV[15] | 0;\n\n  constructor() {\n    super(32);\n  }\n}\n\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256: CHash = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224: CHash = /* @__PURE__ */ createHasher(() => new SHA224());\n\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512: CHash = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384: CHash = /* @__PURE__ */ createHasher(() => new SHA384());\n\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256: CHash = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224: CHash = /* @__PURE__ */ createHasher(() => new SHA512_224());\n", "/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes, type CHash, type Input } from './utils.ts';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    clean(pad);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  clone(): HMAC<T> {\n    return this._cloneInto();\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n", "/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  abytes as abytes_,\n  bytesToHex as bytesToHex_,\n  concatBytes as concatBytes_,\n  hexToBytes as hexToBytes_,\n  isBytes as isBytes_,\n} from '@noble/hashes/utils.js';\nexport {\n  abytes,\n  anumber,\n  bytesToHex,\n  bytesToUtf8,\n  concatBytes,\n  hexToBytes,\n  isBytes,\n  randomBytes,\n  utf8ToBytes,\n} from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// tmp name until v2\nexport function _abool2(value: boolean, title: string = ''): boolean {\n  if (typeof value !== 'boolean') {\n    const prefix = title && `\"${title}\"`;\n    throw new Error(prefix + 'expected boolean, got type=' + typeof value);\n  }\n  return value;\n}\n\n// tmp name until v2\n/** Asserts something is Uint8Array. */\nexport function _abytes2(value: Uint8Array, length?: number, title: string = ''): Uint8Array {\n  const bytes = isBytes_(value);\n  const len = value?.length;\n  const needsLen = length !== undefined;\n  if (!bytes || (needsLen && len !== length)) {\n    const prefix = title && `\"${title}\" `;\n    const ofLen = needsLen ? ` of length ${length}` : '';\n    const got = bytes ? `length=${len}` : `type=${typeof value}`;\n    throw new Error(prefix + 'expected Uint8Array' + ofLen + ', got ' + got);\n  }\n  return value;\n}\n\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes_(bytes);\n  return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes_(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'secret key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes_(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes_(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n/**\n * Copies Uint8Array. We can't use u8a.slice(), because u8a can be Buffer,\n * and Buffer#slice creates mutable copy. Never use Buffers!\n */\nexport function copyBytes(bytes: Uint8Array): Uint8Array {\n  return Uint8Array.from(bytes);\n}\n\n/**\n * Decodes 7-bit ASCII string to Uint8Array, throws on non-ascii symbols\n * Should be safe to use for things expected to be ASCII.\n * Returns exact same result as utf8ToBytes for ASCII or throws.\n */\nexport function asciiToBytes(ascii: string): Uint8Array {\n  return Uint8Array.from(ascii, (c, i) => {\n    const charCode = c.charCodeAt(0);\n    if (c.length !== 1 || charCode > 127) {\n      throw new Error(\n        `string contains non-ASCII character \"${ascii[i]}\" with code ${charCode} at position ${i}`\n      );\n    }\n    return charCode;\n  });\n}\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_1n << BigInt(n)) - _1n;\n\n// DRBG\n\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  const u8n = (len: number) => new Uint8Array(len); // creates Uint8Array\n  const u8of = (byte: number) => Uint8Array.of(byte); // another shortcut\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n(0)) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes_(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes_(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\nexport function isHash(val: CHash): boolean {\n  return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(\n  object: Record<string, any>,\n  fields: Record<string, string>,\n  optFields: Record<string, string> = {}\n): void {\n  if (!object || typeof object !== 'object') throw new Error('expected valid options object');\n  type Item = keyof typeof object;\n  function checkField(fieldName: Item, expectedType: string, isOpt: boolean) {\n    const val = object[fieldName];\n    if (isOpt && val === undefined) return;\n    const current = typeof val;\n    if (current !== expectedType || val === null)\n      throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n  }\n  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n", "/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  anumber,\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n} from '../utils.ts';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _7n = /* @__PURE__ */ BigInt(7);\n// prettier-ignore\nconst _8n = /* @__PURE__ */ BigInt(8), _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  return FpPow(Field(modulo), num, power);\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\nfunction assertIsSquare<T>(Fp: IField<T>, root: T, n: T): void {\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n}\n\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4<T>(Fp: IField<T>, n: T) {\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\n  const root = Fp.pow(n, p1div4);\n  assertIsSquare(Fp, root, n);\n  return root;\n}\n\nfunction sqrt5mod8<T>(Fp: IField<T>, n: T) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  assertIsSquare(Fp, root, n);\n  return root;\n}\n\n// Based on RFC9380, Kong algorithm\n// prettier-ignore\nfunction sqrt9mod16(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  const Fp_ = Field(P);\n  const tn = tonelliShanks(P);\n  const c1 = tn(Fp_, Fp_.neg(Fp_.ONE));//  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n  const c2 = tn(Fp_, c1);              //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n  const c3 = tn(Fp_, Fp_.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n  const c4 = (P + _7n) / _16n;         //  4. c4 = (q + 7) / 16        # Integer arithmetic\n  return <T>(Fp: IField<T>, n: T) => {\n    let tv1 = Fp.pow(n, c4);           //  1. tv1 = x^c4\n    let tv2 = Fp.mul(tv1, c1);         //  2. tv2 = c1 * tv1\n    const tv3 = Fp.mul(tv1, c2);       //  3. tv3 = c2 * tv1\n    const tv4 = Fp.mul(tv1, c3);       //  4. tv4 = c3 * tv1\n    const e1 = Fp.eql(Fp.sqr(tv2), n); //  5.  e1 = (tv2^2) == x\n    const e2 = Fp.eql(Fp.sqr(tv3), n); //  6.  e2 = (tv3^2) == x\n    tv1 = Fp.cmov(tv1, tv2, e1);       //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    tv2 = Fp.cmov(tv4, tv3, e2);       //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    const e3 = Fp.eql(Fp.sqr(tv2), n); //  9.  e3 = (tv2^2) == x\n    const root = Fp.cmov(tv1, tv2, e3);// 10.  z = CMOV(tv1, tv2, e3)   # Select sqrt from tv1 & tv2\n    assertIsSquare(Fp, root, n);\n    return root;\n  };\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Initialization (precomputation).\n  // Caching initialization could boost perf by 7%.\n  if (P < _3n) throw new Error('sqrt is not defined for small field');\n  // Factor P - 1 = Q * 2^S, where Q is odd\n  let Q = P - _1n;\n  let S = 0;\n  while (Q % _2n === _0n) {\n    Q /= _2n;\n    S++;\n  }\n\n  // Find the first quadratic non-residue Z >= 2\n  let Z = _2n;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    // Basic primality test for P. After x iterations, chance of\n    // not finding quadratic non-residue is 2^x, so 2^1000.\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n  }\n  // Fast-path; usually done before Z, but we do \"primality test\".\n  if (S === 1) return sqrt3mod4;\n\n  // Slow-path\n  // TODO: test on Fp2 and others\n  let cc = _Fp.pow(Z, Q); // c = z^Q\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    if (Fp.is0(n)) return n;\n    // Check if n is a quadratic residue using Legendre symbol\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n\n    // Initialize variables for the main loop\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n\n    // Main loop\n    // while t != 1\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n      let i = 1;\n\n      // Find the smallest i >= 1 such that t^(2^i) \u2261 1 (mod P)\n      let t_tmp = Fp.sqr(t); // t^(2^1)\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n        if (i === M) throw new Error('Cannot find square root');\n      }\n\n      // Calculate the exponent for b: 2^(M - i - 1)\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n\n      // Update variables\n      M = i;\n      c = Fp.sqr(b); // c = b^2\n      t = Fp.mul(t, c); // t = (t * b^2)\n      R = Fp.mul(R, b); // R = R*b\n    }\n    return R;\n  };\n}\n\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P \u2261 3 (mod 4)\n * 2. P \u2261 5 (mod 8)\n * 3. P \u2261 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P \u2261 3 (mod 4) => \u221An = n^((P+1)/4)\n  if (P % _4n === _3n) return sqrt3mod4;\n  // P \u2261 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n  if (P % _8n === _5n) return sqrt5mod8;\n  // P \u2261 9 (mod 16) => Kong algorithm, page 11 of https://eprint.iacr.org/2012/685.pdf (algorithm 4)\n  if (P % _16n === _9n) return sqrt9mod16(P);\n  // Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  isValidNot0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  allowedLengths?: number[];\n  // legendre?(num: T): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array, skipValidation?: boolean): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'number',\n    BITS: 'number',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  _validateObject(field, opts);\n  // const max = 16384;\n  // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n  // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n  return field;\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(Fp: IField<T>, num: T, power: bigint): T {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return Fp.ONE;\n  if (power === _1n) return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch<T>(Fp: IField<T>, nums: T[], passZero = false): T[] {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n  // Walk from first to last, multiply them by each other MOD p\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  // Invert last element\n  const invertedAcc = Fp.inv(multipliedAcc);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\n\n// TODO: remove\nexport function FpDiv<T>(Fp: IField<T>, lhs: T, rhs: T | bigint): T {\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) \u2261 1    if a is a square (mod p), quadratic residue\n * * (a | p) \u2261 -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) \u2261 0    if a \u2261 0 (mod p)\n */\nexport function FpLegendre<T>(Fp: IField<T>, n: T): -1 | 0 | 1 {\n  // We can use 3rd argument as optional cache of this value\n  // but seems unneeded for now. The operation is very fast.\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n  return yes ? 1 : zero ? 0 : -1;\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(Fp: IField<T>, n: T): boolean {\n  const l = FpLegendre(Fp, n);\n  return l === 1;\n}\n\nexport type NLength = { nByteLength: number; nBitLength: number };\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number): NLength {\n  // Bit size, byte size of CURVE.n\n  if (nBitLength !== undefined) anumber(nBitLength);\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\ntype SqrtFn = (n: bigint) => bigint;\ntype FieldOpts = Partial<{\n  sqrt: SqrtFn;\n  isLE: boolean;\n  BITS: number;\n  modFromBytes: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  allowedLengths?: readonly number[]; // for P521 (adds padding for smaller sizes)\n}>;\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLenOrOpts?: number | FieldOpts, // TODO: use opts only in v2?\n  isLE = false,\n  opts: { sqrt?: SqrtFn } = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  let _nbitLength: number | undefined = undefined;\n  let _sqrt: SqrtFn | undefined = undefined;\n  let modFromBytes: boolean = false;\n  let allowedLengths: undefined | readonly number[] = undefined;\n  if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n    if (opts.sqrt || isLE) throw new Error('cannot specify opts in two arguments');\n    const _opts = bitLenOrOpts;\n    if (_opts.BITS) _nbitLength = _opts.BITS;\n    if (_opts.sqrt) _sqrt = _opts.sqrt;\n    if (typeof _opts.isLE === 'boolean') isLE = _opts.isLE;\n    if (typeof _opts.modFromBytes === 'boolean') modFromBytes = _opts.modFromBytes;\n    allowedLengths = _opts.allowedLengths;\n  } else {\n    if (typeof bitLenOrOpts === 'number') _nbitLength = bitLenOrOpts;\n    if (opts.sqrt) _sqrt = opts.sqrt;\n  }\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    allowedLengths: allowedLengths,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    // is valid and invertible\n    isValidNot0: (num: bigint) => !f.is0(num) && f.isValid(num),\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      _sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes, skipValidation = true) => {\n      if (allowedLengths) {\n        if (!allowedLengths.includes(bytes.length) || bytes.length > BYTES) {\n          throw new Error(\n            'Field.fromBytes: expected ' + allowedLengths + ' bytes, got ' + bytes.length\n          );\n        }\n        const padded = new Uint8Array(BYTES);\n        // isLE add 0 to right, !isLE to the left.\n        padded.set(bytes, isLE ? 0 : padded.length - bytes.length);\n        bytes = padded;\n      }\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      let scalar = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n      if (modFromBytes) scalar = mod(scalar, ORDER);\n      if (!skipValidation)\n        if (!f.isValid(scalar)) throw new Error('invalid field element: outside of range 0..ORDER');\n      // NOTE: we don't validate scalar here, please use isValid. This done such way because some\n      // protocol may allow non-reduced scalar that reduced later or changed some other way.\n      return scalar;\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => (c ? b : a),\n  } as FpField);\n  return Object.freeze(f);\n}\n\n// Generic random scalar, we can do same for other fields if via Fp2.mul(Fp2.ONE, Fp2.random)?\n// This allows unsafe methods like ignore bias or zero. These unsafe, but often used in different protocols (if deterministic RNG).\n// which mean we cannot force this via opts.\n// Not sure what to do with randomBytes, we can accept it inside opts if wanted.\n// Probably need to export getMinHashLength somewhere?\n// random(bytes?: Uint8Array, unsafeAllowZero = false, unsafeAllowBias = false) {\n//   const LEN = !unsafeAllowBias ? getMinHashLength(ORDER) : BYTES;\n//   if (bytes === undefined) bytes = randomBytes(LEN); // _opts.randomBytes?\n//   const num = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n//   // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n//   const reduced = unsafeAllowZero ? mod(num, ORDER) : mod(num, ORDER - _1n) + _1n;\n//   return reduced;\n// },\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n", "/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitLen, bitMask, validateObject } from '../utils.ts';\nimport { Field, FpInvertBatch, nLength, validateField, type IField } from './modular.ts';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { Z?: never };\n\n// This was initialy do this way to re-use montgomery ladder in field (add->mul,double->sqr), but\n// that didn't happen and there is probably not much reason to have separate Group like this?\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n  toAffine?(invertedZ?: any): AffinePoint<any>;\n}\n\n// We can't \"abstract out\" coordinates (X, Y, Z; and T in Edwards): argument names of constructor\n// are not accessible. See Typescript gh-56093, gh-41594.\n//\n// We have to use recursive types, so it will return actual point, not constained `CurvePoint`.\n// If, at any point, P is `any`, it will erase all types and replace it\n// with `any`, because of recursion, `any implements CurvePoint`,\n// but we lose all constrains on methods.\n\n/** Base interface for all elliptic curve Points. */\nexport interface CurvePoint<F, P extends CurvePoint<F, P>> extends Group<P> {\n  /** Affine x coordinate. Different from projective / extended X coordinate. */\n  x: F;\n  /** Affine y coordinate. Different from projective / extended Y coordinate. */\n  y: F;\n  Z?: F;\n  double(): P;\n  negate(): P;\n  add(other: P): P;\n  subtract(other: P): P;\n  equals(other: P): boolean;\n  multiply(scalar: bigint): P;\n  assertValidity(): void;\n  clearCofactor(): P;\n  is0(): boolean;\n  isTorsionFree(): boolean;\n  isSmallOrder(): boolean;\n  multiplyUnsafe(scalar: bigint): P;\n  /**\n   * Massively speeds up `p.multiply(n)` by using precompute tables (caching). See {@link wNAF}.\n   * @param isLazy calculate cache now. Default (true) ensures it's deferred to first `multiply()`\n   */\n  precompute(windowSize?: number, isLazy?: boolean): P;\n  /** Converts point to 2D xy affine coordinates */\n  toAffine(invertedZ?: F): AffinePoint<F>;\n  toBytes(): Uint8Array;\n  toHex(): string;\n}\n\n/** Base interface for all elliptic curve Point constructors. */\nexport interface CurvePointCons<P extends CurvePoint<any, P>> {\n  [Symbol.hasInstance]: (item: unknown) => boolean;\n  BASE: P;\n  ZERO: P;\n  /** Field for basic curve math */\n  Fp: IField<P_F<P>>;\n  /** Scalar field, for scalars in multiply and others */\n  Fn: IField<bigint>;\n  /** Creates point from x, y. Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  fromAffine(p: AffinePoint<P_F<P>>): P;\n  fromBytes(bytes: Uint8Array): P;\n  fromHex(hex: Uint8Array | string): P;\n}\n\n// Type inference helpers: PC - PointConstructor, P - Point, Fp - Field element\n// Short names, because we use them a lot in result types:\n// * we can't do 'P = GetCurvePoint<PC>': this is default value and doesn't constrain anything\n// * we can't do 'type X = GetCurvePoint<PC>': it won't be accesible for arguments/return types\n// * `CurvePointCons<P extends CurvePoint<any, P>>` constraints from interface definition\n//   won't propagate, if `PC extends CurvePointCons<any>`: the P would be 'any', which is incorrect\n// * PC could be super specific with super specific P, which implements CurvePoint<any, P>.\n//   this means we need to do stuff like\n//   `function test<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(`\n//   if we want type safety around P, otherwise PC_P<PC> will be any\n\n/** Returns Fp type from Point (P_F<P> == P.F) */\nexport type P_F<P extends CurvePoint<any, P>> = P extends CurvePoint<infer F, P> ? F : never;\n/** Returns Fp type from PointCons (PC_F<PC> == PC.P.F) */\nexport type PC_F<PC extends CurvePointCons<CurvePoint<any, any>>> = PC['Fp']['ZERO'];\n/** Returns Point type from PointCons (PC_P<PC> == PC.P) */\nexport type PC_P<PC extends CurvePointCons<CurvePoint<any, any>>> = PC['ZERO'];\n\n// Ugly hack to get proper type inference, because in typescript fails to infer resursively.\n// The hack allows to do up to 10 chained operations without applying type erasure.\n//\n// Types which won't work:\n// * `CurvePointCons<CurvePoint<any, any>>`, will return `any` after 1 operation\n// * `CurvePointCons<any>: WeierstrassPointCons<bigint> extends CurvePointCons<any> = false`\n// * `P extends CurvePoint, PC extends CurvePointCons<P>`\n//     * It can't infer P from PC alone\n//     * Too many relations between F, P & PC\n//     * It will infer P/F if `arg: CurvePointCons<F, P>`, but will fail if PC is generic\n//     * It will work correctly if there is an additional argument of type P\n//     * But generally, we don't want to parametrize `CurvePointCons` over `F`: it will complicate\n//       types, making them un-inferable\n// prettier-ignore\nexport type PC_ANY = CurvePointCons<\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any, any>\n  >>>>>>>>>\n>;\n\nexport interface CurveLengths {\n  secretKey?: number;\n  publicKey?: number;\n  publicKeyUncompressed?: number;\n  publicKeyHasPrefix?: boolean;\n  signature?: number;\n  seed?: number;\n}\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\n/** @deprecated */\nexport type ExtendedGroupConstructor<T> = GroupConstructor<T> & {\n  Fp: IField<any>;\n  Fn: IField<bigint>;\n  fromAffine(ap: AffinePoint<any>): T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nexport function negateCt<T extends { negate: () => T }>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nexport function normalizeZ<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  c: PC,\n  points: P[]\n): P[] {\n  const invertedZs = FpInvertBatch(\n    c.Fp,\n    points.map((p) => p.Z!)\n  );\n  return points.map((p, i) => c.fromAffine(p.toAffine(invertedZs[i])));\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\n/** Internal wNAF opts for specific W and scalarBits */\nexport type WOpts = {\n  windows: number;\n  windowSize: number;\n  mask: bigint;\n  maxNumber: number;\n  shiftBy: bigint;\n};\n\nfunction calcWOpts(W: number, scalarBits: number): WOpts {\n  validateW(W, scalarBits);\n  const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n  const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n  const maxNumber = 2 ** W; // W=8 256\n  const mask = bitMask(W); // W=8 255 == mask 0b11111111\n  const shiftBy = BigInt(W); // W=8 8\n  return { windows, windowSize, mask, maxNumber, shiftBy };\n}\n\nfunction calcOffsets(n: bigint, window: number, wOpts: WOpts) {\n  const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n  let wbits = Number(n & mask); // extract W bits.\n  let nextN = n >> shiftBy; // shift number by W bits.\n\n  // What actually happens here:\n  // const highestBit = Number(mask ^ (mask >> 1n));\n  // let wbits2 = wbits - 1; // skip zero\n  // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n\n  // split if bits > max: +224 => 256-32\n  if (wbits > windowSize) {\n    // we skip zero, which means instead of `>= size-1`, we do `> size`\n    wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n    nextN += _1n; // +256 (carry)\n  }\n  const offsetStart = window * windowSize;\n  const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n  const isZero = wbits === 0; // is current window slice a 0?\n  const isNeg = wbits < 0; // is current window slice negative?\n  const isNegF = window % 2 !== 0; // fake random statement for noise\n  const offsetF = offsetStart; // fake offset for noise\n  return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>();\n\nfunction getW(P: any): number {\n  // To disable precomputes:\n  // return 1;\n  return pointWindowSizes.get(P) || 1;\n}\n\nfunction assert0(n: bigint): void {\n  if (n !== _0n) throw new Error('invalid wNAF');\n}\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Table generation takes **30MB of ram and 10ms on high-end CPU**,\n * but may take much longer on slow devices. Actual generation will happen on\n * first call of `multiply()`. By default, `BASE` point is precomputed.\n *\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / \uD835\uDC4A) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport class wNAF<PC extends PC_ANY> {\n  private readonly BASE: PC_P<PC>;\n  private readonly ZERO: PC_P<PC>;\n  private readonly Fn: PC['Fn'];\n  readonly bits: number;\n\n  // Parametrized with a given Point class (not individual point)\n  constructor(Point: PC, bits: number) {\n    this.BASE = Point.BASE;\n    this.ZERO = Point.ZERO;\n    this.Fn = Point.Fn;\n    this.bits = bits;\n  }\n\n  // non-const time multiplication ladder\n  _unsafeLadder(elm: PC_P<PC>, n: bigint, p: PC_P<PC> = this.ZERO): PC_P<PC> {\n    let d: PC_P<PC> = elm;\n    while (n > _0n) {\n      if (n & _1n) p = p.add(d);\n      d = d.double();\n      n >>= _1n;\n    }\n    return p;\n  }\n\n  /**\n   * Creates a wNAF precomputation window. Used for caching.\n   * Default window size is set by `utils.precompute()` and is equal to 8.\n   * Number of precomputed points depends on the curve size:\n   * 2^(\uD835\uDC4A\u22121) * (Math.ceil(\uD835\uDC5B / \uD835\uDC4A) + 1), where:\n   * - \uD835\uDC4A is the window size\n   * - \uD835\uDC5B is the bitlength of the curve order.\n   * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n   * @param point Point instance\n   * @param W window size\n   * @returns precomputed point tables flattened to a single array\n   */\n  private precomputeWindow(point: PC_P<PC>, W: number): PC_P<PC>[] {\n    const { windows, windowSize } = calcWOpts(W, this.bits);\n    const points: PC_P<PC>[] = [];\n    let p: PC_P<PC> = point;\n    let base = p;\n    for (let window = 0; window < windows; window++) {\n      base = p;\n      points.push(base);\n      // i=1, bc we skip 0\n      for (let i = 1; i < windowSize; i++) {\n        base = base.add(p);\n        points.push(base);\n      }\n      p = base.double();\n    }\n    return points;\n  }\n\n  /**\n   * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n   * More compact implementation:\n   * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n   * @returns real and fake (for const-time) points\n   */\n  private wNAF(W: number, precomputes: PC_P<PC>[], n: bigint): { p: PC_P<PC>; f: PC_P<PC> } {\n    // Scalar should be smaller than field order\n    if (!this.Fn.isValid(n)) throw new Error('invalid scalar');\n    // Accumulators\n    let p = this.ZERO;\n    let f = this.BASE;\n    // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n    // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n    // there is negate now: it is possible that negated element from low value\n    // would be the same as high element, which will create carry into next window.\n    // It's not obvious how this can fail, but still worth investigating later.\n    const wo = calcWOpts(W, this.bits);\n    for (let window = 0; window < wo.windows; window++) {\n      // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n      const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n      n = nextN;\n      if (isZero) {\n        // bits are 0: add garbage to fake point\n        // Important part for const-time getPublicKey: add random \"noise\" point to f.\n        f = f.add(negateCt(isNegF, precomputes[offsetF]));\n      } else {\n        // bits are 1: add to result point\n        p = p.add(negateCt(isNeg, precomputes[offset]));\n      }\n    }\n    assert0(n);\n    // Return both real and fake points: JIT won't eliminate f.\n    // At this point there is a way to F be infinity-point even if p is not,\n    // which makes it less const-time: around 1 bigint multiply.\n    return { p, f };\n  }\n\n  /**\n   * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n   * @param acc accumulator point to add result of multiplication\n   * @returns point\n   */\n  private wNAFUnsafe(\n    W: number,\n    precomputes: PC_P<PC>[],\n    n: bigint,\n    acc: PC_P<PC> = this.ZERO\n  ): PC_P<PC> {\n    const wo = calcWOpts(W, this.bits);\n    for (let window = 0; window < wo.windows; window++) {\n      if (n === _0n) break; // Early-exit, skip 0 value\n      const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n      n = nextN;\n      if (isZero) {\n        // Window bits are 0: skip processing.\n        // Move to next window.\n        continue;\n      } else {\n        const item = precomputes[offset];\n        acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n      }\n    }\n    assert0(n);\n    return acc;\n  }\n\n  private getPrecomputes(W: number, point: PC_P<PC>, transform?: Mapper<PC_P<PC>>): PC_P<PC>[] {\n    // Calculate precomputes on a first run, reuse them after\n    let comp = pointPrecomputes.get(point);\n    if (!comp) {\n      comp = this.precomputeWindow(point, W) as PC_P<PC>[];\n      if (W !== 1) {\n        // Doing transform outside of if brings 15% perf hit\n        if (typeof transform === 'function') comp = transform(comp);\n        pointPrecomputes.set(point, comp);\n      }\n    }\n    return comp;\n  }\n\n  cached(\n    point: PC_P<PC>,\n    scalar: bigint,\n    transform?: Mapper<PC_P<PC>>\n  ): { p: PC_P<PC>; f: PC_P<PC> } {\n    const W = getW(point);\n    return this.wNAF(W, this.getPrecomputes(W, point, transform), scalar);\n  }\n\n  unsafe(point: PC_P<PC>, scalar: bigint, transform?: Mapper<PC_P<PC>>, prev?: PC_P<PC>): PC_P<PC> {\n    const W = getW(point);\n    if (W === 1) return this._unsafeLadder(point, scalar, prev); // For W=1 ladder is ~x2 faster\n    return this.wNAFUnsafe(W, this.getPrecomputes(W, point, transform), scalar, prev);\n  }\n\n  // We calculate precomputes for elliptic curve point multiplication\n  // using windowed method. This specifies window size and\n  // stores precomputed values. Usually only base point would be precomputed.\n  createCache(P: PC_P<PC>, W: number): void {\n    validateW(W, this.bits);\n    pointWindowSizes.set(P, W);\n    pointPrecomputes.delete(P);\n  }\n\n  hasCache(elm: PC_P<PC>): boolean {\n    return getW(elm) !== 1;\n  }\n}\n\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nexport function mulEndoUnsafe<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  Point: PC,\n  point: P,\n  k1: bigint,\n  k2: bigint\n): { p1: P; p2: P } {\n  let acc = point;\n  let p1 = Point.ZERO;\n  let p2 = Point.ZERO;\n  while (k1 > _0n || k2 > _0n) {\n    if (k1 & _1n) p1 = p1.add(acc);\n    if (k2 & _1n) p2 = p2.add(acc);\n    acc = acc.double();\n    k1 >>= _1n;\n    k2 >>= _1n;\n  }\n  return { p1, p2 };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka secret keys / bigints)\n */\nexport function pippenger<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  c: PC,\n  fieldN: IField<bigint>,\n  points: P[],\n  scalars: bigint[]\n): P {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  const plength = points.length;\n  const slength = scalars.length;\n  if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\n  // if (plength === 0) throw new Error('array must be of length >= 2');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(plength));\n  let windowSize = 1; // bits\n  if (wbits > 12) windowSize = wbits - 3;\n  else if (wbits > 4) windowSize = wbits - 2;\n  else if (wbits > 0) windowSize = 2;\n  const MASK = bitMask(windowSize);\n  const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < slength; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & MASK);\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as P;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  c: PC,\n  fieldN: IField<bigint>,\n  points: P[],\n  windowSize: number\n): (scalars: bigint[]) => P {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar \u00D7 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 \u00D7 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 \u00D7 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = bitMask(windowSize);\n  const tables = points.map((p: P) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): P => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n// TODO: remove\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\n// TODO: remove\n/** @deprecated */\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n\nexport type ValidCurveParams<T> = {\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: T;\n  b?: T;\n  d?: T;\n  Gx: T;\n  Gy: T;\n};\n\nfunction createField<T>(order: bigint, field?: IField<T>, isLE?: boolean): IField<T> {\n  if (field) {\n    if (field.ORDER !== order) throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n    validateField(field);\n    return field;\n  } else {\n    return Field(order, { isLE }) as unknown as IField<T>;\n  }\n}\nexport type FpFn<T> = { Fp: IField<T>; Fn: IField<bigint> };\n\n/** Validates CURVE opts and creates fields */\nexport function _createCurveFields<T>(\n  type: 'weierstrass' | 'edwards',\n  CURVE: ValidCurveParams<T>,\n  curveOpts: Partial<FpFn<T>> = {},\n  FpFnLE?: boolean\n): FpFn<T> & { CURVE: ValidCurveParams<T> } {\n  if (FpFnLE === undefined) FpFnLE = type === 'edwards';\n  if (!CURVE || typeof CURVE !== 'object') throw new Error(`expected valid ${type} CURVE object`);\n  for (const p of ['p', 'n', 'h'] as const) {\n    const val = CURVE[p];\n    if (!(typeof val === 'bigint' && val > _0n))\n      throw new Error(`CURVE.${p} must be positive bigint`);\n  }\n  const Fp = createField(CURVE.p, curveOpts.Fp, FpFnLE);\n  const Fn = createField(CURVE.n, curveOpts.Fn, FpFnLE);\n  const _b: 'b' | 'd' = type === 'weierstrass' ? 'b' : 'd';\n  const params = ['Gx', 'Gy', 'a', _b] as const;\n  for (const p of params) {\n    // @ts-ignore\n    if (!Fp.isValid(CURVE[p]))\n      throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n  }\n  CURVE = Object.freeze(Object.assign({}, CURVE));\n  return { CURVE, Fp, Fn };\n}\n", "/**\n * Short Weierstrass curve methods. The formula is: y\u00B2 = x\u00B3 + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac as nobleHmac } from '@noble/hashes/hmac.js';\nimport { ahash } from '@noble/hashes/utils';\nimport {\n  _validateObject,\n  _abool2 as abool,\n  _abytes2 as abytes,\n  aInRange,\n  bitLen,\n  bitMask,\n  bytesToHex,\n  bytesToNumberBE,\n  concatBytes,\n  createHmacDrbg,\n  ensureBytes,\n  hexToBytes,\n  inRange,\n  isBytes,\n  memoized,\n  numberToHexUnpadded,\n  randomBytes as randomBytesWeb,\n  type CHash,\n  type Hex,\n  type PrivKey,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  mulEndoUnsafe,\n  negateCt,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type CurveLengths,\n  type CurvePoint,\n  type CurvePointCons,\n} from './curve.ts';\nimport {\n  Field,\n  FpInvertBatch,\n  getMinHashLength,\n  mapHashToField,\n  nLength,\n  validateField,\n  type IField,\n  type NLength,\n} from './modular.ts';\n\nexport type { AffinePoint };\nexport type HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\n\ntype EndoBasis = [[bigint, bigint], [bigint, bigint]];\n/**\n * When Weierstrass curve has `a=0`, it becomes Koblitz curve.\n * Koblitz curves allow using **efficiently-computable GLV endomorphism \u03C8**.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n *\n * Endomorphism consists of beta, lambda and splitScalar:\n *\n * 1. GLV endomorphism \u03C8 transforms a point: `P = (x, y) \u21A6 \u03C8(P) = (\u03B2\u00B7x mod p, y)`\n * 2. GLV scalar decomposition transforms a scalar: `k \u2261 k\u2081 + k\u2082\u00B7\u03BB (mod n)`\n * 3. Then these are combined: `k\u00B7P = k\u2081\u00B7P + k\u2082\u00B7\u03C8(P)`\n * 4. Two 128-bit point-by-scalar multiplications + one point addition is faster than\n *    one 256-bit multiplication.\n *\n * where\n * * beta: \u03B2 \u2208 F\u209A with \u03B2\u00B3 = 1, \u03B2 \u2260 1\n * * lambda: \u03BB \u2208 F\u2099 with \u03BB\u00B3 = 1, \u03BB \u2260 1\n * * splitScalar decomposes k \u21A6 k\u2081, k\u2082, by using reduced basis vectors.\n *   Gauss lattice reduction calculates them from initial basis vectors `(n, 0), (-\u03BB, 0)`\n *\n * Check out `test/misc/endomorphism.js` and\n * [gist](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n */\nexport type EndomorphismOpts = {\n  beta: bigint;\n  basises?: EndoBasis;\n  splitScalar?: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\n\n// We construct basis in such way that den is always positive and equals n, but num sign depends on basis (not on secret value)\nconst divNearest = (num: bigint, den: bigint) => (num + (num >= 0 ? den : -den) / _2n) / den;\n\nexport type ScalarEndoParts = { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n\n/**\n * Splits scalar for GLV endomorphism.\n */\nexport function _splitEndoScalar(k: bigint, basis: EndoBasis, n: bigint): ScalarEndoParts {\n  // Split scalar into two such that part is ~half bits: `abs(part) < sqrt(N)`\n  // Since part can be negative, we need to do this on point.\n  // TODO: verifyScalar function which consumes lambda\n  const [[a1, b1], [a2, b2]] = basis;\n  const c1 = divNearest(b2 * k, n);\n  const c2 = divNearest(-b1 * k, n);\n  // |k1|/|k2| is < sqrt(N), but can be negative.\n  // If we do `k1 mod N`, we'll get big scalar (`> sqrt(N)`): so, we do cheaper negation instead.\n  let k1 = k - c1 * a1 - c2 * a2;\n  let k2 = -c1 * b1 - c2 * b2;\n  const k1neg = k1 < _0n;\n  const k2neg = k2 < _0n;\n  if (k1neg) k1 = -k1;\n  if (k2neg) k2 = -k2;\n  // Double check that resulting scalar less than half bits of N: otherwise wNAF will fail.\n  // This should only happen on wrong basises. Also, math inside is too complex and I don't trust it.\n  const MAX_NUM = bitMask(Math.ceil(bitLen(n) / 2)) + _1n; // Half bits of N\n  if (k1 < _0n || k1 >= MAX_NUM || k2 < _0n || k2 >= MAX_NUM) {\n    throw new Error('splitScalar (endomorphism): failed, k=' + k);\n  }\n  return { k1neg, k1, k2neg, k2 };\n}\n\nexport type ECDSASigFormat = 'compact' | 'recovered' | 'der';\nexport type ECDSARecoverOpts = {\n  prehash?: boolean;\n};\nexport type ECDSAVerifyOpts = {\n  prehash?: boolean;\n  lowS?: boolean;\n  format?: ECDSASigFormat;\n};\nexport type ECDSASignOpts = {\n  prehash?: boolean;\n  lowS?: boolean;\n  format?: ECDSASigFormat;\n  extraEntropy?: Uint8Array | boolean;\n};\n\nfunction validateSigFormat(format: string): ECDSASigFormat {\n  if (!['compact', 'recovered', 'der'].includes(format))\n    throw new Error('Signature format must be \"compact\", \"recovered\", or \"der\"');\n  return format as ECDSASigFormat;\n}\n\nfunction validateSigOpts<T extends ECDSASignOpts, D extends Required<ECDSASignOpts>>(\n  opts: T,\n  def: D\n): Required<ECDSASignOpts> {\n  const optsn: ECDSASignOpts = {};\n  for (let optName of Object.keys(def)) {\n    // @ts-ignore\n    optsn[optName] = opts[optName] === undefined ? def[optName] : opts[optName];\n  }\n  abool(optsn.lowS!, 'lowS');\n  abool(optsn.prehash!, 'prehash');\n  if (optsn.format !== undefined) validateSigFormat(optsn.format);\n  return optsn as Required<ECDSASignOpts>;\n}\n\n/** Instance methods for 3D XYZ projective points. */\nexport interface WeierstrassPoint<T> extends CurvePoint<T, WeierstrassPoint<T>> {\n  /** projective X coordinate. Different from affine x. */\n  readonly X: T;\n  /** projective Y coordinate. Different from affine y. */\n  readonly Y: T;\n  /** projective z coordinate */\n  readonly Z: T;\n  /** affine x coordinate. Different from projective X. */\n  get x(): T;\n  /** affine y coordinate. Different from projective Y. */\n  get y(): T;\n  /** Encodes point using IEEE P1363 (DER) encoding. First byte is 2/3/4. Default = isCompressed. */\n  toBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  /** @deprecated use `.X` */\n  readonly px: T;\n  /** @deprecated use `.Y` */\n  readonly py: T;\n  /** @deprecated use `.Z` */\n  readonly pz: T;\n  /** @deprecated use `toBytes` */\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  /** @deprecated use `multiplyUnsafe` */\n  multiplyAndAddUnsafe(\n    Q: WeierstrassPoint<T>,\n    a: bigint,\n    b: bigint\n  ): WeierstrassPoint<T> | undefined;\n  /** @deprecated use `p.y % 2n === 0n` */\n  hasEvenY(): boolean;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n}\n\n/** Static methods for 3D XYZ projective points. */\nexport interface WeierstrassPointCons<T> extends CurvePointCons<WeierstrassPoint<T>> {\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  new (X: T, Y: T, Z: T): WeierstrassPoint<T>;\n  CURVE(): WeierstrassOpts<T>;\n  /** @deprecated use `Point.BASE.multiply(Point.Fn.fromBytes(privateKey))` */\n  fromPrivateKey(privateKey: PrivKey): WeierstrassPoint<T>;\n  /** @deprecated use `import { normalizeZ } from '@noble/curves/abstract/curve.js';` */\n  normalizeZ(points: WeierstrassPoint<T>[]): WeierstrassPoint<T>[];\n  /** @deprecated use `import { pippenger } from '@noble/curves/abstract/curve.js';` */\n  msm(points: WeierstrassPoint<T>[], scalars: bigint[]): WeierstrassPoint<T>;\n}\n\n/**\n * Weierstrass curve options.\n *\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor, usually 1. h*n is group order; n is subgroup order\n * * a: formula param, must be in field of p\n * * b: formula param, must be in field of p\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type WeierstrassOpts<T> = Readonly<{\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: T;\n  b: T;\n  Gx: T;\n  Gy: T;\n}>;\n\n// When a cofactor != 1, there can be an effective methods to:\n// 1. Determine whether a point is torsion-free\n// 2. Clear torsion component\n// wrapPrivateKey: bls12-381 requires mod(n) instead of rejecting keys >= n\nexport type WeierstrassExtraOpts<T> = Partial<{\n  Fp: IField<T>;\n  Fn: IField<bigint>;\n  allowInfinityPoint: boolean;\n  endo: EndomorphismOpts;\n  isTorsionFree: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\n  clearCofactor: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\n  fromBytes: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes: (\n    c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ) => Uint8Array;\n}>;\n\n/**\n * Options for ECDSA signatures over a Weierstrass curve.\n *\n * * lowS: (default: true) whether produced / verified signatures occupy low half of ecdsaOpts.p. Prevents malleability.\n * * hmac: (default: noble-hashes hmac) function, would be used to init hmac-drbg for k generation.\n * * randomBytes: (default: webcrypto os-level CSPRNG) custom method for fetching secure randomness.\n * * bits2int, bits2int_modN: used in sigs, sometimes overridden by curves\n */\nexport type ECDSAOpts = Partial<{\n  lowS: boolean;\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  bits2int: (bytes: Uint8Array) => bigint;\n  bits2int_modN: (bytes: Uint8Array) => bigint;\n}>;\n\n/**\n * Elliptic Curve Diffie-Hellman interface.\n * Provides keygen, secret-to-public conversion, calculating shared secrets.\n */\nexport interface ECDH {\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\n  getPublicKey: (secretKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (secretKeyA: PrivKey, publicKeyB: Hex, isCompressed?: boolean) => Uint8Array;\n  Point: WeierstrassPointCons<bigint>;\n  utils: {\n    isValidSecretKey: (secretKey: PrivKey) => boolean;\n    isValidPublicKey: (publicKey: Uint8Array, isCompressed?: boolean) => boolean;\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `randomSecretKey` */\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `isValidSecretKey` */\n    isValidPrivateKey: (secretKey: PrivKey) => boolean;\n    /** @deprecated use `Point.Fn.fromBytes()` */\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    /** @deprecated use `point.precompute()` */\n    precompute: (windowSize?: number, point?: WeierstrassPoint<bigint>) => WeierstrassPoint<bigint>;\n  };\n  lengths: CurveLengths;\n}\n\n/**\n * ECDSA interface.\n * Only supported for prime fields, not Fp2 (extension fields).\n */\nexport interface ECDSA extends ECDH {\n  sign: (message: Hex, secretKey: PrivKey, opts?: ECDSASignOpts) => ECDSASigRecovered;\n  verify: (\n    signature: Uint8Array,\n    message: Uint8Array,\n    publicKey: Uint8Array,\n    opts?: ECDSAVerifyOpts\n  ) => boolean;\n  recoverPublicKey(signature: Uint8Array, message: Uint8Array, opts?: ECDSARecoverOpts): Uint8Array;\n  Signature: ECDSASignatureCons;\n}\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return bytesToNumberBE(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = ensureBytes('signature', hex);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function _normFnElement(Fn: IField<bigint>, key: PrivKey): bigint {\n  const { BYTES: expected } = Fn;\n  let num: bigint;\n  if (typeof key === 'bigint') {\n    num = key;\n  } else {\n    let bytes = ensureBytes('private key', key);\n    try {\n      num = Fn.fromBytes(bytes);\n    } catch (error) {\n      throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n    }\n  }\n  if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\n  return num;\n}\n\n/**\n * Creates weierstrass Point constructor, based on specified curve options.\n *\n * @example\n```js\nconst opts = {\n  p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  h: BigInt(1),\n  a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\n  b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n};\nconst p256_Point = weierstrass(opts);\n```\n */\nexport function weierstrassN<T>(\n  params: WeierstrassOpts<T>,\n  extraOpts: WeierstrassExtraOpts<T> = {}\n): WeierstrassPointCons<T> {\n  const validated = _createCurveFields('weierstrass', params, extraOpts);\n  const { Fp, Fn } = validated;\n  let CURVE = validated.CURVE as WeierstrassOpts<T>;\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(\n    extraOpts,\n    {},\n    {\n      allowInfinityPoint: 'boolean',\n      clearCofactor: 'function',\n      isTorsionFree: 'function',\n      fromBytes: 'function',\n      toBytes: 'function',\n      endo: 'object',\n      wrapPrivateKey: 'boolean',\n    }\n  );\n\n  const { endo } = extraOpts;\n  if (endo) {\n    // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n    if (!Fp.is0(CURVE.a) || typeof endo.beta !== 'bigint' || !Array.isArray(endo.basises)) {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"basises\": array');\n    }\n  }\n\n  const lengths = getWLengths(Fp, Fn);\n\n  function assertCompressionIsSupported() {\n    if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\n  }\n\n  // Implements IEEE P1363 point encoding\n  function pointToBytes(\n    _c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ): Uint8Array {\n    const { x, y } = point.toAffine();\n    const bx = Fp.toBytes(x);\n    abool(isCompressed, 'isCompressed');\n    if (isCompressed) {\n      assertCompressionIsSupported();\n      const hasEvenY = !Fp.isOdd!(y);\n      return concatBytes(pprefix(hasEvenY), bx);\n    } else {\n      return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n    }\n  }\n  function pointFromBytes(bytes: Uint8Array) {\n    abytes(bytes, undefined, 'Point');\n    const { publicKey: comp, publicKeyUncompressed: uncomp } = lengths; // e.g. for 32-byte: 33, 65\n    const length = bytes.length;\n    const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // No actual validation is done here: use .assertValidity()\n    if (length === comp && (head === 0x02 || head === 0x03)) {\n      const x = Fp.fromBytes(tail);\n      if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\n      const y2 = weierstrassEquation(x); // y\u00B2 = x\u00B3 + ax + b\n      let y: T;\n      try {\n        y = Fp.sqrt(y2); // y = y\u00B2 ^ (p+1)/4\n      } catch (sqrtError) {\n        const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n        throw new Error('bad point: is not on curve, sqrt error' + err);\n      }\n      assertCompressionIsSupported();\n      const isYOdd = Fp.isOdd!(y); // (y & _1n) === _1n;\n      const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n      if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n      return { x, y };\n    } else if (length === uncomp && head === 0x04) {\n      // TODO: more checks\n      const L = Fp.BYTES;\n      const x = Fp.fromBytes(tail.subarray(0, L));\n      const y = Fp.fromBytes(tail.subarray(L, L * 2));\n      if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\n      return { x, y };\n    } else {\n      throw new Error(\n        `bad point: got length ${length}, expected compressed=${comp} or uncompressed=${uncomp}`\n      );\n    }\n  }\n\n  const encodePoint = extraOpts.toBytes || pointToBytes;\n  const decodePoint = extraOpts.fromBytes || pointFromBytes;\n  function weierstrassEquation(x: T): T {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x\u00B2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, CURVE.a)), CURVE.b); // x\u00B3 + a * x + b\n  }\n\n  // TODO: move top-level\n  /** Checks whether equation holds for given x, y: y\u00B2 == x\u00B3 + ax + b */\n  function isValidXY(x: T, y: T): boolean {\n    const left = Fp.sqr(y); // y\u00B2\n    const right = weierstrassEquation(x); // x\u00B3 + ax + b\n    return Fp.eql(left, right);\n  }\n\n  // Validate whether the passed curve params are valid.\n  // Test 1: equation y\u00B2 = x\u00B3 + ax + b should work for generator point.\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n\n  // Test 2: discriminant \u0394 part should be non-zero: 4a\u00B3 + 27b\u00B2 != 0.\n  // Guarantees curve is genus-1, smooth (non-singular).\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n\n  /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n  function acoord(title: string, n: T, banZero = false) {\n    if (!Fp.isValid(n) || (banZero && Fp.is0(n))) throw new Error(`bad point coordinate ${title}`);\n    return n;\n  }\n\n  function aprjpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  function splitEndoScalarN(k: bigint) {\n    if (!endo || !endo.basises) throw new Error('no endo');\n    return _splitEndoScalar(k, endo.basises, Fn.ORDER);\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (X, Y, Z) \u220B (x=X/Z, y=Y/Z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { X, Y, Z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(Z, Fp.ONE)) return { x: X, y: Y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(Z);\n    const x = Fp.mul(X, iz);\n    const y = Fp.mul(Y, iz);\n    const zz = Fp.mul(Z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x, y };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (extraOpts.allowInfinityPoint && !Fp.is0(p.Y)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  function finishEndo(\n    endoBeta: EndomorphismOpts['beta'],\n    k1p: Point,\n    k2p: Point,\n    k1neg: boolean,\n    k2neg: boolean\n  ) {\n    k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);\n    k1p = negateCt(k1neg, k1p);\n    k2p = negateCt(k2neg, k2p);\n    return k1p.add(k2p);\n  }\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) \u220B (x=X/Z, y=Y/Z).\n   * Default Point works in 2d / affine coordinates: (x, y).\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements WeierstrassPoint<T> {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // math field\n    static readonly Fp = Fp;\n    // scalar field\n    static readonly Fn = Fn;\n\n    readonly X: T;\n    readonly Y: T;\n    readonly Z: T;\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    constructor(X: T, Y: T, Z: T) {\n      this.X = acoord('x', X);\n      this.Y = acoord('y', Y, true);\n      this.Z = acoord('z', Z);\n      Object.freeze(this);\n    }\n\n    static CURVE(): WeierstrassOpts<T> {\n      return CURVE;\n    }\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n      if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    static fromBytes(bytes: Uint8Array): Point {\n      const P = Point.fromAffine(decodePoint(abytes(bytes, undefined, 'point')));\n      P.assertValidity();\n      return P;\n    }\n    static fromHex(hex: Hex): Point {\n      return Point.fromBytes(ensureBytes('pointHex', hex));\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     *\n     * @param windowSize\n     * @param isLazy true will defer table computation until the first multiplication\n     * @returns\n     */\n    precompute(windowSize: number = 8, isLazy = true): Point {\n      wnaf.createCache(this, windowSize);\n      if (!isLazy) this.multiply(_3n); // random number\n      return this;\n    }\n\n    // TODO: return `this`\n    /** A point on curve is valid if it conforms to equation. */\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\n      return !Fp.isOdd(y);\n    }\n\n    /** Compare one point to another. */\n    equals(other: Point): boolean {\n      aprjpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n    negate(): Point {\n      return new Point(this.X, Fp.neg(this.Y), this.Z);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      aprjpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo } = extraOpts;\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const mul = (n: bigint) => wnaf.cached(this, n, (p) => normalizeZ(Point, p));\n      /** See docs for {@link EndomorphismOpts} */\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(scalar);\n        const { p: k1p, f: k1f } = mul(k1);\n        const { p: k2p, f: k2f } = mul(k2);\n        fake = k1f.add(k2f);\n        point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n      } else {\n        const { p, f } = mul(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return normalizeZ(Point, [point, fake])[0];\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed secret key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo } = extraOpts;\n      const p = this as Point;\n      if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\n      if (sc === _0n || p.is0()) return Point.ZERO;\n      if (sc === _1n) return p; // fast-path\n      if (wnaf.hasCache(this)) return this.multiply(sc);\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(sc);\n        const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2); // 30% faster vs wnaf.unsafe\n        return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n      } else {\n        return wnaf.unsafe(p, sc);\n      }\n    }\n\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    /**\n     * Converts Projective point to affine (x, y) coordinates.\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n     */\n    toAffine(invertedZ?: T): AffinePoint<T> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    /**\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\n     * Always torsion-free for cofactor=1 curves.\n     */\n    isTorsionFree(): boolean {\n      const { isTorsionFree } = extraOpts;\n      if (cofactor === _1n) return true;\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      return wnaf.unsafe(this, CURVE_ORDER).is0();\n    }\n\n    clearCofactor(): Point {\n      const { clearCofactor } = extraOpts;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    isSmallOrder(): boolean {\n      // can we use this.clearCofactor()?\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    toBytes(isCompressed = true): Uint8Array {\n      abool(isCompressed, 'isCompressed');\n      this.assertValidity();\n      return encodePoint(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return bytesToHex(this.toBytes(isCompressed));\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n\n    // TODO: remove\n    get px(): T {\n      return this.X;\n    }\n    get py(): T {\n      return this.X;\n    }\n    get pz(): T {\n      return this.Z;\n    }\n    toRawBytes(isCompressed = true): Uint8Array {\n      return this.toBytes(isCompressed);\n    }\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, points);\n    }\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(_normFnElement(Fn, privateKey));\n    }\n  }\n  const bits = Fn.BITS;\n  const wnaf = new wNAF(Point, extraOpts.endo ? Math.ceil(bits / 2) : bits);\n  Point.BASE.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n  return Point;\n}\n\n/** Methods of ECDSA signature instance. */\nexport interface ECDSASignature {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  addRecoveryBit(recovery: number): ECDSASigRecovered;\n  hasHighS(): boolean;\n  toBytes(format?: string): Uint8Array;\n  toHex(format?: string): string;\n\n  /** @deprecated */\n  assertValidity(): void;\n  /** @deprecated */\n  normalizeS(): ECDSASignature;\n  /** @deprecated use standalone method `curve.recoverPublicKey(sig.toBytes('recovered'), msg)` */\n  recoverPublicKey(msgHash: Hex): WeierstrassPoint<bigint>;\n  /** @deprecated use `.toBytes('compact')` */\n  toCompactRawBytes(): Uint8Array;\n  /** @deprecated use `.toBytes('compact')` */\n  toCompactHex(): string;\n  /** @deprecated use `.toBytes('der')` */\n  toDERRawBytes(): Uint8Array;\n  /** @deprecated use `.toBytes('der')` */\n  toDERHex(): string;\n}\nexport type ECDSASigRecovered = ECDSASignature & {\n  readonly recovery: number;\n};\n/** Methods of ECDSA signature constructor. */\nexport type ECDSASignatureCons = {\n  new (r: bigint, s: bigint, recovery?: number): ECDSASignature;\n  fromBytes(bytes: Uint8Array, format?: ECDSASigFormat): ECDSASignature;\n  fromHex(hex: string, format?: ECDSASigFormat): ECDSASignature;\n\n  /** @deprecated use `.fromBytes(bytes, 'compact')` */\n  fromCompact(hex: Hex): ECDSASignature;\n  /** @deprecated use `.fromBytes(bytes, 'der')` */\n  fromDER(hex: Hex): ECDSASignature;\n};\n\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY: boolean): Uint8Array {\n  return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  const { A, B, Z } = opts;\n  if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n  if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n\nfunction getWLengths<T>(Fp: IField<T>, Fn: IField<bigint>) {\n  return {\n    secretKey: Fn.BYTES,\n    publicKey: 1 + Fp.BYTES,\n    publicKeyUncompressed: 1 + 2 * Fp.BYTES,\n    publicKeyHasPrefix: true,\n    signature: 2 * Fn.BYTES,\n  };\n}\n\n/**\n * Sometimes users only need getPublicKey, getSharedSecret, and secret key handling.\n * This helper ensures no signature functionality is present. Less code, smaller bundle size.\n */\nexport function ecdh(\n  Point: WeierstrassPointCons<bigint>,\n  ecdhOpts: { randomBytes?: (bytesLength?: number) => Uint8Array } = {}\n): ECDH {\n  const { Fn } = Point;\n  const randomBytes_ = ecdhOpts.randomBytes || randomBytesWeb;\n  const lengths = Object.assign(getWLengths(Point.Fp, Fn), { seed: getMinHashLength(Fn.ORDER) });\n\n  function isValidSecretKey(secretKey: PrivKey) {\n    try {\n      return !!_normFnElement(Fn, secretKey);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  function isValidPublicKey(publicKey: Uint8Array, isCompressed?: boolean): boolean {\n    const { publicKey: comp, publicKeyUncompressed } = lengths;\n    try {\n      const l = publicKey.length;\n      if (isCompressed === true && l !== comp) return false;\n      if (isCompressed === false && l !== publicKeyUncompressed) return false;\n      return !!Point.fromBytes(publicKey);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Produces cryptographically secure secret key from random of size\n   * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n   */\n  function randomSecretKey(seed = randomBytes_(lengths.seed)): Uint8Array {\n    return mapHashToField(abytes(seed, lengths.seed, 'seed'), Fn.ORDER);\n  }\n\n  /**\n   * Computes public key for a secret key. Checks for validity of the secret key.\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(secretKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);\n  }\n\n  function keygen(seed?: Uint8Array) {\n    const secretKey = randomSecretKey(seed);\n    return { secretKey, publicKey: getPublicKey(secretKey) };\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean | undefined {\n    if (typeof item === 'bigint') return false;\n    if (item instanceof Point) return true;\n    const { secretKey, publicKey, publicKeyUncompressed } = lengths;\n    if (Fn.allowedLengths || secretKey === publicKey) return undefined;\n    const l = ensureBytes('key', item).length;\n    return l === publicKey || l === publicKeyUncompressed;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from secret key A and public key B.\n   * Checks: 1) secret key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(secretKeyA: PrivKey, publicKeyB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(secretKeyA) === true) throw new Error('first arg must be private key');\n    if (isProbPub(publicKeyB) === false) throw new Error('second arg must be public key');\n    const s = _normFnElement(Fn, secretKeyA);\n    const b = Point.fromHex(publicKeyB); // checks for being on-curve\n    return b.multiply(s).toBytes(isCompressed);\n  }\n\n  const utils = {\n    isValidSecretKey,\n    isValidPublicKey,\n    randomSecretKey,\n\n    // TODO: remove\n    isValidPrivateKey: isValidSecretKey,\n    randomPrivateKey: randomSecretKey,\n    normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\n    precompute(windowSize = 8, point = Point.BASE): WeierstrassPoint<bigint> {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  return Object.freeze({ getPublicKey, getSharedSecret, keygen, Point, utils, lengths });\n}\n\n/**\n * Creates ECDSA signing interface for given elliptic curve `Point` and `hash` function.\n * We need `hash` for 2 features:\n * 1. Message prehash-ing. NOT used if `sign` / `verify` are called with `prehash: false`\n * 2. k generation in `sign`, using HMAC-drbg(hash)\n *\n * ECDSAOpts are only rarely needed.\n *\n * @example\n * ```js\n * const p256_Point = weierstrass(...);\n * const p256_sha256 = ecdsa(p256_Point, sha256);\n * const p256_sha224 = ecdsa(p256_Point, sha224);\n * const p256_sha224_r = ecdsa(p256_Point, sha224, { randomBytes: (length) => { ... } });\n * ```\n */\nexport function ecdsa(\n  Point: WeierstrassPointCons<bigint>,\n  hash: CHash,\n  ecdsaOpts: ECDSAOpts = {}\n): ECDSA {\n  ahash(hash);\n  _validateObject(\n    ecdsaOpts,\n    {},\n    {\n      hmac: 'function',\n      lowS: 'boolean',\n      randomBytes: 'function',\n      bits2int: 'function',\n      bits2int_modN: 'function',\n    }\n  );\n\n  const randomBytes = ecdsaOpts.randomBytes || randomBytesWeb;\n  const hmac: HmacFnSync =\n    ecdsaOpts.hmac ||\n    (((key, ...msgs) => nobleHmac(hash, key, concatBytes(...msgs))) satisfies HmacFnSync);\n\n  const { Fp, Fn } = Point;\n  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n  const { keygen, getPublicKey, getSharedSecret, utils, lengths } = ecdh(Point, ecdsaOpts);\n  const defaultSigOpts: Required<ECDSASignOpts> = {\n    prehash: false,\n    lowS: typeof ecdsaOpts.lowS === 'boolean' ? ecdsaOpts.lowS : false,\n    format: undefined as any, //'compact' as ECDSASigFormat,\n    extraEntropy: false,\n  };\n  const defaultSigOpts_format = 'compact';\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function validateRS(title: string, num: bigint): bigint {\n    if (!Fn.isValidNot0(num))\n      throw new Error(`invalid signature ${title}: out of range 1..Point.Fn.ORDER`);\n    return num;\n  }\n  function validateSigLength(bytes: Uint8Array, format: ECDSASigFormat) {\n    validateSigFormat(format);\n    const size = lengths.signature!;\n    const sizer = format === 'compact' ? size : format === 'recovered' ? size + 1 : undefined;\n    return abytes(bytes, sizer, `${format} signature`);\n  }\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports compact, recovered & DER representations.\n   */\n  class Signature implements ECDSASignature {\n    readonly r: bigint;\n    readonly s: bigint;\n    readonly recovery?: number;\n    constructor(r: bigint, s: bigint, recovery?: number) {\n      this.r = validateRS('r', r); // r in [1..N-1];\n      this.s = validateRS('s', s); // s in [1..N-1];\n      if (recovery != null) this.recovery = recovery;\n      Object.freeze(this);\n    }\n\n    static fromBytes(bytes: Uint8Array, format: ECDSASigFormat = defaultSigOpts_format): Signature {\n      validateSigLength(bytes, format);\n      let recid: number | undefined;\n      if (format === 'der') {\n        const { r, s } = DER.toSig(abytes(bytes));\n        return new Signature(r, s);\n      }\n      if (format === 'recovered') {\n        recid = bytes[0];\n        format = 'compact';\n        bytes = bytes.subarray(1);\n      }\n      const L = Fn.BYTES;\n      const r = bytes.subarray(0, L);\n      const s = bytes.subarray(L, L * 2);\n      return new Signature(Fn.fromBytes(r), Fn.fromBytes(s), recid);\n    }\n\n    static fromHex(hex: string, format?: ECDSASigFormat) {\n      return this.fromBytes(hexToBytes(hex), format);\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(messageHash: Hex): WeierstrassPoint<bigint> {\n      const FIELD_ORDER = Fp.ORDER;\n      const { r, s, recovery: rec } = this;\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n\n      // ECDSA recovery is hard for cofactor > 1 curves.\n      // In sign, `r = q.x mod n`, and here we recover q.x from r.\n      // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n      // However, for cofactor>1, r+n may not get q.x:\n      // r+n*i would need to be done instead where i is unknown.\n      // To easily get i, we either need to:\n      // a. increase amount of valid recid values (4, 5...); OR\n      // b. prohibit non-prime-order signatures (recid > 1).\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n      if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\n\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n      if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\n      const x = Fp.toBytes(radj);\n      const R = Point.fromBytes(concatBytes(pprefix((rec & 1) === 0), x));\n      const ir = Fn.inv(radj); // r^-1\n      const h = bits2int_modN(ensureBytes('msgHash', messageHash)); // Truncate hash\n      const u1 = Fn.create(-h * ir); // -hr^-1\n      const u2 = Fn.create(s * ir); // sr^-1\n      // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n      if (Q.is0()) throw new Error('point at infinify');\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    toBytes(format: ECDSASigFormat = defaultSigOpts_format) {\n      validateSigFormat(format);\n      if (format === 'der') return hexToBytes(DER.hexFromSig(this));\n      const r = Fn.toBytes(this.r);\n      const s = Fn.toBytes(this.s);\n      if (format === 'recovered') {\n        if (this.recovery == null) throw new Error('recovery bit must be present');\n        return concatBytes(Uint8Array.of(this.recovery), r, s);\n      }\n      return concatBytes(r, s);\n    }\n\n    toHex(format?: ECDSASigFormat) {\n      return bytesToHex(this.toBytes(format));\n    }\n\n    // TODO: remove\n    assertValidity(): void {}\n    static fromCompact(hex: Hex) {\n      return Signature.fromBytes(ensureBytes('sig', hex), 'compact');\n    }\n    static fromDER(hex: Hex) {\n      return Signature.fromBytes(ensureBytes('sig', hex), 'der');\n    }\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n    }\n    toDERRawBytes() {\n      return this.toBytes('der');\n    }\n    toDERHex() {\n      return bytesToHex(this.toBytes('der'));\n    }\n    toCompactRawBytes() {\n      return this.toBytes('compact');\n    }\n    toCompactHex() {\n      return bytesToHex(this.toBytes('compact'));\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    ecdsaOpts.bits2int ||\n    function bits2int_def(bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\", for protection against DoS\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    ecdsaOpts.bits2int_modN ||\n    function bits2int_modN_def(bytes: Uint8Array): bigint {\n      return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // Pads output with zero as per spec\n  const ORDER_MASK = bitMask(fnBits);\n  /** Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`. */\n  function int2octets(num: bigint): Uint8Array {\n    // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n    aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n    return Fn.toBytes(num);\n  }\n\n  function validateMsgAndHash(message: Uint8Array, prehash: boolean) {\n    abytes(message, undefined, 'message');\n    return prehash ? abytes(hash(message), undefined, 'prehashed message') : message;\n  }\n\n  /**\n   * Steps A, D of RFC6979 3.2.\n   * Creates RFC6979 seed; converts msg/privKey to numbers.\n   * Used only in sign, not in verify.\n   *\n   * Warning: we cannot assume here that message has same amount of bytes as curve order,\n   * this will be invalid at least for P521. Also it can be bigger for P224 + SHA256.\n   */\n  function prepSig(message: Uint8Array, privateKey: PrivKey, opts: ECDSASignOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { lowS, prehash, extraEntropy } = validateSigOpts(opts, defaultSigOpts);\n    message = validateMsgAndHash(message, prehash); // RFC6979 3.2 A: h1 = H(m)\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(message);\n    const d = _normFnElement(Fn, privateKey); // validate secret key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (extraEntropy != null && extraEntropy !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      // gen random bytes OR pass as-is\n      const e = extraEntropy === true ? randomBytes(lengths.secretKey) : extraEntropy;\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    // To transform k => Signature:\n    // q = k\u22C5G\n    // r = q.x mod n\n    // s = k^-1(m + rd) mod n\n    // Can use scalar blinding b^-1(bm + bdr) where b \u2208 [1,q\u22121] according to\n    // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n    // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      // Important: all mod() calls here must be done over N\n      const k = bits2int(kBytes); // mod n, not mod p\n      if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\n      const ik = Fn.inv(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = k\u22C5G\n      const r = Fn.create(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = Fn.neg(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n\n  /**\n   * Signs message hash with a secret key.\n   *\n   * ```\n   * sign(m, d) where\n   *   k = rfc6979_hmac_drbg(m, d)\n   *   (x, y) = G \u00D7 k\n   *   r = x mod n\n   *   s = (m + dr) / k mod n\n   * ```\n   */\n  function sign(message: Hex, secretKey: PrivKey, opts: ECDSASignOpts = {}): RecoveredSignature {\n    message = ensureBytes('message', message);\n    const { seed, k2sig } = prepSig(message, secretKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = createHmacDrbg<RecoveredSignature>(hash.outputLen, Fn.BYTES, hmac);\n    const sig = drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    return sig;\n  }\n\n  function tryParsingSig(sg: Hex | SignatureLike) {\n    // Try to deduce format\n    let sig: Signature | undefined = undefined;\n    const isHex = typeof sg === 'string' || isBytes(sg);\n    const isObj =\n      !isHex &&\n      sg !== null &&\n      typeof sg === 'object' &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n    if (isObj) {\n      sig = new Signature(sg.r, sg.s);\n    } else if (isHex) {\n      try {\n        sig = Signature.fromBytes(ensureBytes('sig', sg), 'der');\n      } catch (derError) {\n        if (!(derError instanceof DER.Err)) throw derError;\n      }\n      if (!sig) {\n        try {\n          sig = Signature.fromBytes(ensureBytes('sig', sg), 'compact');\n        } catch (error) {\n          return false;\n        }\n      }\n    }\n    if (!sig) return false;\n    return sig;\n  }\n\n  /**\n   * Verifies a signature against message and public key.\n   * Rejects lowS signatures by default: see {@link ECDSAVerifyOpts}.\n   * Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   u1 = hs^-1 mod n\n   *   u2 = rs^-1 mod n\n   *   R = u1\u22C5G + u2\u22C5P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    message: Hex,\n    publicKey: Hex,\n    opts: ECDSAVerifyOpts = {}\n  ): boolean {\n    const { lowS, prehash, format } = validateSigOpts(opts, defaultSigOpts);\n    publicKey = ensureBytes('publicKey', publicKey);\n    message = validateMsgAndHash(ensureBytes('message', message), prehash);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const sig =\n      format === undefined\n        ? tryParsingSig(signature)\n        : Signature.fromBytes(ensureBytes('sig', signature as Hex), format);\n    if (sig === false) return false;\n    try {\n      const P = Point.fromBytes(publicKey);\n      if (lowS && sig.hasHighS()) return false;\n      const { r, s } = sig;\n      const h = bits2int_modN(message); // mod n, not mod p\n      const is = Fn.inv(s); // s^-1 mod n\n      const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n      const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n      const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2)); // u1\u22C5G + u2\u22C5P\n      if (R.is0()) return false;\n      const v = Fn.create(R.x); // v = r.x mod n\n      return v === r;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function recoverPublicKey(\n    signature: Uint8Array,\n    message: Uint8Array,\n    opts: ECDSARecoverOpts = {}\n  ): Uint8Array {\n    const { prehash } = validateSigOpts(opts, defaultSigOpts);\n    message = validateMsgAndHash(message, prehash);\n    return Signature.fromBytes(signature, 'recovered').recoverPublicKey(message).toBytes();\n  }\n\n  return Object.freeze({\n    keygen,\n    getPublicKey,\n    getSharedSecret,\n    utils,\n    lengths,\n    Point,\n    sign,\n    verify,\n    recoverPublicKey,\n    Signature,\n    hash,\n  });\n}\n\n// TODO: remove everything below\n/** @deprecated use ECDSASignature */\nexport type SignatureType = ECDSASignature;\n/** @deprecated use ECDSASigRecovered */\nexport type RecoveredSignatureType = ECDSASigRecovered;\n/** @deprecated switch to Uint8Array signatures in format 'compact' */\nexport type SignatureLike = { r: bigint; s: bigint };\nexport type ECDSAExtraEntropy = Hex | boolean;\n/** @deprecated use `ECDSAExtraEntropy` */\nexport type Entropy = Hex | boolean;\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts;\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\n};\n/** @deprecated use ECDSASignOpts */\nexport type SignOpts = ECDSASignOpts;\n/** @deprecated use ECDSASignOpts */\nexport type VerOpts = ECDSAVerifyOpts;\n\n/** @deprecated use WeierstrassPoint */\nexport type ProjPointType<T> = WeierstrassPoint<T>;\n/** @deprecated use WeierstrassPointCons */\nexport type ProjConstructor<T> = WeierstrassPointCons<T>;\n/** @deprecated use ECDSASignatureCons */\nexport type SignatureConstructor = ECDSASignatureCons;\n\n// TODO: remove\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (\n    c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ) => Uint8Array;\n};\n\n// LegacyWeierstrassOpts\nexport type CurvePointsTypeWithLength<T> = Readonly<CurvePointsType<T> & Partial<NLength>>;\n\n// LegacyWeierstrass\nexport type CurvePointsRes<T> = {\n  Point: WeierstrassPointCons<T>;\n\n  /** @deprecated use `Point.CURVE()` */\n  CURVE: CurvePointsType<T>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: WeierstrassPointCons<T>;\n  /** @deprecated use `Point.Fn.fromBytes(privateKey)` */\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  /** @deprecated */\n  weierstrassEquation: (x: T) => T;\n  /** @deprecated use `Point.Fn.isValidNot0(num)` */\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// Aliases to legacy types\n// export type CurveType = LegacyECDSAOpts;\n// export type CurveFn = LegacyECDSA;\n// export type CurvePointsRes<T> = LegacyWeierstrass<T>;\n// export type CurvePointsType<T> = LegacyWeierstrassOpts<T>;\n// export type CurvePointsTypeWithLength<T> = LegacyWeierstrassOpts<T>;\n// export type BasicWCurve<T> = LegacyWeierstrassOpts<T>;\n\n/** @deprecated use `Uint8Array` */\nexport type PubKey = Hex | WeierstrassPoint<bigint>;\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac?: HmacFnSync;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\nexport type CurveFn = {\n  /** @deprecated use `Point.CURVE()` */\n  CURVE: CurvePointsType<bigint>;\n  keygen: ECDSA['keygen'];\n  getPublicKey: ECDSA['getPublicKey'];\n  getSharedSecret: ECDSA['getSharedSecret'];\n  sign: ECDSA['sign'];\n  verify: ECDSA['verify'];\n  Point: WeierstrassPointCons<bigint>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: WeierstrassPointCons<bigint>;\n  Signature: ECDSASignatureCons;\n  utils: ECDSA['utils'];\n  lengths: ECDSA['lengths'];\n};\n/** @deprecated use `weierstrass` in newer releases */\nexport function weierstrassPoints<T>(c: CurvePointsTypeWithLength<T>): CurvePointsRes<T> {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  return _weierstrass_new_output_to_legacy(c, Point);\n}\nexport type WsPointComposed<T> = {\n  CURVE: WeierstrassOpts<T>;\n  curveOpts: WeierstrassExtraOpts<T>;\n};\nexport type WsComposed = {\n  /** @deprecated use `Point.CURVE()` */\n  CURVE: WeierstrassOpts<bigint>;\n  hash: CHash;\n  curveOpts: WeierstrassExtraOpts<bigint>;\n  ecdsaOpts: ECDSAOpts;\n};\nfunction _weierstrass_legacy_opts_to_new<T>(c: CurvePointsType<T>): WsPointComposed<T> {\n  const CURVE: WeierstrassOpts<T> = {\n    a: c.a,\n    b: c.b,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  let allowedLengths = c.allowedPrivateKeyLengths\n    ? Array.from(new Set(c.allowedPrivateKeyLengths.map((l) => Math.ceil(l / 2))))\n    : undefined;\n  const Fn = Field(CURVE.n, {\n    BITS: c.nBitLength,\n    allowedLengths: allowedLengths,\n    modFromBytes: c.wrapPrivateKey,\n  });\n  const curveOpts: WeierstrassExtraOpts<T> = {\n    Fp,\n    Fn,\n    allowInfinityPoint: c.allowInfinityPoint,\n    endo: c.endo,\n    isTorsionFree: c.isTorsionFree,\n    clearCofactor: c.clearCofactor,\n    fromBytes: c.fromBytes,\n    toBytes: c.toBytes,\n  };\n  return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c: CurveType): WsComposed {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const ecdsaOpts: ECDSAOpts = {\n    hmac: c.hmac,\n    randomBytes: c.randomBytes,\n    lowS: c.lowS,\n    bits2int: c.bits2int,\n    bits2int_modN: c.bits2int_modN,\n  };\n  return { CURVE, curveOpts, hash: c.hash, ecdsaOpts };\n}\nexport function _legacyHelperEquat<T>(Fp: IField<T>, a: T, b: T): (x: T) => T {\n  /**\n   * y\u00B2 = x\u00B3 + ax + b: Short weierstrass curve formula. Takes x, returns y\u00B2.\n   * @returns y\u00B2\n   */\n  function weierstrassEquation(x: T): T {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x\u00B2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x\u00B3 + a * x + b\n  }\n  return weierstrassEquation;\n}\nfunction _weierstrass_new_output_to_legacy<T>(\n  c: CurvePointsType<T>,\n  Point: WeierstrassPointCons<T>\n): CurvePointsRes<T> {\n  const { Fp, Fn } = Point;\n  function isWithinCurveOrder(num: bigint): boolean {\n    return inRange(num, _1n, Fn.ORDER);\n  }\n  const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n  return Object.assign(\n    {},\n    {\n      CURVE: c,\n      Point: Point,\n      ProjectivePoint: Point,\n      normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\n      weierstrassEquation,\n      isWithinCurveOrder,\n    }\n  );\n}\nfunction _ecdsa_new_output_to_legacy(c: CurveType, _ecdsa: ECDSA): CurveFn {\n  const Point = _ecdsa.Point;\n  return Object.assign({}, _ecdsa, {\n    ProjectivePoint: Point,\n    CURVE: Object.assign({}, c, nLength(Point.Fn.ORDER, Point.Fn.BITS)),\n  });\n}\n\n// _ecdsa_legacy\nexport function weierstrass(c: CurveType): CurveFn {\n  const { CURVE, curveOpts, hash, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  const signs = ecdsa(Point, hash, ecdsaOpts);\n  return _ecdsa_new_output_to_legacy(c, signs);\n}\n", "/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.ts';\nimport type { CHash } from './utils.ts';\n\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash: CHash): { hash: CHash } {\n  return { hash };\n}\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\nexport type CurveDef = Readonly<Omit<CurveType, 'hash'>>;\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\n\n/** @deprecated use new `weierstrass()` and `ecdsa()` methods */\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, hash: hash });\n  return { ...create(defHash), create };\n}\n", "/**\n * hash-to-curve from RFC 9380.\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * https://www.rfc-editor.org/rfc/rfc9380\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { CHash } from '../utils.ts';\nimport {\n  _validateObject,\n  abytes,\n  bytesToNumberBE,\n  concatBytes,\n  isBytes,\n  isHash,\n  utf8ToBytes,\n} from '../utils.ts';\nimport type { AffinePoint, Group, GroupConstructor } from './curve.ts';\nimport { FpInvertBatch, mod, type IField } from './modular.ts';\n\nexport type UnicodeOrBytes = string | Uint8Array;\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\nexport type H2COpts = {\n  DST: UnicodeOrBytes;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n  p: bigint;\n  m: number;\n  k: number;\n};\nexport type H2CHashOpts = {\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n// todo: remove\nexport type Opts = H2COpts;\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  anum(value);\n  anum(length);\n  if (value < 0 || value >= 1 << (8 * length)) throw new Error('invalid I2OSP input: ' + value);\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\nfunction normDST(DST: UnicodeOrBytes): Uint8Array {\n  if (!isBytes(DST) && typeof DST !== 'string') throw new Error('DST must be Uint8Array or string');\n  return typeof DST === 'string' ? utf8ToBytes(DST) : DST;\n}\n\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: UnicodeOrBytes,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  anum(lenInBytes);\n  DST = normDST(DST);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: UnicodeOrBytes,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  anum(lenInBytes);\n  DST = normDST(DST);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: H2COpts): bigint[][] {\n  _validateObject(options, {\n    p: 'bigint',\n    m: 'number',\n    k: 'number',\n    hash: 'function',\n  });\n  const { p, k, m, hash, expand, DST } = options;\n  if (!isHash(options.hash)) throw new Error('expected valid hash');\n  abytes(msg);\n  anum(count);\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport type XY<T> = (x: T, y: T) => { x: T; y: T };\nexport type XYRatio<T> = [T[], T[], T[], T[]]; // xn/xd, yn/yd\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: XYRatio<T>): XY<T> {\n  // Make same order as in spec\n  const coeff = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xn, xd, yn, yd] = coeff.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    // 6.6.3\n    // Exceptional cases of iso_map are inputs that cause the denominator of\n    // either rational function to evaluate to zero; such cases MUST return\n    // the identity point on E.\n    const [xd_inv, yd_inv] = FpInvertBatch(field, [xd, yd], true);\n    x = field.mul(xn, xd_inv); // xNum / xDen\n    y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\n/** Point interface, which curves must implement to work correctly with the module. */\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\nexport type H2CMethod<T> = (msg: Uint8Array, options?: htfBasicOpts) => H2CPoint<T>;\n// TODO: remove\nexport type HTFMethod<T> = H2CMethod<T>;\nexport type MapMethod<T> = (scalars: bigint[]) => H2CPoint<T>;\nexport type H2CHasherBase<T> = {\n  hashToCurve: H2CMethod<T>;\n  hashToScalar: (msg: Uint8Array, options: htfBasicOpts) => bigint;\n};\n/**\n * RFC 9380 methods, with cofactor clearing. See https://www.rfc-editor.org/rfc/rfc9380#section-3.\n *\n * * hashToCurve: `map(hash(input))`, encodes RANDOM bytes to curve (WITH hashing)\n * * encodeToCurve: `map(hash(input))`, encodes NON-UNIFORM bytes to curve (WITH hashing)\n * * mapToCurve: `map(scalars)`, encodes NON-UNIFORM scalars to curve (NO hashing)\n */\nexport type H2CHasher<T> = H2CHasherBase<T> & {\n  encodeToCurve: H2CMethod<T>;\n  mapToCurve: MapMethod<T>;\n  defaults: H2COpts & { encodeDST?: UnicodeOrBytes };\n};\n// TODO: remove\nexport type Hasher<T> = H2CHasher<T>;\n\nexport const _DST_scalar: Uint8Array = utf8ToBytes('HashToScalar-');\n\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. See {@link H2CHasher}. */\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  defaults: H2COpts & { encodeDST?: UnicodeOrBytes }\n): H2CHasher<T> {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  function map(num: bigint[]) {\n    return Point.fromAffine(mapToCurve(num));\n  }\n  function clear(initial: H2CPoint<T>) {\n    const P = initial.clearCofactor();\n    if (P.equals(Point.ZERO)) return Point.ZERO; // zero will throw in assert\n    P.assertValidity();\n    return P;\n  }\n\n  return {\n    defaults,\n\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const opts = Object.assign({}, defaults, options);\n      const u = hash_to_field(msg, 2, opts);\n      const u0 = map(u[0]);\n      const u1 = map(u[1]);\n      return clear(u0.add(u1));\n    },\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const optsDst = defaults.encodeDST ? { DST: defaults.encodeDST } : {};\n      const opts = Object.assign({}, defaults, optsDst, options);\n      const u = hash_to_field(msg, 1, opts);\n      const u0 = map(u[0]);\n      return clear(u0);\n    },\n    /** See {@link H2CHasher} */\n    mapToCurve(scalars: bigint[]): H2CPoint<T> {\n      if (!Array.isArray(scalars)) throw new Error('expected array of bigints');\n      for (const i of scalars)\n        if (typeof i !== 'bigint') throw new Error('expected array of bigints');\n      return clear(map(scalars));\n    },\n\n    // hash_to_scalar can produce 0: https://www.rfc-editor.org/errata/eid8393\n    // RFC 9380, draft-irtf-cfrg-bbs-signatures-08\n    hashToScalar(msg: Uint8Array, options?: htfBasicOpts): bigint {\n      // @ts-ignore\n      const N = Point.Fn.ORDER;\n      const opts = Object.assign({}, defaults, { p: N, m: 1, DST: _DST_scalar }, options);\n      return hash_to_field(msg, 1, opts)[0][0];\n    },\n  };\n}\n", "/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism \u03C8,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport type { CurveLengths } from './abstract/curve.ts';\nimport {\n  createHasher,\n  type H2CHasher,\n  type H2CMethod,\n  isogenyMap,\n} from './abstract/hash-to-curve.ts';\nimport { Field, mapHashToField, mod, pow2 } from './abstract/modular.ts';\nimport {\n  _normFnElement,\n  type EndomorphismOpts,\n  mapToCurveSimpleSWU,\n  type WeierstrassPoint as PointType,\n  type WeierstrassOpts,\n  type WeierstrassPointCons,\n} from './abstract/weierstrass.ts';\nimport type { Hex, PrivKey } from './utils.ts';\nimport {\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n  utf8ToBytes,\n} from './utils.ts';\n\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE: WeierstrassOpts<bigint> = {\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n  h: BigInt(1),\n  a: BigInt(0),\n  b: BigInt(7),\n  Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n  Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\n\nconst secp256k1_ENDO: EndomorphismOpts = {\n  beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n  basises: [\n    [BigInt('0x3086d221a7d46bcde86c90e49284eb15'), -BigInt('0xe4437ed6010e88286f547fa90abfe4c3')],\n    [BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'), BigInt('0x3086d221a7d46bcde86c90e49284eb15')],\n  ],\n};\n\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\n\n/**\n * \u221An = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1_CURVE.p;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1_CURVE.p, { sqrt: sqrtMod });\n\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = secp256k1.keygen();\n * const msg = new TextEncoder().encode('hello');\n * const sig = secp256k1.sign(msg, secretKey);\n * const isValid = secp256k1.verify(sig, msg, publicKey) === true;\n * ```\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  { ...secp256k1_CURVE, Fp: Fpk1, lowS: true, endo: secp256k1_ENDO },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(utf8ToBytes(tag));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toBytes(true).slice(1);\nconst Pointk1 = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y: bigint) => y % _2n === _0n;\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  const { Fn, BASE } = Pointk1;\n  const d_ = _normFnElement(Fn, priv);\n  const p = BASE.multiply(d_); // P = d'\u22C5G; 0 < d' < n check is done inside\n  const scalar = hasEven(p.y) ? d_ : Fn.neg(d_);\n  return { scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  const Fp = Fpk1;\n  if (!Fp.isValidNot0(x)) throw new Error('invalid x: Fail if x \u2265 p');\n  const xx = Fp.create(x * x);\n  const c = Fp.create(xx * x + BigInt(7)); // Let c = x\u00B3 + 7 mod p.\n  let y = Fp.sqrt(c); // Let y = c^(p+1)/4 mod p. Same as sqrt().\n  // Return the unique point P such that x(P) = x and\n  // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  if (!hasEven(y)) y = Fp.neg(y);\n  const p = Pointk1.fromAffine({ x, y });\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return Pointk1.Fn.create(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(secretKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(secretKey).bytes; // d'=int(sk). Fail if d'=0 or d'\u2265n. Ret bytes(d'\u22C5G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message: Hex, secretKey: PrivKey, auxRand: Hex = randomBytes(32)): Uint8Array {\n  const { Fn } = Pointk1;\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(secretKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = Fn.toBytes(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  // Let k' = int(rand) mod n. Fail if k' = 0. Let R = k'\u22C5G\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(rand);\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(Fn.toBytes(Fn.create(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const { Fn, BASE } = Pointk1;\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r \u2265 p.\n    if (!inRange(r, _1n, secp256k1_CURVE.p)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s \u2265 n.\n    if (!inRange(s, _1n, secp256k1_CURVE.n)) return false;\n    // int(challenge(bytes(r)||bytes(P)||m))%n\n    const e = challenge(Fn.toBytes(r), pointToBytes(P), m);\n    // R = s\u22C5G - e\u22C5P, where -eP == (n-e)P\n    const R = BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(Fn.neg(e)));\n    const { x, y } = R.toAffine();\n    // Fail if is_infinite(R) / not has_even_y(R) / x(R) \u2260 r.\n    if (R.is0() || !hasEven(y) || x !== r) return false;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  Point: WeierstrassPointCons<bigint>;\n  utils: {\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    lift_x: typeof lift_x;\n    taggedHash: typeof taggedHash;\n\n    /** @deprecated use `randomSecretKey` */\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `utils` */\n    numberToBytesBE: typeof numberToBytesBE;\n    /** @deprecated use `utils` */\n    bytesToNumberBE: typeof bytesToNumberBE;\n    /** @deprecated use `modular` */\n    mod: typeof mod;\n  };\n  lengths: CurveLengths;\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = schnorr.keygen();\n * // const publicKey = schnorr.getPublicKey(secretKey);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, secretKey);\n * const isValid = schnorr.verify(sig, msg, publicKey);\n * ```\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => {\n  const size = 32;\n  const seedLength = 48;\n  const randomSecretKey = (seed = randomBytes(seedLength)): Uint8Array => {\n    return mapHashToField(seed, secp256k1_CURVE.n);\n  };\n  // TODO: remove\n  secp256k1.utils.randomSecretKey;\n  function keygen(seed?: Uint8Array) {\n    const secretKey = randomSecretKey(seed);\n    return { secretKey, publicKey: schnorrGetPublicKey(secretKey) };\n  }\n  return {\n    keygen,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    Point: Pointk1,\n    utils: {\n      randomSecretKey: randomSecretKey,\n      randomPrivateKey: randomSecretKey,\n      taggedHash,\n\n      // TODO: remove\n      lift_x,\n      pointToBytes,\n      numberToBytesBE,\n      bytesToNumberBE,\n      mod,\n    },\n    lengths: {\n      secretKey: size,\n      publicKey: size,\n      publicKeyHasPrefix: false,\n      signature: size * 2,\n      seed: seedLength,\n    },\n  };\n})();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\n\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.Point,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\n\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.hashToCurve)();\n\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.encodeToCurve)();\n", "// ABOUTME: R2-only storage utility for images and non-video blobs\n// ABOUTME: Bypasses Cloudflare Stream entirely for instant image serving\n\n/**\n * Store image directly in R2 with proper metadata\n * @param {ArrayBuffer} imageBlob - The image data as ArrayBuffer\n * @param {string} sha256 - Pre-calculated SHA-256 hash\n * @param {string} contentType - MIME type (image/jpeg, image/png, etc.)\n * @param {Object} env - Environment bindings (R2_VIDEOS, MEDIA_KV)\n * @param {Object} metadata - Image metadata (owner, filename, etc.)\n * @param {Object} deps - Dependencies (now)\n * @returns {Promise<Object>} - { success, sha256, urls, errors }\n */\nexport async function storeImageInR2(imageBlob, sha256, contentType, env, metadata = {}, deps = {}) {\n  const now = deps.now || (() => Date.now());\n\n  console.log(`\uD83D\uDCF8 IMAGE STORE: Starting R2-only storage for SHA-256: ${sha256}, type: ${contentType}`);\n\n  const results = {\n    success: false,\n    sha256,\n    urls: {},\n    errors: {}\n  };\n\n  // Validate environment\n  if (!env.R2_VIDEOS) {\n    results.errors.r2 = 'No R2 binding available';\n    console.error('\uD83D\uDCF8 IMAGE STORE: No R2_VIDEOS binding');\n    return results;\n  }\n\n  if (!env.MEDIA_KV) {\n    results.errors.kv = 'No KV binding available';\n    console.error('\uD83D\uDCF8 IMAGE STORE: No MEDIA_KV binding');\n    return results;\n  }\n\n  // Determine file extension from content type\n  const extension = getExtensionFromMimeType(contentType);\n  const r2Key = `images/${sha256}${extension}`;\n\n  try {\n    // Store in R2 with proper metadata\n    console.log(`\uD83D\uDCF8 IMAGE STORE: Storing in R2 with key: ${r2Key}`);\n    await env.R2_VIDEOS.put(r2Key, imageBlob, {\n      httpMetadata: {\n        contentType: contentType,\n        cacheControl: 'public, max-age=31536000' // 1 year cache\n      },\n      customMetadata: {\n        sha256: sha256,\n        uploadedAt: new Date().toISOString(),\n        type: 'image',\n        originalContentType: contentType,\n        size: imageBlob.byteLength.toString()\n      }\n    });\n\n    console.log(`\u2705 IMAGE STORE: R2 upload successful for ${r2Key}`);\n\n    // Store metadata in KV\n    const record = {\n      status: 'ready', // Images are ready immediately (no processing needed)\n      type: 'image',\n      contentType,\n      owner: metadata.owner || 'system',\n      createdAt: now(),\n      uploadedVia: 'image_storage',\n      sha256,\n      size: imageBlob.byteLength,\n      filename: metadata.filename || `image${extension}`,\n      r2Key\n    };\n\n    await env.MEDIA_KV.put(`image:${sha256}`, JSON.stringify(record));\n    console.log(`\u2705 IMAGE STORE: KV metadata stored for SHA-256: ${sha256}`);\n\n    // Create SHA-256 index pointing to image record\n    await env.MEDIA_KV.put(`idx:sha256:${sha256}`, JSON.stringify({\n      sha256,\n      type: 'image'\n    }));\n\n    // Create owner index if available\n    if (record.owner && record.owner !== 'system') {\n      await env.MEDIA_KV.put(`idx:pubkey:${record.owner}:image:${sha256}`, '1');\n    }\n\n    // Generate CDN URLs\n    const cdnDomain = env.STREAM_DOMAIN || 'cdn.divine.video';\n    results.urls = {\n      url: `https://${cdnDomain}/${sha256}${extension}`,\n      bareUrl: `https://${cdnDomain}/${sha256}`,\n      r2DirectUrl: env.R2_PUBLIC_DOMAIN ? `https://${env.R2_PUBLIC_DOMAIN}/${r2Key}` : null\n    };\n\n    results.success = true;\n    console.log(`\u2705 IMAGE STORE: Complete for ${sha256} - URLs generated`);\n\n  } catch (error) {\n    console.error(`\u274C IMAGE STORE: Failed for ${sha256}:`, error);\n    results.errors.storage = error.message;\n  }\n\n  return results;\n}\n\n/**\n * Get file extension from MIME type\n */\nfunction getExtensionFromMimeType(contentType) {\n  const mimeToExt = {\n    'image/jpeg': '.jpg',\n    'image/jpg': '.jpg',\n    'image/png': '.png',\n    'image/gif': '.gif',\n    'image/webp': '.webp',\n    'image/avif': '.avif',\n    'image/svg+xml': '.svg',\n    'image/bmp': '.bmp',\n    'image/tiff': '.tiff'\n  };\n\n  return mimeToExt[contentType.toLowerCase()] || '.jpg'; // Default to .jpg\n}\n\n/**\n * Check if a content type is an image\n */\nexport function isImageContentType(contentType) {\n  if (!contentType) return false;\n  return contentType.toLowerCase().startsWith('image/');\n}\n\n/**\n * Fetch image from URL and calculate SHA-256\n * @param {string} sourceUrl - URL to fetch image from\n * @param {Object} deps - Dependencies (fetch)\n * @returns {Promise<Object>} - { blob, sha256, size, contentType }\n */\nexport async function fetchAndHashImage(sourceUrl, deps = {}) {\n  const fetchFn = deps.fetch || globalThis.fetch;\n\n  console.log(`\uD83D\uDCF8 IMAGE FETCH: Fetching image from: ${sourceUrl}`);\n\n  const response = await fetchFn(sourceUrl);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch image: ${response.status} ${response.statusText}`);\n  }\n\n  const contentType = response.headers.get('content-type') || 'image/jpeg';\n  if (!isImageContentType(contentType)) {\n    throw new Error(`Invalid content type for image: ${contentType}`);\n  }\n\n  const blob = await response.arrayBuffer();\n\n  // Calculate SHA-256\n  const hashBuffer = await crypto.subtle.digest('SHA-256', blob);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const sha256 = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n\n  console.log(`\u2705 IMAGE FETCH: Image fetched and hashed - Size: ${blob.byteLength}, SHA-256: ${sha256}, Type: ${contentType}`);\n\n  return {\n    blob,\n    sha256,\n    size: blob.byteLength,\n    contentType\n  };\n}", "// ABOUTME: Blossom protocol authentication using Nostr events\n// ABOUTME: Handles kind 24242 authorization events for blob operations\n\n/**\n * Verify Blossom authorization event (kind 24242)\n * @param {Request} req - The HTTP request\n * @param {Object} deps - Dependencies\n * @returns {Promise<Object|null>} - Auth result with pubkey or null if invalid\n */\nexport async function verifyBlossomAuth(req, deps = {}) {\n  const auth = req.headers.get(\"authorization\") || req.headers.get(\"Authorization\");\n  console.log(\"\uD83C\uDF38 Blossom auth called\");\n\n  if (!auth || !auth.startsWith('Nostr ')) {\n    console.log(\"\uD83C\uDF38 No Nostr auth header found\");\n    return null;\n  }\n\n  try {\n    // Parse the authorization header\n    const base64Event = auth.slice(6).trim();\n    console.log(\"\uD83C\uDF38 Base64 event length:\", base64Event.length);\n\n    // Handle simple pubkey format for development\n    if (base64Event.startsWith('pubkey=')) {\n      const pubkey = base64Event.slice(7);\n      if (pubkey.match(/^[a-f0-9]{64}$/)) {\n        console.log(\"\uD83C\uDF38 Simple pubkey auth succeeded\");\n        return { pubkey };\n      }\n      return null;\n    }\n\n    console.log(\"\uD83C\uDF38 Decoding base64 event\");\n    // Decode the base64 event\n    const eventJson = base64ToString(base64Event);\n    console.log(\"\uD83C\uDF38 Event JSON length:\", eventJson.length);\n    const event = JSON.parse(eventJson);\n    console.log(\"\uD83C\uDF38 Event kind:\", event.kind);\n\n    // Verify it's a kind 24242 event for Blossom auth\n    if (event.kind !== 24242) {\n      console.log(\"\uD83C\uDF38 Invalid kind:\", event.kind);\n      return null;\n    }\n    console.log(\"\uD83C\uDF38 Kind 24242 verified\");\n\n    // Validate required fields\n    if (!event.pubkey || !event.sig || !event.created_at || !Array.isArray(event.tags)) {\n      console.log(\"\uD83C\uDF38 Required fields validation failed\");\n      return null;\n    }\n    console.log(\"\uD83C\uDF38 Required fields validated\");\n\n    // Helper to get tag value\n    const tag = (k) => {\n      for (const t of event.tags) if (Array.isArray(t) && t[0] === k) return t[1];\n      return undefined;\n    };\n\n    // Check for Blossom spec format (using 't' tag)\n    const blossomVerb = tag('t');\n\n    // Check for our current format (using 'u' and 'method' tags)\n    const authUrl = tag('u');\n    const authMethod = tag('method');\n\n    const url = new URL(req.url);\n    const method = req.method.toUpperCase();\n\n    // If using Blossom spec format with 't' tag\n    if (blossomVerb) {\n      console.log(\"\uD83C\uDF38 Using Blossom spec format with 't' tag:\", blossomVerb);\n\n      // Map Blossom verbs to HTTP methods and validate\n      const verbToMethod = {\n        'upload': ['PUT', 'POST'],\n        'get': ['GET', 'HEAD'],\n        'list': ['GET'],\n        'delete': ['DELETE']\n      };\n\n      const allowedMethods = verbToMethod[blossomVerb];\n      if (!allowedMethods) {\n        console.log(\"\uD83C\uDF38 Unknown Blossom verb:\", blossomVerb);\n        return null;\n      }\n\n      if (!allowedMethods.includes(method)) {\n        console.log(\"\uD83C\uDF38 Method mismatch for Blossom verb\", {\n          verb: blossomVerb,\n          allowedMethods,\n          actualMethod: method\n        });\n        return null;\n      }\n\n      // Validate 'x' tag if present (for specific blob operations)\n      const blobHash = tag('x');\n      if (blobHash) {\n        // Extract hash from URL path\n        const pathMatch = url.pathname.match(/\\/([a-f0-9]{64})/i);\n        if (pathMatch && pathMatch[1].toLowerCase() !== blobHash.toLowerCase()) {\n          console.log(\"\uD83C\uDF38 Blob hash mismatch\", {\n            urlHash: pathMatch[1],\n            authHash: blobHash\n          });\n          return null;\n        }\n      }\n\n      console.log(\"\uD83C\uDF38 Blossom spec validation passed\");\n    }\n    // If using our current format with 'u' and 'method' tags\n    else if (authUrl || authMethod) {\n      console.log(\"\uD83C\uDF38 Using current format with 'u' and 'method' tags\");\n\n      console.log(\"\uD83C\uDF38 URL validation:\", {\n        requestUrl: url.toString(),\n        authUrl,\n        match: !authUrl || authUrl === url.toString()\n      });\n\n      console.log(\"\uD83C\uDF38 Method validation:\", {\n        requestMethod: method,\n        authMethod: authMethod?.toUpperCase(),\n        match: !authMethod || authMethod.toUpperCase() === method\n      });\n\n      if (authUrl && authUrl !== url.toString()) {\n        console.log(\"\uD83C\uDF38 URL validation failed\");\n        return null;\n      }\n\n      if (authMethod && authMethod.toUpperCase() !== method) {\n        console.log(\"\uD83C\uDF38 Method validation failed\");\n        return null;\n      }\n\n      console.log(\"\uD83C\uDF38 Current format validation passed\");\n    }\n    // If neither format is present, accept the event (backward compatibility)\n    else {\n      console.log(\"\uD83C\uDF38 No specific auth tags, accepting event\");\n    }\n\n    // Check expiration (if provided)\n    const expiration = tag('expiration');\n    if (expiration) {\n      const expireTime = parseInt(expiration, 10);\n      const now = Math.floor((deps.now?.() || Date.now()) / 1000);\n      if (now > expireTime) {\n        return null;\n      }\n    }\n\n    console.log(\"\uD83C\uDF38 Starting signature verification\");\n    // Verify event ID\n    const id = await eventId(event);\n    console.log(\"\uD83C\uDF38 Event ID check:\", {\n      calculated: id,\n      provided: event.id,\n      match: !event.id || event.id === id\n    });\n    if (event.id && event.id !== id) {\n      console.log(\"\uD83C\uDF38 Event ID verification failed\");\n      return null;\n    }\n\n    // Schnorr signature verification\n    try {\n      console.log(\"\uD83C\uDF38 Starting Schnorr verification\");\n      const { schnorr } = await import('@noble/curves/secp256k1');\n      const isValid = await schnorr.verify(event.sig, id, event.pubkey);\n      console.log(\"\uD83C\uDF38 Schnorr verification result:\", isValid);\n      if (!isValid) {\n        console.log(\"\uD83C\uDF38 Signature verification failed\");\n        return null;\n      }\n    } catch (error) {\n      console.log(\"\uD83C\uDF38 Schnorr verification error:\", error.message);\n      return null;\n    }\n\n    console.log(\"\uD83C\uDF38 Blossom auth SUCCESS! Returning result\");\n    return {\n      pubkey: event.pubkey,\n      event\n    };\n\n  } catch (error) {\n    console.log(\"\uD83C\uDF38 Blossom auth error:\", error.message);\n    // Fallback to NIP-98 verification for compatibility\n    if (deps.verifyNip98) {\n      console.log(\"\uD83C\uDF38 Falling back to NIP-98\");\n      return await deps.verifyNip98(req);\n    }\n    return null;\n  }\n}\n\nasync function eventId(event) {\n  const payload = [0, event.pubkey, event.created_at, event.kind, event.tags, event.content ?? ''];\n  const enc = new TextEncoder();\n  const data = enc.encode(JSON.stringify(payload));\n  return await sha256Hex(data);\n}\n\nasync function sha256Hex(input) {\n  const buf = input instanceof Uint8Array ? input : new TextEncoder().encode(String(input));\n  const digest = await crypto.subtle.digest('SHA-256', buf);\n  const arr = Array.from(new Uint8Array(digest));\n  return arr.map((b) => b.toString(16).padStart(2, '0')).join('');\n}\n\nfunction base64ToString(b64) {\n  if (typeof atob === 'function') {\n    // Browser/Workers\n    const bin = atob(b64);\n    const bytes = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; i++) bytes[i] = bin.charCodeAt(i);\n    return new TextDecoder().decode(bytes);\n  }\n  // Node fallback\n  // Using Buffer here is fine in tests/CI; Workers won't hit this branch\n  // eslint-disable-next-line no-undef\n  return Buffer.from(b64, 'base64').toString('utf8');\n}\n\n/**\n * Create a Blossom authorization event template\n * @param {string} method - HTTP method\n * @param {string} url - Request URL\n * @param {Object} options - Additional options\n * @returns {Object} - Event template to be signed\n */\nexport function createBlossomAuthTemplate(method, url, options = {}) {\n  const now = Math.floor(Date.now() / 1000);\n  const { expiration, payload, format = 'current', blobHash, content } = options;\n\n  const tags = [];\n\n  if (format === 'blossom') {\n    // Use Blossom spec format with 't' tag\n    const methodToVerb = {\n      'PUT': 'upload',\n      'POST': 'upload',\n      'GET': 'get',\n      'HEAD': 'get',\n      'DELETE': 'delete'\n    };\n\n    const verb = methodToVerb[method.toUpperCase()] || 'get';\n    tags.push(['t', verb]);\n\n    // Add blob hash if specified\n    if (blobHash) {\n      tags.push(['x', blobHash]);\n    }\n  } else {\n    // Use current format with 'u' and 'method' tags\n    tags.push(['u', url]);\n    tags.push(['method', method.toLowerCase()]);\n    tags.push(['created_at', now.toString()]);\n\n    if (payload) {\n      tags.push(['payload', payload]);\n    }\n  }\n\n  // Add expiration (used by both formats)\n  if (expiration) {\n    tags.push(['expiration', expiration.toString()]);\n  } else {\n    // Default expiration of 1 minute for Blossom spec\n    if (format === 'blossom') {\n      tags.push(['expiration', (now + 60).toString()]);\n    }\n  }\n\n  return {\n    kind: 24242,\n    created_at: now,\n    tags,\n    content: content || (format === 'blossom' ? `Blossom ${method} request` : \"\")\n  };\n}\n\n/**\n * Create a Blossom spec compliant auth event template\n * @param {string} verb - Blossom verb: 'upload', 'get', 'list', or 'delete'\n * @param {Object} options - Additional options\n * @returns {Object} - Event template to be signed\n */\nexport function createBlossomSpecAuthTemplate(verb, options = {}) {\n  const now = Math.floor(Date.now() / 1000);\n  const { expiration, blobHash, content } = options;\n\n  const tags = [\n    ['t', verb]\n  ];\n\n  // Add expiration (required for Blossom spec)\n  tags.push(['expiration', (expiration || now + 60).toString()]);\n\n  // Add blob hash if specified\n  if (blobHash) {\n    tags.push(['x', blobHash]);\n  }\n\n  return {\n    kind: 24242,\n    created_at: now,\n    tags,\n    content: content || `Blossom ${verb} request`\n  };\n}", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/rabble/code/vine_fun/cf_streaming_service/.wrangler/tmp/bundle-GcmkCz/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/rabble/.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/rabble/code/vine_fun/cf_streaming_service/.wrangler/tmp/bundle-GcmkCz/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/rabble/code/vine_fun/cf_streaming_service/.wrangler/tmp/bundle-GcmkCz/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/rabble/code/vine_fun/cf_streaming_service/src/worker.mjs\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/rabble/.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/rabble/.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/rabble/code/vine_fun/cf_streaming_service/src/worker.mjs\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import { createRouter } from \"./router.mjs\";\nimport { createVideo } from \"./handlers/videos.mjs\";\nimport { handleStreamWebhook } from \"./handlers/webhook.mjs\";\nimport { getVideoStatus } from \"./handlers/status.mjs\";\nimport { lookupUid } from \"./handlers/lookup.mjs\";\nimport { addAliases } from \"./handlers/aliases.mjs\";\nimport { verifyNip98Request } from \"./auth/nip98.mjs\";\nimport { listUserVideos } from \"./handlers/users.mjs\";\nimport { migrateVideo } from \"./handlers/migrate.mjs\";\nimport { migrateBatch } from \"./handlers/migrate_batch.mjs\";\n// Removed old R2 migration handlers - using hybrid dual storage now\nimport { handleOpenVineMigration, handleOpenVineBatchMigration } from \"./handlers/migrate_openvine.mjs\";\nimport { enableDownloads, enableDownloadsBatch } from \"./handlers/enable_downloads.mjs\";\nimport { homePage } from \"./handlers/home.mjs\";\nimport { getBlobByHash, headBlobByHash, blossomUpload, listUserBlobs, deleteBlobByHash } from \"./handlers/blossom.mjs\";\nimport { listAllVideoUIDs } from \"./handlers/list_all_videos.mjs\";\n\nconst router = createRouter([\n  { method: \"GET\", path: /^\\/$/, handler: homePage },\n  // Blossom protocol endpoints\n  { method: \"GET\", path: /^\\/[a-f0-9]{64}(\\.[a-z0-9]+)?$/, handler: getBlobByHash },\n  { method: \"HEAD\", path: /^\\/[a-f0-9]{64}(\\.[a-z0-9]+)?$/, handler: headBlobByHash },\n  { method: \"PUT\", path: /^\\/upload$/, handler: blossomUpload },\n  { method: \"GET\", path: /^\\/list\\/[a-f0-9]{64}$/, handler: listUserBlobs },\n  { method: \"DELETE\", path: /^\\/[a-f0-9]{64}(\\.[a-z0-9]+)?$/, handler: deleteBlobByHash },\n  // Existing video service endpoints\n  { method: \"POST\", path: /^\\/v1\\/videos$/, handler: createVideo },\n  { method: \"POST\", path: /^\\/v1\\/stream\\/webhook$/, handler: handleStreamWebhook },\n  { method: \"GET\", path: /^\\/v1\\/videos\\/.+$/, handler: getVideoStatus },\n  { method: \"GET\", path: /^\\/v1\\/lookup$/, handler: lookupUid },\n  { method: \"POST\", path: /^\\/v1\\/videos\\/.+\\/aliases$/, handler: addAliases },\n  { method: \"GET\", path: /^\\/v1\\/users\\/.+\\/videos$/, handler: listUserVideos },\n  { method: \"POST\", path: /^\\/v1\\/migrate$/, handler: migrateVideo },\n  { method: \"POST\", path: /^\\/v1\\/migrate\\/batch$/, handler: migrateBatch },\n  // Removed old R2 migration routes - using hybrid dual storage now\n  { method: \"POST\", path: /^\\/v1\\/openvine\\/migrate$/, handler: handleOpenVineMigration },\n  { method: \"POST\", path: /^\\/v1\\/openvine\\/migrate-batch$/, handler: handleOpenVineBatchMigration },\n  { method: \"POST\", path: /^\\/v1\\/enable-downloads\\/.+$/, handler: enableDownloads },\n  { method: \"POST\", path: /^\\/v1\\/enable-downloads-batch$/, handler: enableDownloadsBatch },\n  { method: \"GET\", path: /^\\/v1\\/list-all-uids/, handler: listAllVideoUIDs },\n]);\n\nexport function createApp(env, deps) {\n  const defaults = {\n    now: () => Date.now(),\n    fetch: globalThis.fetch.bind(globalThis),\n    verifyNip98: env.DEV_AUTH_MODE === 'true' ? \n      async (req) => {\n        const auth = req.headers.get('authorization') || req.headers.get('Authorization') || '';\n        if (!auth.startsWith('Nostr ')) return null;\n        const parts = auth.slice(6).trim();\n        if (parts.startsWith('pubkey=')) {\n          return { pubkey: parts.slice(7) };\n        }\n        return verifyNip98Request(req);\n      } : verifyNip98Request,\n  };\n  const mergedDeps = { ...defaults, ...(deps || {}) };\n  if (!mergedDeps.verifyStreamWebhook) {\n    mergedDeps.verifyStreamWebhook = async (req, env) => {\n      const secret = env?.STREAM_WEBHOOK_SECRET;\n      if (!secret) return false;\n      const sig = req.headers.get('webhook-signature') || req.headers.get('x-webhook-signature');\n      if (sig) {\n        try {\n          const parts = Object.fromEntries(sig.split(',').map(p => p.split('=')));\n          const t = parseInt(parts.t, 10);\n          const v1 = String(parts.v1 || '');\n          if (!t || !v1) return false;\n          const nowSec = Math.floor(mergedDeps.now() / 1000);\n          if (Math.abs(nowSec - t) > 5 * 60) return false;\n          const body = await req.clone().text();\n          const key = await crypto.subtle.importKey('raw', new TextEncoder().encode(secret), { name: 'HMAC', hash: 'SHA-256' }, false, ['sign']);\n          const sigBuf = await crypto.subtle.sign('HMAC', key, new TextEncoder().encode(`${t}.${body}`));\n          const hex = Array.from(new Uint8Array(sigBuf)).map(b => b.toString(16).padStart(2,'0')).join('');\n          return timingSafeEqual(hex, v1);\n        } catch {\n          return false;\n        }\n      }\n      const hdr = req.headers.get('x-webhook-secret');\n      return hdr === secret;\n    };\n  }\n  return async (req) => router(req, env, mergedDeps);\n}\n\nexport default {\n  fetch: (req, env) => createApp(env)(req),\n};\n\nfunction timingSafeEqual(a, b) {\n  if (typeof a !== 'string' || typeof b !== 'string') return false;\n  const bufA = new TextEncoder().encode(a);\n  const bufB = new TextEncoder().encode(b);\n  if (bufA.length !== bufB.length) return false;\n  let out = 0;\n  for (let i = 0; i < bufA.length; i++) out |= bufA[i] ^ bufB[i];\n  return out === 0;\n}\n", "import { json } from \"../router.mjs\";\n\nexport async function handleStreamWebhook(req, env, deps) {\n  const ok = await deps.verifyStreamWebhook(req, env);\n  if (!ok) return json(403, { error: \"forbidden\", reason: \"invalid_webhook_signature\" });\n\n  let payload;\n  try {\n    payload = await req.json();\n  } catch {\n    return json(400, { error: \"bad_request\", reason: \"invalid_json\" });\n  }\n\n  const uid = payload.uid || payload.id;\n  if (!uid) return json(400, { error: \"bad_request\", reason: \"missing_uid\" });\n\n  const key = `video:${uid}`;\n  let current = {};\n  try {\n    const existing = await env.MEDIA_KV.get(key);\n    current = existing ? JSON.parse(existing) : {};\n  } catch {}\n\n  // Derive URLs from payload in a tolerant way\n  const hlsUrl = payload.hlsUrl || payload.playback?.hls || current.hlsUrl || null;\n  const dashUrl = payload.dashUrl || payload.playback?.dash || current.dashUrl || null;\n  const thumbnailUrl = payload.thumbnailUrl || payload.thumbnails?.[\"default\"] || current.thumbnailUrl || null;\n  const status = payload.ready === true || payload.status === \"ready\" || payload.status === \"published\" ? \"published\" : current.status || \"processing\";\n\n  const updated = {\n    ...current,\n    status,\n    hlsUrl,\n    dashUrl,\n    thumbnailUrl,\n    updatedAt: deps.now(),\n  };\n\n  await env.MEDIA_KV.put(key, JSON.stringify(updated));\n\n  // Auto-enable MP4 downloads when video becomes ready\n  if (status === \"published\" && current.status !== \"published\") {\n    console.log(\"\uD83D\uDD14 Auto-enabling downloads for newly published UID:\", uid);\n    try {\n      const accountId = env.STREAM_ACCOUNT_ID;\n      const apiToken = env.STREAM_API_TOKEN;\n\n      if (accountId && apiToken) {\n        const downloadUrl = `https://api.cloudflare.com/client/v4/accounts/${accountId}/stream/${uid}/downloads`;\n        const downloadRes = await deps.fetch(downloadUrl, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${apiToken}`,\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (downloadRes.ok) {\n          console.log(\"\uD83D\uDD14 Downloads enabled successfully for UID:\", uid);\n        } else {\n          console.log(\"\uD83D\uDD14 Download enable failed for UID:\", uid, \"status:\", downloadRes.status);\n        }\n      }\n    } catch (error) {\n      console.log(\"\uD83D\uDD14 Download enable error for UID:\", uid, \"error:\", error.message);\n    }\n  }\n\n  return json(200, { ok: true });\n}\n", "import { json } from \"../router.mjs\";\n\nexport async function getVideoStatus(req, env, _deps) {\n  const url = new URL(req.url);\n  const uid = url.pathname.split('/').pop();\n  if (!uid) return json(400, { error: 'bad_request', reason: 'missing_uid' });\n\n  const v = await env.MEDIA_KV.get(`video:${uid}`);\n  if (!v) return json(404, { error: 'not_found' });\n  const data = JSON.parse(v);\n  return json(200, {\n    uid,\n    status: data.status,\n    owner: data.owner,\n    hlsUrl: data.hlsUrl ?? undefined,\n    dashUrl: data.dashUrl ?? undefined,\n    thumbnailUrl: data.thumbnailUrl ?? undefined,\n    // Include original path information\n    r2Key: data.r2Key ?? undefined,\n    migratedFrom: data.migratedFrom ?? undefined,\n    originalUrl: data.originalUrl ?? undefined,\n    vineId: data.vineId ?? undefined,\n    sha256: data.sha256 ?? undefined,\n  });\n}\n", "import { json } from \"../router.mjs\";\nimport { getStreamUrls } from \"../utils/stream_urls.mjs\";\n\nexport async function lookupUid(req, env, _deps) {\n  const flag = env.LOOKUPS_ENABLED;\n  const enabled = flag === true || flag === 'true' || flag === '1';\n  if (!enabled) return json(404, { error: 'not_found' });\n\n  const url = new URL(req.url);\n  const sha256 = url.searchParams.get('sha256');\n  const vineId = url.searchParams.get('vineId');\n  const rawUrl = url.searchParams.get('url');\n\n  let key = null;\n  if (sha256) key = `idx:sha256:${sha256.toLowerCase()}`;\n  else if (vineId) key = `idx:vine:${vineId}`;\n  else if (rawUrl) key = `idx:url:${await digestUrl(rawUrl)}`;\n  else return json(400, { error: 'bad_request', reason: 'missing_query' });\n\n  const v = await env.MEDIA_KV.get(key);\n  if (!v) return json(404, { error: 'not_found' });\n  try {\n    const obj = JSON.parse(v);\n    if (obj && obj.uid) {\n      // Get full video data to include original path info\n      const videoData = await env.MEDIA_KV.get(`video:${obj.uid}`);\n      if (videoData) {\n        const data = JSON.parse(videoData);\n        const urls = getStreamUrls(obj.uid, env);\n        return json(200, { \n          uid: obj.uid,\n          status: data.status,\n          // Stream URLs\n          hlsUrl: data.hlsUrl || urls.hlsUrl,\n          dashUrl: data.dashUrl || urls.dashUrl,\n          mp4Url: data.mp4Url || urls.mp4Url,\n          thumbnailUrl: data.thumbnailUrl || urls.thumbnailUrl,\n          // Original path information\n          r2Key: data.r2Key,\n          migratedFrom: data.migratedFrom,\n          originalUrl: data.originalUrl,\n          vineId: data.vineId,\n          sha256: data.sha256,\n          readyToStream: data.status === 'ready'\n        });\n      }\n      return json(200, { uid: obj.uid });\n    }\n  } catch {}\n  return json(404, { error: 'not_found' });\n}\n\nasync function digestUrl(input) {\n  try {\n    const u = new URL(input);\n    u.hash = '';\n    u.hostname = u.hostname.toLowerCase();\n    if ((u.protocol === 'http:' && u.port === '80') || (u.protocol === 'https:' && u.port === '443')) {\n      u.port = '';\n    }\n    const params = Array.from(u.searchParams.entries()).sort(([a],[b]) => a.localeCompare(b));\n    const usp = new URLSearchParams(params);\n    u.search = usp.toString() ? `?${usp.toString()}` : '';\n    const enc = new TextEncoder();\n    const buf = enc.encode(u.toString());\n    const hash = await crypto.subtle.digest('SHA-256', buf);\n    const arr = Array.from(new Uint8Array(hash));\n    return arr.map(b => b.toString(16).padStart(2,'0')).join('');\n  } catch {\n    return input; // fallback: treat as pre-hashed key (unlikely)\n  }\n}\n", "import { json } from \"../router.mjs\";\n\nexport async function addAliases(req, env, deps) {\n  const auth = req.headers.get('authorization') || req.headers.get('Authorization');\n  if (!auth) return json(401, { error: 'unauthorized', reason: 'missing_nip98' });\n  const verified = await deps.verifyNip98(req);\n  if (!verified) return json(403, { error: 'forbidden', reason: 'invalid_nip98' });\n\n  const url = new URL(req.url);\n  const segments = url.pathname.split('/');\n  const uid = segments.slice(-2, -1)[0];\n  if (!uid) return json(400, { error: 'bad_request', reason: 'missing_uid' });\n\n  const existing = await env.MEDIA_KV.get(`video:${uid}`);\n  if (!existing) return json(404, { error: 'not_found' });\n  const video = JSON.parse(existing);\n  if (video.owner && video.owner !== verified.pubkey) {\n    return json(403, { error: 'forbidden', reason: 'not_owner' });\n  }\n\n  let body;\n  try { body = await req.json(); } catch { return json(400, { error: 'bad_request', reason: 'invalid_json' }); }\n  const updates = {};\n  const conflicts = [];\n\n  if (body.sha256) {\n    const hex = String(body.sha256).toLowerCase();\n    const key = `idx:sha256:${hex}`;\n    const existingIdx = await env.MEDIA_KV.get(key);\n    if (existingIdx) {\n      try { const obj = JSON.parse(existingIdx); if (obj.uid && obj.uid !== uid) conflicts.push('sha256'); }\n      catch { conflicts.push('sha256'); }\n    }\n    updates.sha256 = hex;\n  }\n  if (body.vineId) {\n    const key = `idx:vine:${body.vineId}`;\n    const existingIdx = await env.MEDIA_KV.get(key);\n    if (existingIdx) { try { const obj = JSON.parse(existingIdx); if (obj.uid && obj.uid !== uid) conflicts.push('vineId'); } catch { conflicts.push('vineId'); } }\n    updates.vineId = body.vineId;\n  }\n  if (body.url) {\n    const digest = await digestUrl(body.url);\n    const key = `idx:url:${digest}`;\n    const existingIdx = await env.MEDIA_KV.get(key);\n    if (existingIdx) { try { const obj = JSON.parse(existingIdx); if (obj.uid && obj.uid !== uid) conflicts.push('url'); } catch { conflicts.push('url'); } }\n    updates.originalUrl = String(body.url);\n    updates._urlDigest = digest;\n  }\n\n  if (!Object.keys(updates).length) return json(400, { error: 'bad_request', reason: 'no_aliases' });\n  if (conflicts.length) return json(409, { error: 'conflict', fields: conflicts });\n\n  // Write indexes\n  if (updates.sha256) await env.MEDIA_KV.put(`idx:sha256:${updates.sha256}`, JSON.stringify({ uid }));\n  if (updates.vineId) await env.MEDIA_KV.put(`idx:vine:${updates.vineId}`, JSON.stringify({ uid }));\n  if (updates._urlDigest) await env.MEDIA_KV.put(`idx:url:${updates._urlDigest}`, JSON.stringify({ uid, url: updates.originalUrl }));\n\n  // Merge into video record\n  const merged = { ...video, ...('sha256' in updates ? { sha256: updates.sha256 } : {}), ...('vineId' in updates ? { vineId: updates.vineId } : {}), ...('originalUrl' in updates ? { originalUrl: updates.originalUrl } : {}), updatedAt: deps.now?.() ?? Date.now() };\n  await env.MEDIA_KV.put(`video:${uid}`, JSON.stringify(merged));\n\n  return json(200, { ok: true });\n}\n\nasync function digestUrl(input) {\n  try {\n    const u = new URL(input);\n    u.hash = '';\n    u.hostname = u.hostname.toLowerCase();\n    if ((u.protocol === 'http:' && u.port === '80') || (u.protocol === 'https:' && u.port === '443')) {\n      u.port = '';\n    }\n    const params = Array.from(u.searchParams.entries()).sort(([a],[b]) => a.localeCompare(b));\n    const usp = new URLSearchParams(params);\n    u.search = usp.toString() ? `?${usp.toString()}` : '';\n    const enc = new TextEncoder();\n    const buf = enc.encode(u.toString());\n    const hash = await crypto.subtle.digest('SHA-256', buf);\n    const arr = Array.from(new Uint8Array(hash));\n    return arr.map(b => b.toString(16).padStart(2,'0')).join('');\n  } catch {\n    return input;\n  }\n}\n", "// NIP-98 HTTP Auth verification (Schnorr over secp256k1)\n// Validates: header payload, url/method tags, optional payload hash, signature\n\nexport async function verifyNip98Request(req) {\n  const auth = req.headers.get('authorization') || req.headers.get('Authorization') || '';\n  if (!auth.startsWith('Nostr ')) return null;\n  const b64 = auth.slice(6).trim();\n  let ev;\n  try {\n    const json = base64ToString(b64);\n    ev = JSON.parse(json);\n  } catch {\n    return null;\n  }\n  if (!ev || typeof ev !== 'object') return null;\n  if (ev.kind !== 27235 || !ev.pubkey || !ev.sig || !ev.created_at || !Array.isArray(ev.tags)) return null;\n\n  const url = new URL(req.url);\n  const method = req.method.toUpperCase();\n  const tag = (k) => {\n    for (const t of ev.tags) if (Array.isArray(t) && t[0] === k) return t[1];\n    return undefined;\n  };\n  if (tag('u') !== url.toString()) return null;\n  if ((tag('method') || '').toUpperCase() !== method) return null;\n\n  const payloadTag = tag('payload');\n  if (payloadTag) {\n    // If provided, must match sha256(rawBody)\n    const raw = await req.clone().arrayBuffer();\n    const hash = await sha256Hex(new Uint8Array(raw));\n    if (hash !== payloadTag) return null;\n  }\n\n  const id = await eventId(ev);\n  if (ev.id && ev.id !== id) return null;\n\n  // Schnorr verify\n  try {\n    const { schnorr } = await import('@noble/curves/secp256k1');\n    const ok = await schnorr.verify(ev.sig, id, ev.pubkey);\n    if (!ok) return null;\n  } catch {\n    return null;\n  }\n  return { pubkey: ev.pubkey };\n}\n\nasync function eventId(ev) {\n  const payload = [0, ev.pubkey, ev.created_at, ev.kind, ev.tags, ev.content ?? ''];\n  const enc = new TextEncoder();\n  const data = enc.encode(JSON.stringify(payload));\n  return await sha256Hex(data);\n}\n\nasync function sha256Hex(input) {\n  const buf = input instanceof Uint8Array ? input : new TextEncoder().encode(String(input));\n  const digest = await crypto.subtle.digest('SHA-256', buf);\n  const arr = Array.from(new Uint8Array(digest));\n  return arr.map((b) => b.toString(16).padStart(2, '0')).join('');\n}\n\nfunction base64ToString(b64) {\n  if (typeof atob === 'function') {\n    // Browser/Workers\n    const bin = atob(b64);\n    const bytes = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; i++) bytes[i] = bin.charCodeAt(i);\n    return new TextDecoder().decode(bytes);\n  }\n  // Node fallback\n  // Using Buffer here is fine in tests/CI; Workers won't hit this branch\n  // eslint-disable-next-line no-undef\n  return Buffer.from(b64, 'base64').toString('utf8');\n}\n", "import { json } from \"../router.mjs\";\n\nexport async function listUserVideos(req, env, _deps) {\n  const url = new URL(req.url);\n  const parts = url.pathname.split('/');\n  // Expect /v1/users/{pubkey}/videos\n  const pubkey = parts[3];\n  if (!pubkey) return json(400, { error: 'bad_request', reason: 'missing_pubkey' });\n\n  const kv = env.MEDIA_KV;\n  if (!kv || typeof kv.list !== 'function') {\n    return json(501, { error: 'not_implemented', reason: 'kv_list_unsupported' });\n  }\n  const prefix = `idx:pubkey:${pubkey}:`;\n  const out = [];\n  let cursor = undefined;\n  // Simple pagination loop in case of many entries\n  while (true) {\n    const res = await kv.list({ prefix, cursor });\n    for (const k of res.keys || []) {\n      const name = k.name || '';\n      const uid = name.slice(prefix.length);\n      if (uid) out.push(uid);\n    }\n    if (!res.list_complete && res.cursor) {\n      cursor = res.cursor;\n    } else {\n      break;\n    }\n  }\n  return json(200, { pubkey, uids: out });\n}\n\n", "// ABOUTME: Migration endpoint for importing videos from R2 to Cloudflare Stream\n// ABOUTME: Handles URL-based imports and preserves metadata\n\nimport { json } from \"../router.mjs\";\nimport { getStreamUrls } from \"../utils/stream_urls.mjs\";\nimport { enableDownloadsAsync } from \"../utils/auto_enable_downloads.mjs\";\nimport { fetchAndHash, dualStoreVideo } from \"../utils/dual_storage.mjs\";\n\nexport async function migrateVideo(req, env, deps) {\n  // No auth required for migration - this is data recovery\n  const verified = { pubkey: \"migration_recovery\" };\n\n  // Parse request body\n  let body;\n  try {\n    body = await req.json();\n  } catch {\n    return json(400, { error: \"bad_request\", reason: \"invalid_json\" });\n  }\n\n  const sourceUrl = body.sourceUrl || body.r2Url || body.url;\n  if (!sourceUrl) {\n    return json(400, { error: \"bad_request\", reason: \"missing_source_url\" });\n  }\n\n  // Extract metadata\n  const metadata = {\n    sha256: body.sha256,\n    vineId: body.vineId,\n    originalUrl: body.originalUrl || sourceUrl,\n    originalR2Path: body.r2Path,\n    migrationBatch: body.batch,\n    migrationTimestamp: deps.now(),\n    originalOwner: body.originalOwner || verified.pubkey,\n  };\n\n  // Check for existing video by sha256 or vineId to avoid duplicates\n  if (metadata.sha256) {\n    const existing = await env.MEDIA_KV.get(`idx:sha256:${metadata.sha256}`);\n    if (existing) {\n      const data = JSON.parse(existing);\n      const urls = getStreamUrls(data.uid, env);\n      return json(200, {\n        uid: data.uid,\n        status: \"already_migrated\",\n        message: \"Video already exists in hybrid storage\",\n        ...urls\n      });\n    }\n  }\n\n  if (metadata.vineId) {\n    const existing = await env.MEDIA_KV.get(`idx:vine:${metadata.vineId}`);\n    if (existing) {\n      const data = JSON.parse(existing);\n      const urls = getStreamUrls(data.uid, env);\n      return json(200, {\n        uid: data.uid,\n        status: \"already_migrated\",\n        message: \"Video already exists in hybrid storage\",\n        ...urls\n      });\n    }\n  }\n\n  console.log(`\uD83D\uDD04 MIGRATE: Starting hybrid migration from: ${sourceUrl}`);\n\n  try {\n    // Step 1: Fetch video and calculate SHA-256 if not provided\n    let videoData;\n    if (metadata.sha256) {\n      // If we have SHA-256, just fetch the video\n      console.log(`\uD83D\uDD04 MIGRATE: Fetching video (SHA-256 provided: ${metadata.sha256})`);\n      const response = await deps.fetch(sourceUrl);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch video: ${response.status} ${response.statusText}`);\n      }\n      videoData = {\n        blob: await response.arrayBuffer(),\n        sha256: metadata.sha256,\n        size: parseInt(response.headers.get('content-length') || '0')\n      };\n    } else {\n      // Fetch and hash\n      videoData = await fetchAndHash(sourceUrl, deps);\n      metadata.sha256 = videoData.sha256;\n    }\n\n    // Step 2: Check again for duplicates with calculated SHA-256\n    if (!body.forceUpload) {\n      const existing = await env.MEDIA_KV.get(`idx:sha256:${videoData.sha256}`);\n      if (existing) {\n        const data = JSON.parse(existing);\n        const urls = getStreamUrls(data.uid, env);\n        return json(200, {\n          uid: data.uid,\n          status: \"already_migrated\",\n          message: \"Video already exists (detected via SHA-256)\",\n          sha256: videoData.sha256,\n          ...urls\n        });\n      }\n    }\n\n    // Step 3: Dual store in Stream + R2\n    const dualStoreMetadata = {\n      name: metadata.vineId || metadata.sha256 || 'migration_video',\n      owner: verified.pubkey,\n      vineId: metadata.vineId,\n      originalUrl: metadata.originalUrl,\n      originalR2Path: metadata.originalR2Path,\n      migrationBatch: metadata.migrationBatch,\n      migrationTimestamp: deps.now(),\n      migratedFrom: sourceUrl,\n      size: videoData.size\n    };\n\n    const storeResult = await dualStoreVideo(\n      videoData.blob,\n      videoData.sha256,\n      env,\n      dualStoreMetadata,\n      deps\n    );\n\n    if (!storeResult.uid) {\n      return json(502, {\n        error: \"migration_failed\",\n        message: \"Failed to store video in hybrid storage\",\n        errors: storeResult.errors\n      });\n    }\n\n    // Step 4: Create additional migration indexes\n    if (metadata.vineId) {\n      await env.MEDIA_KV.put(`idx:vine:${metadata.vineId}`, JSON.stringify({ uid: storeResult.uid }));\n    }\n    if (metadata.originalUrl) {\n      const urlDigest = await digestUrl(metadata.originalUrl);\n      await env.MEDIA_KV.put(`idx:url:${urlDigest}`, JSON.stringify({\n        uid: storeResult.uid,\n        url: metadata.originalUrl\n      }));\n    }\n\n    // Track migration\n    await env.MEDIA_KV.put(`migration:${storeResult.uid}`, JSON.stringify({\n      sourceUrl,\n      timestamp: deps.now(),\n      batch: body.batch,\n      hybridStorage: true\n    }));\n\n    // Step 5: Auto-enable Stream MP4 downloads (backup for R2)\n    if (storeResult.streamSuccess) {\n      enableDownloadsAsync(storeResult.uid, env, deps, {\n        logPrefix: \"\uD83D\uDD14 MIGRATE\",\n        initialDelay: 10000, // Give Stream time to process\n        maxRetries: 3\n      });\n    }\n\n    console.log(`\u2705 MIGRATE: Hybrid migration completed for ${videoData.sha256} -> UID: ${storeResult.uid}`);\n    console.log(`\uD83D\uDCCA MIGRATE: Storage results - Stream: ${storeResult.streamSuccess}, R2: ${storeResult.r2Success}`);\n\n    return json(200, {\n      uid: storeResult.uid,\n      sha256: videoData.sha256,\n      status: \"hybrid_migration_completed\",\n      sourceUrl,\n      storageResults: {\n        stream: storeResult.streamSuccess,\n        r2: storeResult.r2Success\n      },\n      ...storeResult.urls,\n      metadata: {\n        sha256: videoData.sha256,\n        vineId: metadata.vineId,\n        size: videoData.size\n      }\n    });\n\n  } catch (error) {\n    console.error(`\u274C MIGRATE: Hybrid migration failed for ${sourceUrl}:`, error);\n    return json(500, {\n      error: \"migration_failed\",\n      message: error.message,\n      sourceUrl\n    });\n  }\n}\n\nasync function digestUrl(url) {\n  const canonical = new URL(url).toString();\n  const bytes = new TextEncoder().encode(canonical);\n  const hash = await crypto.subtle.digest('SHA-256', bytes);\n  return Array.from(new Uint8Array(hash)).map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nfunction encodeMetadata(metadata) {\n  const encoded = [];\n  for (const [key, value] of Object.entries(metadata)) {\n    if (value !== undefined && value !== null) {\n      const encodedValue = btoa(String(value));\n      encoded.push(`${key} ${encodedValue}`);\n    }\n  }\n  return encoded.join(',');\n}\n\nfunction extractUidFromUrl(url) {\n  const match = url.match(/([a-f0-9]{32})/);\n  return match ? match[1] : null;\n}", "// ABOUTME: Reliable auto-enable downloads utility for all migration handlers\n// ABOUTME: Handles timing, retries, and proper error handling for Cloudflare Stream API\n\nexport async function enableDownloadsWithRetry(uid, env, deps = {}, options = {}) {\n  // Ensure deps.fetch is available and properly bound\n  const fetchFn = deps.fetch || globalThis.fetch;\n  const {\n    maxRetries = 3,\n    initialDelay = 5000,\n    retryDelay = 10000,\n    logPrefix = \"\uD83D\uDD25\"\n  } = options;\n\n  const accountId = env.STREAM_ACCOUNT_ID;\n  const apiToken = env.STREAM_API_TOKEN;\n\n  if (!accountId || !apiToken) {\n    console.log(`${logPrefix} \u274C DOWNLOADS ENABLE SKIPPED - Missing Stream credentials for UID:`, uid);\n    return { success: false, error: \"missing_credentials\" };\n  }\n\n  const downloadUrl = `https://api.cloudflare.com/client/v4/accounts/${accountId}/stream/${uid}/downloads`;\n\n  // Wait for initial processing\n  console.log(`${logPrefix} \u23F3 DOWNLOADS ENABLE: Waiting ${initialDelay}ms for video processing:`, uid);\n  await new Promise(resolve => setTimeout(resolve, initialDelay));\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      console.log(`${logPrefix} \uD83D\uDD04 DOWNLOADS ENABLE ATTEMPT ${attempt}/${maxRetries} for UID:`, uid);\n\n      const downloadRes = await fetchFn(downloadUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (downloadRes.ok) {\n        console.log(`${logPrefix} \u2705 DOWNLOADS ENABLED SUCCESSFULLY (attempt ${attempt}) for UID:`, uid);\n        return { success: true, attempt };\n      }\n\n      const errorText = await downloadRes.text();\n      console.log(`${logPrefix} \u274C DOWNLOADS ENABLE FAILED (attempt ${attempt}/${maxRetries}) for UID:`, uid,\n                  `status: ${downloadRes.status}, response:`, errorText);\n\n      // If this was the last attempt, return failure\n      if (attempt === maxRetries) {\n        return {\n          success: false,\n          error: `Final attempt failed: ${downloadRes.status}`,\n          attempts: maxRetries,\n          lastResponse: errorText\n        };\n      }\n\n      // Wait before retry\n      console.log(`${logPrefix} \u23F3 DOWNLOADS ENABLE: Waiting ${retryDelay}ms before retry for UID:`, uid);\n      await new Promise(resolve => setTimeout(resolve, retryDelay));\n\n    } catch (error) {\n      console.log(`${logPrefix} \u274C DOWNLOADS ENABLE EXCEPTION (attempt ${attempt}/${maxRetries}) for UID:`, uid,\n                  `error:`, error.message);\n\n      // If this was the last attempt, return failure\n      if (attempt === maxRetries) {\n        return {\n          success: false,\n          error: `Final attempt exception: ${error.message}`,\n          attempts: maxRetries\n        };\n      }\n\n      // Wait before retry\n      await new Promise(resolve => setTimeout(resolve, retryDelay));\n    }\n  }\n\n  // This should never be reached, but just in case\n  return { success: false, error: \"unexpected_failure\" };\n}\n\n// For background/async enabling (don't await the result)\nexport function enableDownloadsAsync(uid, env, deps, options = {}) {\n  // Start the enable process but don't await it\n  enableDownloadsWithRetry(uid, env, deps, options)\n    .then(result => {\n      if (!result.success) {\n        console.log(`${options.logPrefix || \"\uD83D\uDD25\"} \u274C ASYNC DOWNLOADS ENABLE FINAL FAILURE for UID:`, uid,\n                    `error:`, result.error);\n      }\n    })\n    .catch(error => {\n      console.log(`${options.logPrefix || \"\uD83D\uDD25\"} \u274C ASYNC DOWNLOADS ENABLE UNCAUGHT ERROR for UID:`, uid,\n                  `error:`, error.message);\n    });\n}", "// ABOUTME: Utility for dual-storing videos in both Cloudflare Stream and R2\n// ABOUTME: Enables instant MP4 serving from R2 while Stream processes HLS/thumbnails\n\n/**\n * Store video data in both Stream and R2 for hybrid serving\n * @param {ArrayBuffer} videoBlob - The video data as ArrayBuffer\n * @param {string} sha256 - Pre-calculated SHA-256 hash of the video\n * @param {Object} env - Environment bindings (DIVINE_R2, STREAM_*, MEDIA_KV)\n * @param {Object} metadata - Video metadata (name, owner, etc.)\n * @param {Object} deps - Dependencies (fetch, now)\n * @returns {Promise<Object>} - { uid, streamSuccess, r2Success, urls }\n */\nexport async function dualStoreVideo(videoBlob, sha256, env, metadata = {}, deps = {}) {\n  const fetchFn = deps.fetch || globalThis.fetch;\n  const now = deps.now || (() => Date.now());\n\n  console.log(`\uD83D\uDD04 DUAL STORE: Starting dual storage for SHA-256: ${sha256}`);\n\n  const results = {\n    uid: null,\n    streamSuccess: false,\n    r2Success: false,\n    urls: {},\n    errors: {}\n  };\n\n  // Step 1: Upload to Cloudflare Stream (for HLS/thumbnails)\n  try {\n    console.log(`\uD83D\uDD04 DUAL STORE: Uploading to Stream for ${sha256}...`);\n    const streamResult = await uploadToStream(videoBlob, sha256, env, metadata, fetchFn);\n    results.uid = streamResult.uid;\n    results.streamSuccess = streamResult.success;\n    if (!streamResult.success) {\n      results.errors.stream = streamResult.error;\n      console.error(`\u274C DUAL STORE: Stream upload failed for ${sha256}:`, streamResult.error);\n    } else {\n      console.log(`\u2705 DUAL STORE: Stream upload successful for ${sha256}, UID: ${streamResult.uid}`);\n    }\n  } catch (error) {\n    console.error(`\u274C DUAL STORE: Stream upload exception for ${sha256}:`, error);\n    results.errors.stream = error.message;\n  }\n\n  // Step 2: Store in R2 (for instant MP4 serving)\n  if (results.uid && env.R2_VIDEOS) {\n    try {\n      console.log(`\uD83D\uDD04 DUAL STORE: Uploading to R2 for ${sha256}...`);\n      const r2Result = await uploadToR2(videoBlob, sha256, env);\n      results.r2Success = r2Result.success;\n      if (!r2Result.success) {\n        results.errors.r2 = r2Result.error;\n        console.error(`\u274C DUAL STORE: R2 upload failed for ${sha256}:`, r2Result.error);\n      } else {\n        console.log(`\u2705 DUAL STORE: R2 upload successful for ${sha256}`);\n      }\n    } catch (error) {\n      console.error(`\u274C DUAL STORE: R2 upload exception for ${sha256}:`, error);\n      results.errors.r2 = error.message;\n    }\n  } else if (!env.R2_VIDEOS) {\n    console.log(`\u26A0\uFE0F DUAL STORE: No R2 binding available, skipping R2 storage for ${sha256}`);\n  } else if (!results.uid) {\n    console.log(`\u26A0\uFE0F DUAL STORE: No Stream UID available, skipping R2 storage for ${sha256}`);\n  }\n\n  // Step 3: Generate URLs with hybrid routing\n  if (results.uid) {\n    results.urls = await generateHybridUrls(results.uid, sha256, env, results.r2Success);\n  }\n\n  // Step 4: Store metadata in KV\n  if (results.uid && env.MEDIA_KV) {\n    try {\n      await storeVideoMetadata(results.uid, sha256, env, metadata, now(), results);\n    } catch (error) {\n      console.error(`\u274C DUAL STORE: KV storage failed for ${sha256}:`, error);\n      results.errors.kv = error.message;\n    }\n  }\n\n  const successCount = [results.streamSuccess, results.r2Success].filter(Boolean).length;\n  console.log(`\uD83D\uDD04 DUAL STORE: Completed for ${sha256} - ${successCount}/2 stores successful`);\n\n  return results;\n}\n\n/**\n * Upload video to Cloudflare Stream\n */\nasync function uploadToStream(videoBlob, sha256, env, metadata, fetchFn) {\n  const accountId = env.STREAM_ACCOUNT_ID;\n  const apiToken = env.STREAM_API_TOKEN;\n\n  console.log(`\uD83D\uDD04 DUAL STORE: Stream credentials check - Account ID: ${accountId ? 'present' : 'MISSING'}, API Token: ${apiToken ? 'present' : 'MISSING'}`);\n\n  if (!accountId || !apiToken) {\n    return { success: false, error: 'Missing Stream credentials' };\n  }\n\n  // Create direct upload URL\n  const streamUrl = `https://api.cloudflare.com/client/v4/accounts/${accountId}/stream/direct_upload`;\n\n  const requestBody = {\n    maxDurationSeconds: 21600, // 6 hours max\n    requireSignedURLs: false,\n    allowedOrigins: ['*'],\n    meta: {\n      name: metadata.vineId || metadata.sha256 || 'migrated_video'\n    }\n  };\n\n  console.log(`\uD83D\uDD04 DUAL STORE: Stream API request to ${streamUrl}`);\n  console.log(`\uD83D\uDD04 DUAL STORE: Request body: ${JSON.stringify(requestBody, null, 2)}`);\n\n  const createRes = await fetchFn(streamUrl, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${apiToken}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(requestBody),\n  });\n\n  if (!createRes.ok) {\n    const errorText = await createRes.text();\n    return { success: false, error: `Stream API error: ${createRes.status} - ${errorText}` };\n  }\n\n  const createData = await createRes.json();\n  const uploadURL = createData?.result?.uploadURL;\n  const uid = createData?.result?.uid;\n\n  if (!uploadURL || !uid) {\n    return { success: false, error: 'Missing upload URL or UID from Stream' };\n  }\n\n  // Upload the blob using FormData (same as working batch migration)\n  const formData = new FormData();\n  const videoFile = new File([videoBlob], 'video.mp4', { type: 'video/mp4' });\n  formData.append('file', videoFile);\n\n  const uploadRes = await fetchFn(uploadURL, {\n    method: 'POST',  // Changed from PUT to POST like working system\n    body: formData   // Changed from raw blob to FormData\n  });\n\n  if (!uploadRes.ok) {\n    return {\n      success: false,\n      error: `Stream upload failed: ${uploadRes.status}`,\n      uid\n    };\n  }\n\n  console.log(`\u2705 DUAL STORE: Stream upload successful for UID: ${uid}`);\n  return { success: true, uid };\n}\n\n/**\n * Upload video to R2 bucket\n */\nasync function uploadToR2(videoBlob, sha256, env) {\n  const r2Key = `videos/${sha256}.mp4`;\n\n  try {\n    await env.R2_VIDEOS.put(r2Key, videoBlob, {\n      httpMetadata: {\n        contentType: 'video/mp4',\n        cacheControl: 'public, max-age=31536000' // 1 year cache\n      },\n      customMetadata: {\n        sha256: sha256,\n        uploadedAt: new Date().toISOString()\n      }\n    });\n\n    console.log(`\u2705 DUAL STORE: R2 upload successful for key: ${r2Key}`);\n    return { success: true };\n\n  } catch (error) {\n    return { success: false, error: error.message };\n  }\n}\n\n/**\n * Generate URLs with hybrid routing preference\n */\nasync function generateHybridUrls(uid, sha256, env, r2Available) {\n  const { getHybridUrls } = await import('./stream_urls.mjs');\n  return getHybridUrls(uid, sha256, env, r2Available);\n}\n\n/**\n * Store video metadata in KV with indexes\n */\nasync function storeVideoMetadata(uid, sha256, env, metadata, timestamp, results) {\n  const record = {\n    status: 'uploading', // Will be updated to 'ready' by webhook\n    owner: metadata.owner || 'system',\n    createdAt: timestamp,\n    uploadedVia: 'dual_storage',\n    sha256,\n    size: metadata.size || null,\n    streamSuccess: results.streamSuccess,\n    r2Success: results.r2Success,\n    ...metadata\n  };\n\n  // Store main video record\n  await env.MEDIA_KV.put(`video:${uid}`, JSON.stringify(record));\n\n  // Store SHA-256 index\n  await env.MEDIA_KV.put(`idx:sha256:${sha256}`, JSON.stringify({ uid }));\n\n  // Store owner index if available\n  if (record.owner && record.owner !== 'system') {\n    await env.MEDIA_KV.put(`idx:pubkey:${record.owner}:${uid}`, '1');\n  }\n\n  console.log(`\u2705 DUAL STORE: KV metadata stored for UID: ${uid}, SHA-256: ${sha256}`);\n}\n\n/**\n * Fetch video from URL and calculate SHA-256\n * @param {string} sourceUrl - URL to fetch video from\n * @param {Object} deps - Dependencies (fetch)\n * @returns {Promise<Object>} - { blob, sha256, size }\n */\nexport async function fetchAndHash(sourceUrl, deps = {}) {\n  const fetchFn = deps.fetch || globalThis.fetch;\n\n  console.log(`\uD83D\uDD04 DUAL STORE: Fetching video from: ${sourceUrl}`);\n\n  const response = await fetchFn(sourceUrl);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch video: ${response.status} ${response.statusText}`);\n  }\n\n  const blob = await response.arrayBuffer();\n\n  // Calculate SHA-256\n  const hashBuffer = await crypto.subtle.digest('SHA-256', blob);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const sha256 = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n\n  console.log(`\u2705 DUAL STORE: Video fetched and hashed - Size: ${blob.byteLength}, SHA-256: ${sha256}`);\n\n  return {\n    blob,\n    sha256,\n    size: blob.byteLength\n  };\n}", "// ABOUTME: Batch migration endpoint using hybrid dual storage (Stream + R2)\n// ABOUTME: Handles bulk imports with instant MP4 availability via R2\n\nimport { json } from \"../router.mjs\";\nimport { fetchAndHash, dualStoreVideo } from \"../utils/dual_storage.mjs\";\nimport { enableDownloadsAsync } from \"../utils/auto_enable_downloads.mjs\";\n\nexport async function migrateBatch(req, env, deps) {\n  // No auth required for batch migration - this is data recovery\n  const verified = { pubkey: \"batch_migration_recovery\" };\n\n  // Parse request body\n  let body;\n  try {\n    body = await req.json();\n  } catch {\n    return json(400, { error: \"bad_request\", reason: \"invalid_json\" });\n  }\n\n  const videos = body.videos || [];\n  if (!Array.isArray(videos) || videos.length === 0) {\n    return json(400, { error: \"bad_request\", reason: \"missing_videos_array\" });\n  }\n\n  // Limit batch size\n  const batchLimit = Math.min(videos.length, 50);\n  const videosToProcess = videos.slice(0, batchLimit);\n\n  console.log(`\uD83D\uDCE6 BATCH MIGRATE: Processing ${videosToProcess.length} videos with hybrid storage`);\n\n  const results = [];\n\n  // Process videos sequentially to avoid overwhelming the system\n  for (const video of videosToProcess) {\n    const sourceUrl = video.sourceUrl || video.r2Url || video.url;\n    if (!sourceUrl) {\n      results.push({\n        sourceUrl: video.sourceUrl || \"unknown\",\n        status: \"error\",\n        error: \"Missing source URL\"\n      });\n      continue;\n    }\n\n    try {\n      // Check if already migrated by SHA-256\n      let videoData;\n      const metadata = {\n        sha256: video.sha256,\n        vineId: video.vineId,\n        originalUrl: video.originalUrl || sourceUrl,\n        originalR2Path: video.originalR2Path,\n        migrationBatch: body.batchId || `batch_${Date.now()}`,\n        migrationTimestamp: deps.now(),\n        originalOwner: video.originalOwner || \"batch_migration\"\n      };\n\n      // Skip download if SHA-256 provided and exists\n      if (video.sha256) {\n        const existing = await env.MEDIA_KV.get(`idx:sha256:${video.sha256}`);\n        if (existing) {\n          const data = JSON.parse(existing);\n          results.push({\n            sourceUrl,\n            uid: data.uid,\n            sha256: video.sha256,\n            status: \"already_migrated\",\n            message: \"Video already exists (detected via SHA-256)\"\n          });\n          continue;\n        }\n      }\n\n      // Fetch and hash video\n      videoData = await fetchAndHash(sourceUrl, deps);\n      metadata.sha256 = videoData.sha256;\n\n      // Check again with calculated SHA-256\n      const existingBySHA = await env.MEDIA_KV.get(`idx:sha256:${videoData.sha256}`);\n      if (existingBySHA) {\n        const data = JSON.parse(existingBySHA);\n        results.push({\n          sourceUrl,\n          uid: data.uid,\n          sha256: videoData.sha256,\n          status: \"already_migrated\",\n          message: \"Video already exists (calculated SHA-256 match)\"\n        });\n        continue;\n      }\n\n      // Dual store in Stream + R2\n      const dualStoreMetadata = {\n        name: metadata.vineId || metadata.sha256.substring(0, 8) || 'batch_video',\n        owner: verified.pubkey,\n        vineId: metadata.vineId,\n        originalUrl: metadata.originalUrl,\n        originalR2Path: metadata.originalR2Path,\n        migrationBatch: metadata.migrationBatch,\n        migrationTimestamp: metadata.migrationTimestamp,\n        originalOwner: metadata.originalOwner,\n        size: videoData.size\n      };\n\n      const storeResult = await dualStoreVideo(\n        videoData.blob,\n        videoData.sha256,\n        env,\n        dualStoreMetadata,\n        deps\n      );\n\n      if (!storeResult.uid) {\n        results.push({\n          sourceUrl,\n          status: \"error\",\n          error: \"Failed to store in hybrid storage\",\n          errors: storeResult.errors\n        });\n        continue;\n      }\n\n      // Create indexes\n      if (metadata.vineId) {\n        await env.MEDIA_KV.put(`idx:vine:${metadata.vineId}`, JSON.stringify({ uid: storeResult.uid }));\n      }\n\n      // Auto-enable Stream MP4 downloads (backup for R2)\n      if (storeResult.streamSuccess) {\n        enableDownloadsAsync(storeResult.uid, env, deps, {\n          logPrefix: \"\uD83D\uDCE6 BATCH\",\n          initialDelay: 15000, // Longer delay for batch processing\n          maxRetries: 3\n        });\n      }\n\n      results.push({\n        sourceUrl,\n        uid: storeResult.uid,\n        sha256: videoData.sha256,\n        status: \"hybrid_migration_completed\",\n        storageResults: {\n          stream: storeResult.streamSuccess,\n          r2: storeResult.r2Success\n        },\n        ...storeResult.urls,\n        metadata: {\n          sha256: videoData.sha256,\n          vineId: metadata.vineId,\n          size: videoData.size\n        }\n      });\n\n      console.log(`\u2705 BATCH: Hybrid migration completed for ${videoData.sha256} -> UID: ${storeResult.uid}`);\n\n    } catch (error) {\n      console.error(`\u274C BATCH: Migration failed for ${sourceUrl}:`, error);\n      results.push({\n        sourceUrl,\n        status: \"error\",\n        error: error.message\n      });\n    }\n\n    // Small delay between videos to avoid overwhelming the system\n    await new Promise(resolve => setTimeout(resolve, 500));\n  }\n\n  const successful = results.filter(r =>\n    r.status === \"hybrid_migration_completed\" || r.status === \"already_migrated\"\n  ).length;\n\n  console.log(`\uD83D\uDCE6 BATCH MIGRATE: Completed ${successful}/${results.length} hybrid migrations`);\n\n  return json(200, {\n    processed: results.length,\n    successful,\n    failed: results.length - successful,\n    batchId: body.batchId || `batch_${Date.now()}`,\n    results\n  });\n}", "// ABOUTME: Handler for migrating videos from OpenVine CDN to Cloudflare Stream\n// ABOUTME: Fetches videos from cdn.openvine.co and uploads them to Stream with NIP-98 auth\n\nimport { getStreamUrls } from '../utils/stream_urls.mjs';\nimport { enableDownloadsAsync } from '../utils/auto_enable_downloads.mjs';\nimport { fetchAndHash, dualStoreVideo } from '../utils/dual_storage.mjs';\n\n// Helper function to fetch from OpenVine API with NIP-98 auth\nasync function fetchFromOpenVine(url, nip98AuthHeader) {\n  const headers = {\n    'Accept': 'application/json'\n  };\n  \n  // Add NIP-98 auth if provided\n  if (nip98AuthHeader) {\n    headers['Authorization'] = nip98AuthHeader;\n  }\n  \n  return await fetch(url, { headers });\n}\n\nexport async function handleOpenVineMigration(request, env) {\n  try {\n    // Extract auth header\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response(JSON.stringify({ \n        error: 'Missing or invalid Authorization header' \n      }), { \n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Check migration token\n    const MIGRATION_TOKEN = env.MIGRATION_TOKEN || '823d4485677c393b51fbb8555b8f5d39777e266c22e30b4190586f701eea5a8c';\n    if (token !== MIGRATION_TOKEN) {\n      return new Response(JSON.stringify({ \n        error: 'Invalid migration token' \n      }), { \n        status: 403,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Parse request body\n    const body = await request.json();\n    const { videoId, vineId, sourceUrl, nip98Auth, useApiEndpoint } = body;\n\n    // Determine source URL\n    let videoUrl;\n    if (sourceUrl) {\n      videoUrl = sourceUrl;\n    } else if (videoId) {\n      // api.openvine.co serves media, not cdn.openvine.co\n      // Media endpoint pattern: https://api.openvine.co/media/{fileId}\n      videoUrl = `https://api.openvine.co/media/${videoId}`;\n    } else {\n      return new Response(JSON.stringify({ \n        error: 'Missing videoId or sourceUrl' \n      }), { \n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    console.log(`\uD83C\uDF3F OPENVINE: Starting hybrid migration from: ${videoUrl}`);\n\n    try {\n      // Step 1: Check if already migrated\n      const existingByVineId = vineId ? await env.MEDIA_KV.get(`idx:vine:${vineId}`) : null;\n      if (existingByVineId) {\n        const data = JSON.parse(existingByVineId);\n        const urls = getStreamUrls(data.uid, env);\n        return new Response(JSON.stringify({\n          status: 'already_migrated',\n          uid: data.uid,\n          videoId: videoId,\n          vineId: vineId,\n          message: 'OpenVine video already migrated to hybrid storage',\n          ...urls\n        }), {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Step 2: Fetch video and calculate SHA-256\n      const videoData = await fetchAndHash(videoUrl, { fetch });\n\n      // Check for existing video by SHA-256\n      const existingBySHA = await env.MEDIA_KV.get(`idx:sha256:${videoData.sha256}`);\n      if (existingBySHA) {\n        const data = JSON.parse(existingBySHA);\n\n        // Update vineId mapping if needed\n        if (vineId) {\n          await env.MEDIA_KV.put(`idx:vine:${vineId}`, JSON.stringify({ uid: data.uid }));\n        }\n\n        const urls = getStreamUrls(data.uid, env);\n        return new Response(JSON.stringify({\n          status: 'already_migrated',\n          uid: data.uid,\n          sha256: videoData.sha256,\n          videoId: videoId,\n          vineId: vineId,\n          message: 'OpenVine video already exists (detected via SHA-256)',\n          ...urls\n        }), {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Step 3: Dual store in Stream + R2\n      const dualStoreMetadata = {\n        name: vineId || videoId || `openvine-${videoData.sha256.substring(0, 8)}`,\n        owner: 'openvine_migration',\n        vineId: vineId || videoId,\n        videoId: videoId,\n        source: 'openvine_migration',\n        originalUrl: videoUrl,\n        migratedFrom: videoUrl,\n        size: videoData.size\n      };\n\n      const deps = { fetch, now: () => Date.now() };\n      const storeResult = await dualStoreVideo(\n        videoData.blob,\n        videoData.sha256,\n        env,\n        dualStoreMetadata,\n        deps\n      );\n\n      if (!storeResult.uid) {\n        return new Response(JSON.stringify({\n          error: 'Failed to store OpenVine video in hybrid storage',\n          errors: storeResult.errors,\n          videoUrl: videoUrl\n        }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Step 4: Create OpenVine-specific indexes\n      if (vineId) {\n        await env.MEDIA_KV.put(`idx:vine:${vineId}`, JSON.stringify({ uid: storeResult.uid }));\n      }\n\n      // Store migration-specific record\n      await env.MEDIA_KV.put(`migration:openvine:${storeResult.uid}`, JSON.stringify({\n        videoId: videoId,\n        vineId: vineId || videoId,\n        sourceUrl: videoUrl,\n        sha256: videoData.sha256,\n        timestamp: new Date().toISOString(),\n        hybridStorage: true,\n        lookupKey: true\n      }));\n\n      // Step 5: Auto-enable Stream MP4 downloads (backup for R2)\n      if (storeResult.streamSuccess) {\n        enableDownloadsAsync(storeResult.uid, env, deps, {\n          logPrefix: \"\uD83C\uDF3F OPENVINE\",\n          initialDelay: 15000,  // OpenVine needs longer processing time\n          maxRetries: 5         // More retries for complex migrations\n        });\n      }\n\n      console.log(`\u2705 OPENVINE: Hybrid migration completed for ${videoData.sha256} -> UID: ${storeResult.uid}`);\n      console.log(`\uD83D\uDCCA OPENVINE: Storage results - Stream: ${storeResult.streamSuccess}, R2: ${storeResult.r2Success}`);\n\n      return new Response(JSON.stringify({\n        status: 'hybrid_migration_completed',\n        uid: storeResult.uid,\n        sha256: videoData.sha256,\n        videoId: videoId,\n        vineId: vineId,\n        sourceUrl: videoUrl,\n        storageResults: {\n          stream: storeResult.streamSuccess,\n          r2: storeResult.r2Success\n        },\n        ...storeResult.urls,\n        message: 'Successfully migrated from OpenVine to hybrid storage'\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n    } catch (error) {\n      console.error('\uD83C\uDF3F OPENVINE: Hybrid migration error:', error);\n      return new Response(JSON.stringify({\n        error: 'OpenVine migration failed',\n        message: error.message,\n        videoUrl: videoUrl\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n  } catch (error) {\n    console.error('OpenVine migration error:', error);\n    return new Response(JSON.stringify({ \n      error: 'Migration failed',\n      message: error.message\n    }), { \n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// Batch migration endpoint\nexport async function handleOpenVineBatchMigration(request, env) {\n  try {\n    // Check auth\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response(JSON.stringify({ \n        error: 'Missing or invalid Authorization header' \n      }), { \n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    const token = authHeader.substring(7);\n    const MIGRATION_TOKEN = env.MIGRATION_TOKEN || '823d4485677c393b51fbb8555b8f5d39777e266c22e30b4190586f701eea5a8c';\n    \n    if (token !== MIGRATION_TOKEN) {\n      return new Response(JSON.stringify({ \n        error: 'Invalid migration token' \n      }), { \n        status: 403,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Parse request\n    const body = await request.json();\n    const { videoIds, limit = 10 } = body;\n\n    if (!videoIds || !Array.isArray(videoIds)) {\n      return new Response(JSON.stringify({ \n        error: 'Missing or invalid videoIds array' \n      }), { \n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Limit batch size\n    const videosToProcess = videoIds.slice(0, Math.min(limit, 50));\n    const results = [];\n\n    for (const videoId of videosToProcess) {\n      try {\n        // Check if already migrated\n        if (env.MEDIA_KV) {\n          const existing = await env.MEDIA_KV.get(`idx:vine:openvine_${videoId}`);\n          if (existing) {\n            const data = JSON.parse(existing);\n            results.push({\n              videoId: videoId,\n              status: 'already_migrated',\n              uid: data.uid,\n              message: 'Video was previously migrated'\n            });\n            continue;\n          }\n        }\n\n        // Migrate video\n        const migrationRequest = new Request(request.url, {\n          method: 'POST',\n          headers: request.headers,\n          body: JSON.stringify({\n            videoId: videoId,\n            vineId: `openvine_${videoId}`\n          })\n        });\n\n        const migrationResponse = await handleOpenVineMigration(migrationRequest, env);\n        const migrationData = await migrationResponse.json();\n\n        results.push({\n          videoId: videoId,\n          ...migrationData\n        });\n\n      } catch (error) {\n        results.push({\n          videoId: videoId,\n          status: 'error',\n          error: error.message\n        });\n      }\n\n      // Rate limit\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n\n    return new Response(JSON.stringify({\n      processed: results.length,\n      total: videoIds.length,\n      results: results\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Batch migration error:', error);\n    return new Response(JSON.stringify({ \n      error: 'Batch migration failed',\n      message: error.message\n    }), { \n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}", "// ABOUTME: Handler to enable MP4 downloads for migrated Stream videos\n// ABOUTME: Must be called after migration to make videos downloadable\n\nimport { enableDownloadsWithRetry } from '../utils/auto_enable_downloads.mjs';\n\nexport async function enableDownloads(request, env) {\n  try {\n    const url = new URL(request.url);\n    const uid = url.pathname.split('/').pop();\n\n    if (!uid || uid.length !== 32) {\n      return new Response(JSON.stringify({\n        error: 'invalid_uid',\n        message: 'Please provide a valid 32-character Stream UID'\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Use reliable auto-enable utility\n    const result = await enableDownloadsWithRetry(uid, env, { fetch: fetch.bind(globalThis) }, {\n      logPrefix: \"\uD83D\uDD27 MANUAL\",\n      initialDelay: 2000,  // Shorter delay for manual requests\n      maxRetries: 2        // Fewer retries for individual requests\n    });\n\n    if (result.success) {\n      return new Response(JSON.stringify({\n        success: true,\n        uid: uid,\n        attempts: result.attempt,\n        mp4Url: `https://${env.STREAM_DOMAIN || 'customer-4c3uhd5qzuhwz9hu.cloudflarestream.com'}/${uid}/downloads/default.mp4`,\n        message: `Downloads enabled successfully (attempt ${result.attempt})`\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    } else {\n      return new Response(JSON.stringify({\n        error: 'enable_failed',\n        uid: uid,\n        attempts: result.attempts,\n        message: result.error,\n        lastResponse: result.lastResponse\n      }), {\n        status: 502,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n  } catch (error) {\n    console.error('Enable downloads error:', error);\n    return new Response(JSON.stringify({\n      error: 'server_error',\n      message: error.message\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// Batch enable downloads for multiple videos using reliable utility\nexport async function enableDownloadsBatch(request, env) {\n  try {\n    const { uids } = await request.json();\n\n    if (!Array.isArray(uids) || uids.length === 0) {\n      return new Response(JSON.stringify({\n        error: 'invalid_request',\n        message: 'Please provide an array of UIDs'\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    console.log(`\uD83D\uDD27 BATCH: Starting batch enable for ${uids.length} UIDs`);\n\n    const results = [];\n    const errors = [];\n    const deps = { fetch: fetch.bind(globalThis) };\n\n    // Process each UID with proper retry logic\n    for (const [index, uid] of uids.entries()) {\n      console.log(`\uD83D\uDD27 BATCH: Processing ${index + 1}/${uids.length} - UID: ${uid}`);\n\n      try {\n        const result = await enableDownloadsWithRetry(uid, env, deps, {\n          logPrefix: `\uD83D\uDD27 BATCH[${index + 1}/${uids.length}]`,\n          initialDelay: 3000,  // Reasonable delay for batch processing\n          maxRetries: 3,       // Standard retries for batch\n          retryDelay: 5000     // 5s between retries\n        });\n\n        if (result.success) {\n          results.push({\n            uid: uid,\n            success: true,\n            attempts: result.attempt,\n            mp4Url: `https://${env.STREAM_DOMAIN || 'customer-4c3uhd5qzuhwz9hu.cloudflarestream.com'}/${uid}/downloads/default.mp4`\n          });\n        } else {\n          errors.push({\n            uid: uid,\n            error: result.error,\n            attempts: result.attempts,\n            lastResponse: result.lastResponse\n          });\n        }\n      } catch (error) {\n        errors.push({\n          uid: uid,\n          error: error.message\n        });\n      }\n\n      // Small delay between UIDs to avoid overwhelming the API\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n\n    console.log(`\uD83D\uDD27 BATCH: Completed - ${results.length} enabled, ${errors.length} failed`);\n\n    return new Response(JSON.stringify({\n      success: true,\n      enabled: results.length,\n      failed: errors.length,\n      results: results,\n      errors: errors\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Batch enable downloads error:', error);\n    return new Response(JSON.stringify({\n      error: 'server_error',\n      message: error.message\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}", "// ABOUTME: Landing page handler for the root path\n// ABOUTME: Displays service information and link to main site\n\nexport function homePage(req, env, deps) {\n  const html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Divine Video Streaming Service</title>\n  <style>\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      min-height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      margin: 0;\n      padding: 20px;\n    }\n    .container {\n      background: white;\n      border-radius: 12px;\n      padding: 48px;\n      box-shadow: 0 20px 60px rgba(0,0,0,0.15);\n      max-width: 600px;\n      text-align: center;\n    }\n    h1 {\n      color: #333;\n      margin: 0 0 16px 0;\n      font-size: 2.5em;\n      font-weight: 700;\n    }\n    .subtitle {\n      color: #666;\n      font-size: 1.2em;\n      margin-bottom: 32px;\n      line-height: 1.6;\n    }\n    .stats {\n      display: flex;\n      justify-content: space-around;\n      margin: 40px 0;\n      padding: 24px;\n      background: #f8f9fa;\n      border-radius: 8px;\n    }\n    .stat {\n      text-align: center;\n    }\n    .stat-value {\n      font-size: 2em;\n      font-weight: bold;\n      color: #667eea;\n    }\n    .stat-label {\n      color: #888;\n      font-size: 0.9em;\n      margin-top: 4px;\n    }\n    .link {\n      display: inline-block;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      color: white;\n      text-decoration: none;\n      padding: 14px 32px;\n      border-radius: 8px;\n      font-weight: 600;\n      transition: transform 0.2s, box-shadow 0.2s;\n      margin-top: 20px;\n    }\n    .link:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);\n    }\n    .tech {\n      margin-top: 40px;\n      padding-top: 32px;\n      border-top: 1px solid #e0e0e0;\n      color: #888;\n      font-size: 0.9em;\n    }\n    .tech-item {\n      display: inline-block;\n      background: #f5f5f5;\n      padding: 6px 12px;\n      border-radius: 4px;\n      margin: 4px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>\uD83C\uDFAC Divine Video</h1>\n    <div class=\"subtitle\">\n      Video hosting and streaming service powered by Cloudflare Stream\n    </div>\n    \n    <div class=\"stats\">\n      <div class=\"stat\">\n        <div class=\"stat-value\">\u221E</div>\n        <div class=\"stat-label\">Scalability</div>\n      </div>\n      <div class=\"stat\">\n        <div class=\"stat-value\">Global</div>\n        <div class=\"stat-label\">CDN Coverage</div>\n      </div>\n      <div class=\"stat\">\n        <div class=\"stat-value\">HLS</div>\n        <div class=\"stat-label\">Streaming</div>\n      </div>\n    </div>\n    \n    <p style=\"color: #666; line-height: 1.8; margin: 32px 0;\">\n      This API service handles video uploads, transcoding, and delivery for the Divine Video platform. \n      Videos are processed automatically and served through Cloudflare's global network.\n    </p>\n    \n    <a href=\"https://divine.video\" class=\"link\">Visit Divine Video \u2192</a>\n    \n    <div class=\"tech\">\n      <div style=\"margin-bottom: 12px; color: #666;\">Powered by</div>\n      <span class=\"tech-item\">Cloudflare Stream</span>\n      <span class=\"tech-item\">Workers</span>\n      <span class=\"tech-item\">KV Storage</span>\n      <span class=\"tech-item\">R2 Storage</span>\n    </div>\n  </div>\n</body>\n</html>`;\n\n  return new Response(html, {\n    status: 200,\n    headers: {\n      \"content-type\": \"text/html; charset=utf-8\",\n    },\n  });\n}", "// ABOUTME: Blossom protocol handlers for blob storage and retrieval\n// ABOUTME: Implements core Blossom endpoints using existing video infrastructure\n\nimport { json } from \"../router.mjs\";\nimport { getStreamUrls } from \"../utils/stream_urls.mjs\";\nimport { enableDownloadsAsync } from \"../utils/auto_enable_downloads.mjs\";\n\n/**\n * GET /<sha256> - Retrieve blob by SHA-256 hash\n */\nexport async function getBlobByHash(req, env, deps) {\n  const url = new URL(req.url);\n  const pathMatch = url.pathname.match(/^\\/([a-f0-9]{64})(\\.[a-z0-9]+)?$/);\n  if (!pathMatch) {\n    return json(400, { error: \"invalid_hash\" });\n  }\n\n  const sha256 = pathMatch[1];\n\n  // Look up video by SHA-256 hash\n  const indexData = await env.MEDIA_KV.get(`idx:sha256:${sha256}`);\n  if (!indexData) {\n    return new Response(\"Not Found\", { status: 404 });\n  }\n\n  try {\n    const { uid } = JSON.parse(indexData);\n    const videoData = await env.MEDIA_KV.get(`video:${uid}`);\n    if (!videoData) {\n      return new Response(\"Not Found\", { status: 404 });\n    }\n\n    const video = JSON.parse(videoData);\n    if (video.status !== 'ready') {\n      return new Response(\"Not Ready\", { status: 202 });\n    }\n\n    // Get the playback URL and redirect\n    const { hlsUrl } = getStreamUrls(uid, env);\n    return Response.redirect(hlsUrl, 302);\n\n  } catch (error) {\n    return new Response(\"Server Error\", { status: 500 });\n  }\n}\n\n/**\n * HEAD /<sha256> - Check if blob exists\n */\nexport async function headBlobByHash(req, env, deps) {\n  const url = new URL(req.url);\n  const pathMatch = url.pathname.match(/^\\/([a-f0-9]{64})(\\.[a-z0-9]+)?$/);\n  if (!pathMatch) {\n    return new Response(null, { status: 400 });\n  }\n\n  const sha256 = pathMatch[1];\n\n  // Look up video by SHA-256 hash\n  const indexData = await env.MEDIA_KV.get(`idx:sha256:${sha256}`);\n  if (!indexData) {\n    return new Response(null, { status: 404 });\n  }\n\n  try {\n    const { uid } = JSON.parse(indexData);\n    const videoData = await env.MEDIA_KV.get(`video:${uid}`);\n    if (!videoData) {\n      return new Response(null, { status: 404 });\n    }\n\n    const video = JSON.parse(videoData);\n    if (video.status !== 'ready') {\n      return new Response(null, { status: 202 });\n    }\n\n    return new Response(null, { status: 200 });\n\n  } catch (error) {\n    return new Response(null, { status: 500 });\n  }\n}\n\n/**\n * PUT /upload - Blossom blob upload\n */\nexport async function blossomUpload(req, env, deps) {\n  console.log(\"\uD83C\uDF38 Blossom upload started\");\n\n  // Verify Blossom auth (kind 24242 event)\n  const auth = await verifyBlossomAuth(req, deps);\n  if (!auth) {\n    console.log(\"\uD83C\uDF38 Auth failed, but continuing for debug...\");\n    // Continue with debug info even if auth fails for now\n    // return json(401, { error: \"unauthorized\" });\n  }\n\n  if (auth) {\n    console.log(\"\uD83C\uDF38 Auth succeeded, pubkey:\", auth.pubkey);\n  }\n\n  // Detect upload type: JSON metadata (Option 1) or binary data (Option 2)\n  const contentType = req.headers.get('content-type') || '';\n  const isJsonRequest = contentType.includes('application/json');\n\n  console.log(\"\uD83C\uDF38 Content-Type:\", contentType);\n  console.log(\"\uD83C\uDF38 Is JSON request:\", isJsonRequest);\n\n  if (isJsonRequest) {\n    // OPTION 1: Standard two-step Blossom (return upload URL)\n    console.log(\"\uD83C\uDF38 Processing JSON request (Option 1)\");\n    const body = await req.text();\n    let metadata = {};\n\n    try {\n      metadata = JSON.parse(body);\n      console.log(\"\uD83C\uDF38 Parsed metadata:\", metadata);\n    } catch (error) {\n      console.log(\"\uD83C\uDF38 JSON parse error:\", error.message);\n      return json(400, { error: \"bad_request\", reason: \"invalid_json\" });\n    }\n\n    // Check if blob already exists by SHA-256\n    if (metadata.sha256) {\n      console.log(\"\uD83C\uDF38 Checking for existing blob with SHA-256:\", metadata.sha256);\n      const existingIndex = await env.MEDIA_KV.get(`idx:sha256:${metadata.sha256}`);\n      if (existingIndex) {\n        console.log(\"\uD83C\uDF38 Found existing blob, returning descriptor\");\n        const { uid } = JSON.parse(existingIndex);\n        const videoData = await env.MEDIA_KV.get(`video:${uid}`);\n        if (videoData) {\n          const video = JSON.parse(videoData);\n          if (video.status === 'ready') {\n            // Return existing blob descriptor per Blossom spec\n            const urls = getStreamUrls(uid, env);\n            return json(200, {\n              sha256: metadata.sha256,\n              size: video.size || metadata.size,\n              type: metadata.type || \"video/mp4\",\n              uploaded: Math.floor(video.createdAt / 1000),\n              url: urls.mp4Url,\n              hls: urls.hlsUrl,\n              thumbnail: urls.thumbnailUrl\n            });\n          }\n        }\n      }\n    }\n\n    // Create a new request for the video handler with dev auth bypass\n    const videoReq = new Request(req.url.replace('/upload', '/v1/videos'), {\n      method: 'POST',\n      headers: {\n        'Authorization': `Nostr pubkey=${auth.pubkey}`,\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        ...metadata,\n        name: metadata.name || metadata.filename || `blossom-${metadata.sha256?.substring(0, 8) || 'upload'}.mp4`\n      })\n    });\n\n    // Import and call the video handler\n    const { createVideo } = await import('./videos.mjs');\n    const result = await createVideo(videoReq, env, deps);\n\n    if (result.status === 200) {\n      const data = await result.json();\n      // Return upload URL for Option 1 clients\n      return json(200, {\n        uploadURL: data.uploadURL,\n        uid: data.uid,\n        expiresAt: data.expiresAt\n      });\n    }\n\n    return result;\n\n  } else {\n    // OPTION 2: Single-step binary upload (current Flutter app)\n    console.log(\"\uD83C\uDF38 Processing binary upload (Option 2)\");\n    let blob;\n    let fileSize;\n    try {\n      console.log(\"\uD83C\uDF38 Reading request as ArrayBuffer...\");\n      blob = await req.arrayBuffer();\n      fileSize = blob.byteLength;\n      console.log(\"\uD83C\uDF38 ArrayBuffer read successfully, size:\", fileSize, \"bytes\");\n    } catch (error) {\n      console.log(\"\uD83C\uDF38 ArrayBuffer read error:\", error.message);\n      return json(400, { error: \"bad_request\", reason: \"cannot_read_body\" });\n    }\n\n    // Calculate SHA-256 hash of the uploaded file\n    const hashBuffer = await crypto.subtle.digest('SHA-256', blob);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const sha256 = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n\n    // Detect content type - check for images vs videos\n    const detectedContentType = contentType || detectContentTypeFromBlob(blob);\n    console.log(\"\uD83C\uDF38 Detected content type:\", detectedContentType);\n\n    // Check if this is an image upload\n    const { isImageContentType } = await import('../utils/image_storage.mjs');\n    if (isImageContentType(detectedContentType)) {\n      console.log(\"\uD83C\uDF38 Processing as IMAGE upload\");\n      return await handleImageUpload(blob, sha256, detectedContentType, auth, env, deps);\n    }\n\n    // Continue with video processing for non-images\n    console.log(\"\uD83C\uDF38 Processing as VIDEO upload\");\n\n    // Get Stream API credentials\n    const accountId = env.STREAM_ACCOUNT_ID;\n    const apiToken = env.STREAM_API_TOKEN;\n\n    if (!accountId || !apiToken) {\n      return json(500, { error: \"server_error\", reason: \"misconfigured_stream_env\" });\n    }\n\n    // Create Stream direct upload URL\n    const streamUrl = `https://api.cloudflare.com/client/v4/accounts/${accountId}/stream/direct_upload`;\n\n    const createRes = await deps.fetch(streamUrl, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${apiToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        maxDurationSeconds: 21600, // 6 hours max\n        requireSignedURLs: false,\n        allowedOrigins: [\"*\"],\n        webhookUrl: `${new URL(req.url).origin}/v1/stream/webhook`,\n        meta: {\n          name: `blossom-${sha256.substring(0, 8)}.mp4`,\n          sha256,\n          blobSize: fileSize,\n          uploadedVia: \"blossom_direct\",\n          owner: auth.pubkey\n        }\n      }),\n    });\n\n    if (!createRes.ok) {\n      return json(502, { error: \"stream_error\", status: createRes.status });\n    }\n\n    const createData = await createRes.json();\n    const uploadURL = createData?.result?.uploadURL;\n    const uid = createData?.result?.uid;\n\n    if (!uploadURL || !uid) {\n      return json(502, { error: \"stream_error\", reason: \"missing_upload_url\" });\n    }\n\n    // Upload the blob directly to Stream\n    console.log(\"\uD83C\uDF38 Uploading blob to Stream URL:\", uploadURL);\n    const uploadRes = await deps.fetch(uploadURL, {\n      method: 'PUT',\n      body: blob,\n      headers: {\n        'Content-Length': fileSize.toString(),\n        'Content-Type': 'video/mp4' // Assume MP4 for now\n      }\n    });\n\n    console.log(\"\uD83C\uDF38 Stream upload result:\", {\n      status: uploadRes.status,\n      statusText: uploadRes.statusText,\n      headers: Object.fromEntries([...uploadRes.headers.entries()])\n    });\n\n    if (!uploadRes.ok) {\n      console.log(\"\uD83C\uDF38 Stream upload failed:\", {\n        status: uploadRes.status,\n        statusText: uploadRes.statusText\n      });\n      return json(502, { error: \"upload_error\", status: uploadRes.status });\n    }\n\n    console.log(\"\uD83C\uDF38 Stream upload successful for UID:\", uid);\n\n    // Auto-enable MP4 downloads using reliable utility\n    enableDownloadsAsync(uid, env, deps, { logPrefix: \"\uD83C\uDF38\" });\n\n    // Store in KV\n    const record = {\n      status: \"uploading\",\n      owner: auth.pubkey,\n      createdAt: deps.now(),\n      uploadedVia: \"blossom_direct\",\n      sha256,\n      size: fileSize,\n    };\n\n    await env.MEDIA_KV.put(`video:${uid}`, JSON.stringify(record));\n\n    // Create indexes\n    await env.MEDIA_KV.put(`idx:sha256:${sha256}`, JSON.stringify({ uid }));\n    await env.MEDIA_KV.put(`idx:pubkey:${auth.pubkey}:${uid}`, '1');\n\n    // Get URLs for response\n    const urls = getStreamUrls(uid, env);\n\n    // Return Blossom-compliant blob descriptor\n    return json(200, {\n      sha256,\n      size: fileSize,\n      type: \"video/mp4\",\n      uploaded: Math.floor(Date.now() / 1000),\n      url: urls.mp4Url, // Return direct MP4 URL as per BUD-02 spec\n      // Additional fields (servers MAY include per BUD-02)\n      hls: urls.hlsUrl, // HLS streaming URL\n      thumbnail: urls.thumbnailUrl // Thumbnail URL\n    });\n  }\n}\n\n/**\n * GET /list/<pubkey> - List blobs for a public key\n */\nexport async function listUserBlobs(req, env, deps) {\n  const url = new URL(req.url);\n  const pathMatch = url.pathname.match(/^\\/list\\/([a-f0-9]{64})$/);\n  if (!pathMatch) {\n    return json(400, { error: \"invalid_pubkey\" });\n  }\n\n  const pubkey = pathMatch[1];\n\n  // Optional auth check\n  const auth = await verifyBlossomAuth(req, deps);\n  const isOwner = auth?.pubkey === pubkey;\n\n  try {\n    // List all videos for this pubkey\n    const listResult = await env.MEDIA_KV.list({ prefix: `idx:pubkey:${pubkey}:` });\n    const blobs = [];\n\n    for (const key of listResult.keys) {\n      const uid = key.name.split(':').pop();\n      const videoData = await env.MEDIA_KV.get(`video:${uid}`);\n      if (!videoData) continue;\n\n      const video = JSON.parse(videoData);\n\n      // Only include ready videos\n      if (video.status !== 'ready') continue;\n\n      const blob = {\n        sha256: video.sha256,\n        size: video.size || null,\n        type: \"video\",\n        uploaded: Math.floor(video.createdAt / 1000)\n      };\n\n      // Only include SHA-256 if available\n      if (blob.sha256) {\n        blobs.push(blob);\n      }\n    }\n\n    return json(200, blobs);\n\n  } catch (error) {\n    return json(500, { error: \"server_error\" });\n  }\n}\n\n/**\n * DELETE /<sha256> - Delete blob by hash\n */\nexport async function deleteBlobByHash(req, env, deps) {\n  const url = new URL(req.url);\n  const pathMatch = url.pathname.match(/^\\/([a-f0-9]{64})(\\.[a-z0-9]+)?$/);\n  if (!pathMatch) {\n    return json(400, { error: \"invalid_hash\" });\n  }\n\n  const sha256 = pathMatch[1];\n\n  // Verify auth\n  const auth = await verifyBlossomAuth(req, deps);\n  if (!auth) {\n    return json(401, { error: \"unauthorized\" });\n  }\n\n  // Look up video by SHA-256\n  const indexData = await env.MEDIA_KV.get(`idx:sha256:${sha256}`);\n  if (!indexData) {\n    return json(404, { error: \"not_found\" });\n  }\n\n  try {\n    const { uid } = JSON.parse(indexData);\n    const videoData = await env.MEDIA_KV.get(`video:${uid}`);\n    if (!videoData) {\n      return json(404, { error: \"not_found\" });\n    }\n\n    const video = JSON.parse(videoData);\n\n    // Check ownership\n    if (video.owner !== auth.pubkey) {\n      return json(403, { error: \"forbidden\" });\n    }\n\n    // Delete from Cloudflare Stream\n    const accountId = env.STREAM_ACCOUNT_ID;\n    const apiToken = env.STREAM_API_TOKEN;\n\n    if (accountId && apiToken && !env.MOCK_STREAM_API) {\n      const deleteUrl = `https://api.cloudflare.com/client/v4/accounts/${accountId}/stream/${uid}`;\n      await deps.fetch(deleteUrl, {\n        method: \"DELETE\",\n        headers: { \"Authorization\": `Bearer ${apiToken}` }\n      });\n    }\n\n    // Delete from KV\n    await Promise.all([\n      env.MEDIA_KV.delete(`video:${uid}`),\n      env.MEDIA_KV.delete(`idx:sha256:${sha256}`),\n      env.MEDIA_KV.delete(`idx:pubkey:${video.owner}:${uid}`)\n    ]);\n\n    return new Response(null, { status: 204 });\n\n  } catch (error) {\n    return json(500, { error: \"server_error\" });\n  }\n}\n\n/**\n * Handle image upload via R2-only storage\n */\nasync function handleImageUpload(blob, sha256, contentType, auth, env, deps) {\n  console.log(\"\uD83D\uDCF8 BLOSSOM: Starting image upload for SHA-256:\", sha256);\n\n  // Check if image already exists\n  const existingIndex = await env.MEDIA_KV.get(`idx:sha256:${sha256}`);\n  if (existingIndex) {\n    console.log(\"\uD83D\uDCF8 BLOSSOM: Found existing image, returning descriptor\");\n    const existing = JSON.parse(existingIndex);\n    if (existing.type === 'image') {\n      const imageData = await env.MEDIA_KV.get(`image:${sha256}`);\n      if (imageData) {\n        const image = JSON.parse(imageData);\n        const cdnDomain = env.STREAM_DOMAIN || 'cdn.divine.video';\n        const extension = getExtensionFromMimeType(contentType);\n\n        return json(200, {\n          sha256,\n          size: image.size,\n          type: contentType,\n          uploaded: Math.floor(image.createdAt / 1000),\n          url: `https://${cdnDomain}/${sha256}${extension}`\n        });\n      }\n    }\n  }\n\n  // Store image in R2\n  const { storeImageInR2 } = await import('../utils/image_storage.mjs');\n  const storeResult = await storeImageInR2(blob, sha256, contentType, env, {\n    owner: auth?.pubkey || 'anonymous',\n    filename: `image-${sha256.substring(0, 8)}${getExtensionFromMimeType(contentType)}`\n  }, deps);\n\n  if (!storeResult.success) {\n    console.error(\"\uD83D\uDCF8 BLOSSOM: Image storage failed:\", storeResult.errors);\n    return json(500, {\n      error: \"storage_error\",\n      details: storeResult.errors\n    });\n  }\n\n  console.log(\"\u2705 BLOSSOM: Image stored successfully:\", sha256);\n\n  // Return Blossom-compliant descriptor\n  return json(200, {\n    sha256,\n    size: blob.byteLength,\n    type: contentType,\n    uploaded: Math.floor(Date.now() / 1000),\n    url: storeResult.urls.url\n  });\n}\n\n/**\n * Detect content type from blob data (magic bytes)\n */\nfunction detectContentTypeFromBlob(blob) {\n  const bytes = new Uint8Array(blob.slice(0, 16));\n\n  // Check magic bytes for common image formats\n  if (bytes[0] === 0xFF && bytes[1] === 0xD8 && bytes[2] === 0xFF) {\n    return 'image/jpeg';\n  }\n  if (bytes[0] === 0x89 && bytes[1] === 0x50 && bytes[2] === 0x4E && bytes[3] === 0x47) {\n    return 'image/png';\n  }\n  if (bytes[0] === 0x47 && bytes[1] === 0x49 && bytes[2] === 0x46) {\n    return 'image/gif';\n  }\n  if (bytes[0] === 0x52 && bytes[1] === 0x49 && bytes[2] === 0x46 && bytes[3] === 0x46 &&\n      bytes[8] === 0x57 && bytes[9] === 0x45 && bytes[10] === 0x42 && bytes[11] === 0x50) {\n    return 'image/webp';\n  }\n\n  // Default to video/mp4 for unknown types (existing behavior)\n  return 'video/mp4';\n}\n\n/**\n * Get file extension from MIME type\n */\nfunction getExtensionFromMimeType(contentType) {\n  const mimeToExt = {\n    'image/jpeg': '.jpg',\n    'image/jpg': '.jpg',\n    'image/png': '.png',\n    'image/gif': '.gif',\n    'image/webp': '.webp',\n    'image/avif': '.avif',\n    'image/svg+xml': '.svg',\n    'image/bmp': '.bmp',\n    'image/tiff': '.tiff'\n  };\n\n  return mimeToExt[contentType.toLowerCase()] || '.jpg';\n}\n\n/**\n * Verify Blossom authentication (kind 24242 event)\n */\nasync function verifyBlossomAuth(req, deps) {\n  const authModule = await import('../auth/blossom.mjs');\n  return await authModule.verifyBlossomAuth(req, deps);\n}", "// ABOUTME: Handler to list all video UIDs for batch operations\n// ABOUTME: Returns paginated list of all video UIDs in the system\n\nimport { json } from \"../router.mjs\";\n\nexport async function listAllVideoUIDs(req, env, deps) {\n  try {\n    const url = new URL(req.url);\n    const cursor = url.searchParams.get('cursor');\n    const limit = Math.min(parseInt(url.searchParams.get('limit') || '1000'), 1000);\n\n    console.log(`\uD83D\uDCCB Listing video UIDs, cursor: ${cursor}, limit: ${limit}`);\n\n    // List all keys with video: prefix\n    const listOptions = {\n      prefix: 'video:',\n      limit: limit\n    };\n\n    if (cursor) {\n      listOptions.cursor = cursor;\n    }\n\n    const result = await env.MEDIA_KV.list(listOptions);\n\n    // Extract UIDs from the keys (remove 'video:' prefix)\n    const uids = result.keys.map(key => key.name.substring(6)); // Remove 'video:' prefix\n\n    console.log(`\uD83D\uDCCB Found ${uids.length} videos${result.list_complete ? ' (complete)' : ' (more available)'}`);\n\n    return json(200, {\n      uids: uids,\n      cursor: result.cursor,\n      list_complete: result.list_complete,\n      total_returned: uids.length\n    });\n\n  } catch (error) {\n    console.error('\u274C Error listing video UIDs:', error);\n    return json(500, {\n      error: 'server_error',\n      message: error.message\n    });\n  }\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["expiresAt", "sha256", "crypto", "crypto", "num", "init_utils", "_0n", "_1n", "num", "init_utils", "_1n", "_0n", "wbits", "init_utils", "_0n", "_1n", "num", "pointToBytes", "_3n", "_4n", "endo", "_2n", "tv5", "c1", "c2", "randomBytes", "hmac", "r", "s", "init_utils", "createHasher", "num", "init_utils", "_3n", "_2n", "_1n", "_0n", "init_utils", "createHasher", "sha256", "base64ToString", "eventId", "schnorr", "sha256Hex", "sha256", "digestUrl", "urls", "digestUrl", "json", "schnorr", "sha256", "getHybridUrls", "urls", "digestUrl", "urls", "sha256", "verifyBlossomAuth", "urls", "createVideo", "isImageContentType", "getExtensionFromMimeType", "storeImageInR2", "env"]
}
