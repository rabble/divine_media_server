{
  "version": 3,
  "sources": ["../bundle-8SelOJ/checked-fetch.js", "../../../src/utils/thumbnail_generator.mjs", "../../../src/cdn_proxy_worker.mjs", "../../../../../../.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-8SelOJ/middleware-insertion-facade.js", "../../../../../../.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-8SelOJ/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/rabble/code/vine_fun/cf_streaming_service/.wrangler/tmp/dev-9MP9CW",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// ABOUTME: Thumbnail generation utility that creates and caches thumbnails in R2\n// ABOUTME: Uses external service to extract frame from video and stores permanently\n\n/**\n * Generate thumbnail for video on first request and cache in R2\n * @param {string} sha256 - Video SHA-256 hash\n * @param {string} uid - Video UID (for path compatibility)\n * @param {Object} env - Worker environment\n * @returns {Response} - Thumbnail image response\n */\nexport async function generateAndCacheThumbnail(sha256, uid, env) {\n  const thumbnailKey = `thumbnails/${sha256}.jpg`;\n\n  // Check if thumbnail already exists in R2\n  const existingThumbnail = await env.R2_VIDEOS.get(thumbnailKey);\n  if (existingThumbnail) {\n    console.log(`\uD83D\uDCF8 Thumbnail cache HIT for ${sha256}`);\n    return new Response(existingThumbnail.body, {\n      headers: {\n        'Content-Type': 'image/jpeg',\n        'Cache-Control': 'public, max-age=31536000, immutable',\n        'ETag': `\"thumb-${sha256}\"`,\n        'X-Thumbnail-Status': 'cached'\n      }\n    });\n  }\n\n  console.log(`\uD83D\uDCF8 Thumbnail cache MISS for ${sha256}, generating...`);\n\n  try {\n    // Method 1: Use Cloudflare Image Resizing API (if video is small enough)\n    // This works by extracting first frame from video URL\n    const videoUrl = `https://cdn.divine.video/${sha256}.mp4`;\n\n    // Method 2: Use external thumbnail service (like Bannerbear, Shotstack, or custom API)\n    const thumbnail = await generateWithExternalService(videoUrl, env);\n\n    if (thumbnail) {\n      // Store in R2 for permanent caching\n      await env.R2_VIDEOS.put(thumbnailKey, thumbnail, {\n        httpMetadata: {\n          contentType: 'image/jpeg'\n        },\n        customMetadata: {\n          sha256,\n          uid,\n          generatedAt: new Date().toISOString()\n        }\n      });\n\n      console.log(`\u2705 Thumbnail generated and cached for ${sha256}`);\n\n      return new Response(thumbnail, {\n        headers: {\n          'Content-Type': 'image/jpeg',\n          'Cache-Control': 'public, max-age=31536000, immutable',\n          'ETag': `\"thumb-${sha256}\"`,\n          'X-Thumbnail-Status': 'generated'\n        }\n      });\n    }\n  } catch (error) {\n    console.error(`\u274C Thumbnail generation failed for ${sha256}:`, error);\n  }\n\n  // Fallback: Return placeholder thumbnail\n  return servePlaceholderThumbnail(sha256);\n}\n\n/**\n * Generate thumbnail using Cloudflare Media Transformations API (2025 feature)\n * Uses native Cloudflare video frame extraction without external services\n */\nasync function generateWithExternalService(videoUrl, env) {\n  try {\n    // Use Cloudflare Media Transformations to extract a frame from the video\n    // This feature was released in 2025 and allows direct video frame extraction\n    // The URL pattern: /cdn-cgi/media/mode=frame,time=1s,width=640,height=360,fit=cover/[video_url]\n\n    console.log(`\uD83D\uDCF8 Using Cloudflare Media Transformations to extract frame from ${videoUrl}`);\n\n    // Construct the Media Transformations URL\n    // Extract frame at 1 second, resize to 640x360 for thumbnail\n    const mediaTransformUrl = new URL(videoUrl);\n    const transformPath = `/cdn-cgi/media/mode=frame,time=1s,width=640,height=360,fit=cover${mediaTransformUrl.pathname}`;\n    mediaTransformUrl.pathname = transformPath;\n\n    console.log(`\uD83D\uDD04 Media Transform URL: ${mediaTransformUrl.toString()}`);\n\n    // Fetch the transformed frame directly\n    const response = await fetch(mediaTransformUrl.toString(), {\n      headers: {\n        'Accept': 'image/jpeg,image/png,image/*'\n      }\n    });\n\n    if (response.ok) {\n      console.log(`\u2705 Successfully extracted frame using Media Transformations`);\n      const imageData = await response.arrayBuffer();\n\n      // Verify we got an image\n      if (imageData.byteLength > 0) {\n        return imageData;\n      }\n    } else {\n      console.error(`\u274C Media Transformations returned ${response.status}: ${response.statusText}`);\n    }\n  } catch (error) {\n    console.error('Media Transformations failed:', error);\n  }\n\n  // Fallback: Try using Image Resizing API with Worker subrequest\n  // This works if the video is accessible as an image (first frame)\n  try {\n    console.log(`\uD83D\uDCF8 Fallback: Trying Cloudflare Image Resizing API`);\n\n    // Use fetch with cf.image options for resizing\n    // This might work for some video formats where first frame is accessible\n    const imageResponse = await fetch(videoUrl, {\n      cf: {\n        image: {\n          width: 640,\n          height: 360,\n          fit: 'cover',\n          quality: 80,\n          format: 'jpeg'\n        }\n      }\n    });\n\n    if (imageResponse.ok) {\n      console.log(`\u2705 Image Resizing API succeeded`);\n      return await imageResponse.arrayBuffer();\n    }\n  } catch (error) {\n    console.error('Image Resizing API failed:', error);\n  }\n\n  // Final fallback: If we have an external thumbnail service configured\n  if (env.THUMBNAIL_SERVICE_URL) {\n    try {\n      console.log(`\uD83D\uDCF8 Final fallback: External thumbnail service`);\n      const response = await fetch(env.THUMBNAIL_SERVICE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${env.THUMBNAIL_SERVICE_KEY}`\n        },\n        body: JSON.stringify({\n          video_url: videoUrl,\n          time: '00:00:01',\n          width: 640,\n          height: 360\n        })\n      });\n\n      if (response.ok) {\n        return await response.arrayBuffer();\n      }\n    } catch (error) {\n      console.error('External thumbnail service failed:', error);\n    }\n  }\n\n  return null;\n}\n\n/**\n * Serve a placeholder thumbnail\n */\nexport function servePlaceholderThumbnail(sha256) {\n  // Create a simple SVG placeholder\n  const svg = `\n    <svg width=\"640\" height=\"360\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"640\" height=\"360\" fill=\"#1a1a1a\"/>\n      <circle cx=\"320\" cy=\"180\" r=\"50\" fill=\"none\" stroke=\"#333\" stroke-width=\"3\"/>\n      <polygon points=\"305,160 305,200 345,180\" fill=\"#333\"/>\n      <text x=\"320\" y=\"250\" text-anchor=\"middle\" fill=\"#555\" font-family=\"system-ui\" font-size=\"14\">\n        Video Thumbnail\n      </text>\n      <text x=\"320\" y=\"270\" text-anchor=\"middle\" fill=\"#444\" font-family=\"monospace\" font-size=\"10\">\n        ${sha256.substring(0, 16)}...\n      </text>\n    </svg>\n  `.trim();\n\n  return new Response(svg, {\n    headers: {\n      'Content-Type': 'image/svg+xml',\n      'Cache-Control': 'public, max-age=3600', // Cache placeholder for 1 hour\n      'X-Thumbnail-Status': 'placeholder'\n    }\n  });\n}\n\n/**\n * Handle thumbnail request from CDN\n */\nexport async function handleThumbnailRequest(url, env) {\n  const pathMatch = url.pathname.match(/\\/([a-f0-9-_]+)\\/thumbnails\\/thumbnail\\.(jpg|gif)$/);\n  if (!pathMatch) {\n    return servePlaceholderThumbnail('unknown');\n  }\n\n  const uid = pathMatch[1];\n\n  // For R2 videos, the UID format is r2_{sha256_prefix}\n  if (uid.startsWith('r2_')) {\n    // Look up full SHA256 from KV\n    const videoData = await env.MEDIA_KV.get(`video:${uid}`);\n    if (videoData) {\n      const video = JSON.parse(videoData);\n      if (video.sha256) {\n        return await generateAndCacheThumbnail(video.sha256, uid, env);\n      }\n    }\n  }\n\n  // For Stream videos (shouldn't happen with R2 fallback enabled)\n  // Try to proxy to Stream\n  if (!uid.startsWith('r2_')) {\n    const streamDomain = env.STREAM_CUSTOMER_DOMAIN || 'customer-4c3uhd5qzuhwz9hu.cloudflarestream.com';\n    const streamUrl = `https://${streamDomain}${url.pathname}`;\n\n    try {\n      const response = await fetch(streamUrl);\n      if (response.ok) {\n        return response;\n      }\n    } catch (error) {\n      console.error('Stream thumbnail fetch failed:', error);\n    }\n  }\n\n  // Fallback to placeholder\n  return servePlaceholderThumbnail(uid);\n}", "// ABOUTME: Hybrid CDN worker serving MP4s from R2 and HLS/thumbnails from Stream with performance optimizations\n// ABOUTME: Deploy this as a separate Worker on cdn.divine.video with R2 binding\n\nimport { handleThumbnailRequest } from './utils/thumbnail_generator.mjs';\n\n// Request coalescing Map to prevent duplicate R2 requests\nconst pendingRequests = new Map();\n\n// In-memory cache with TTL for fast access\nconst memoryCache = new Map();\nconst MEMORY_CACHE_TTL = 5 * 60 * 1000; // 5 minutes\nconst MEMORY_CACHE_MAX_SIZE = 100; // Max items in memory cache\n\n// Rate limiting for R2 operations\nlet activeR2Requests = 0;\nconst MAX_CONCURRENT_R2_REQUESTS = 10;\nconst requestQueue = [];\n\n// Monitoring counters\nlet totalRequests = 0;\nlet cacheHits = 0;\nlet memoryHits = 0;\nlet r2Hits = 0;\nlet rateLimitHits = 0;\nlet errors = 0;\n\n// Clean up memory cache periodically\nfunction cleanupMemoryCache() {\n  const now = Date.now();\n  for (const [key, value] of memoryCache.entries()) {\n    if (now > value.expires) {\n      memoryCache.delete(key);\n    }\n  }\n\n  // If still too large, remove oldest entries\n  if (memoryCache.size > MEMORY_CACHE_MAX_SIZE) {\n    const entries = Array.from(memoryCache.entries())\n      .sort((a, b) => a[1].timestamp - b[1].timestamp);\n    const toRemove = entries.slice(0, memoryCache.size - MEMORY_CACHE_MAX_SIZE);\n    toRemove.forEach(([key]) => memoryCache.delete(key));\n  }\n}\n\nexport default {\n  async fetch(request, env) {\n    totalRequests++;\n    const startTime = Date.now();\n\n    try {\n      const url = new URL(request.url);\n      const path = url.pathname + url.search;\n\n      // Cleanup memory cache periodically (every 100 requests)\n      if (totalRequests % 100 === 0) {\n        cleanupMemoryCache();\n      }\n\n      // Handle Media Transformations requests (2025 feature)\n      // Pattern: /cdn-cgi/media/mode=frame,time=1s,width=640,height=360/...\n      if (path.startsWith('/cdn-cgi/media/')) {\n        return await handleMediaTransformation(request, env, url);\n      }\n\n      // Handle Blossom-style SHA-256 hash requests: /<sha256> or /<sha256>.<ext>\n      const blossomMatch = path.match(/^\\/([a-f0-9]{64})(\\.[\\w]+)?$/);\n      if (blossomMatch) {\n        const sha256 = blossomMatch[1];\n        const extension = blossomMatch[2] || '';\n\n        console.log(`\uD83D\uDD04 HYBRID CDN: Blossom request for ${sha256}${extension}`);\n\n        // Serve from R2 (handles both videos and images)\n        return await serveFromR2(sha256, env, url, request);\n      }\n\n      // Handle Vine-style URLs: /v/<vineID>\n      const vineMatch = path.match(/^\\/v\\/([a-zA-Z0-9_-]+)$/);\n      if (vineMatch) {\n        const vineId = vineMatch[1];\n        console.log(`\uD83D\uDD04 HYBRID CDN: Vine URL request for vineID ${vineId}`);\n\n        return await serveByVineId(vineId, env, url, request);\n      }\n\n      // Handle direct MP4 requests: /<uid>/downloads/default.mp4\n      if (path.includes('/downloads/') && path.endsWith('.mp4')) {\n        const uidMatch = path.match(/\\/([a-f0-9]{32})\\/downloads\\//);\n        if (uidMatch) {\n          const uid = uidMatch[1];\n          console.log(`\uD83D\uDD04 HYBRID CDN: Direct MP4 request for UID ${uid}`);\n\n          // Try to find SHA-256 for this UID and serve from R2\n          return await serveMP4ByUID(uid, env, url, request);\n        }\n      }\n\n      // Check if this is a thumbnail request\n      if (path.includes('/thumbnails/')) {\n        return await handleThumbnailRequest(url, env);\n      }\n\n      // Default: proxy to Stream for HLS, manifests\n      return await proxyToStream(request, env, path);\n\n    } catch (error) {\n      errors++;\n      console.error('\uD83D\uDD04 HYBRID CDN ERROR:', error);\n      const processingTime = Date.now() - startTime;\n\n      const response = new Response(JSON.stringify({\n        error: 'CDN proxy error',\n        message: error.message\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'X-CDN-Processing-Time': processingTime.toString(),\n          'X-CDN-Error-Count': errors.toString(),\n          'X-CDN-Active-R2': activeR2Requests.toString()\n        }\n      });\n      addMonitoringHeaders(response);\n      return response;\n    }\n  }\n};\n\n// Store response in memory cache\nasync function storeInMemoryCache(cacheKey, response) {\n  try {\n    const clonedResponse = response.clone();\n    const body = await clonedResponse.arrayBuffer();\n    const headers = {};\n    for (const [key, value] of clonedResponse.headers) {\n      headers[key] = value;\n    }\n\n    memoryCache.set(cacheKey, {\n      body: body,\n      status: clonedResponse.status,\n      headers: headers,\n      expires: Date.now() + MEMORY_CACHE_TTL,\n      timestamp: Date.now()\n    });\n  } catch (error) {\n    console.error('Failed to store in memory cache:', error);\n  }\n}\n\n// Add monitoring headers to response\nfunction addMonitoringHeaders(response) {\n  response.headers.set('X-CDN-Total-Requests', totalRequests.toString());\n  response.headers.set('X-CDN-Cache-Hits', cacheHits.toString());\n  response.headers.set('X-CDN-Memory-Hits', memoryHits.toString());\n  response.headers.set('X-CDN-R2-Hits', r2Hits.toString());\n  response.headers.set('X-CDN-Rate-Limit-Hits', rateLimitHits.toString());\n  response.headers.set('X-CDN-Error-Count', errors.toString());\n  response.headers.set('X-CDN-Active-R2', activeR2Requests.toString());\n  response.headers.set('X-CDN-Queue-Size', requestQueue.length.toString());\n  response.headers.set('X-CDN-Memory-Cache-Size', memoryCache.size.toString());\n}\n\n// Process the request queue\nfunction processQueue() {\n  if (requestQueue.length > 0 && activeR2Requests < MAX_CONCURRENT_R2_REQUESTS) {\n    const nextRequest = requestQueue.shift();\n    if (nextRequest) {\n      // Clean up old queued requests (older than 15 seconds)\n      const now = Date.now();\n      if (now - nextRequest.timestamp > 15000) {\n        nextRequest.reject();\n        processQueue(); // Try the next one\n      } else {\n        nextRequest.resolve();\n      }\n    }\n  }\n}\n\n// Serve file directly from R2 using SHA-256 hash (videos and images)\nasync function serveFromR2(sha256, env, url, request) {\n  const cacheKey = `r2:${sha256}:${url.pathname}`;\n  const startTime = Date.now();\n\n  try {\n    // 1. Check in-memory cache first (fastest)\n    const memoryCached = memoryCache.get(cacheKey);\n    if (memoryCached && Date.now() < memoryCached.expires) {\n      memoryHits++;\n      console.log(`\u26A1 HYBRID CDN: Memory cache HIT for ${sha256}`);\n      const response = new Response(memoryCached.body, {\n        status: memoryCached.status,\n        headers: new Headers(memoryCached.headers)\n      });\n      response.headers.set('X-CDN-Cache-Status', 'memory-hit');\n      response.headers.set('X-CDN-Processing-Time', (Date.now() - startTime).toString());\n      addMonitoringHeaders(response);\n      return response;\n    }\n\n    // 2. Check edge cache second\n    const cache = caches.default;\n    const edgeCacheKey = new Request(url.toString(), request);\n    const cachedResponse = await cache.match(edgeCacheKey);\n\n    if (cachedResponse) {\n      cacheHits++;\n      console.log(`\u26A1 HYBRID CDN: Edge cache HIT for ${sha256}`);\n\n      // Store in memory cache for next time\n      await storeInMemoryCache(cacheKey, cachedResponse);\n\n      const response = cachedResponse.clone();\n      response.headers.set('X-CDN-Cache-Status', 'edge-hit');\n      response.headers.set('X-CDN-Processing-Time', (Date.now() - startTime).toString());\n      addMonitoringHeaders(response);\n      return response;\n    }\n\n    console.log(`\uD83D\uDD04 HYBRID CDN: Cache MISS for ${sha256}, checking request coalescing...`);\n\n    // 3. Check request coalescing to prevent duplicate R2 requests\n    if (pendingRequests.has(cacheKey)) {\n      console.log(`\uD83D\uDD17 HYBRID CDN: Coalescing request for ${sha256}`);\n      try {\n        const pendingResponse = await pendingRequests.get(cacheKey);\n        const response = pendingResponse.clone();\n        response.headers.set('X-CDN-Cache-Status', 'coalesced');\n        response.headers.set('X-CDN-Processing-Time', (Date.now() - startTime).toString());\n        addMonitoringHeaders(response);\n        return response;\n      } catch (error) {\n        console.error(`\u274C HYBRID CDN: Coalesced request failed for ${sha256}:`, error);\n        // Continue to normal flow\n      }\n    }\n\n    // 4. Create a new request promise for coalescing\n    const requestPromise = fetchFromR2WithRateLimit(sha256, env, url, request, startTime);\n    pendingRequests.set(cacheKey, requestPromise);\n\n    try {\n      const response = await requestPromise;\n      return response;\n    } finally {\n      pendingRequests.delete(cacheKey);\n    }\n\n  } catch (error) {\n    errors++;\n    console.error(`\u274C HYBRID CDN: serveFromR2 error for ${sha256}:`, error);\n    return await fallbackToStream(sha256, env, request);\n  }\n}\n\n// Fetch from R2 with rate limiting and queue management\nasync function fetchFromR2WithRateLimit(sha256, env, url, request, startTime) {\n  // Check if we have an R2 binding and the file exists\n  if (!env.R2_VIDEOS) {\n    console.log(`\uD83D\uDD04 HYBRID CDN: No R2 binding, falling back to Stream for ${sha256}`);\n    return await fallbackToStream(sha256, env, request);\n  }\n\n  // Rate limiting - check if we're at capacity\n  if (activeR2Requests >= MAX_CONCURRENT_R2_REQUESTS) {\n    rateLimitHits++;\n    console.log(`\u26A0\uFE0F HYBRID CDN: Rate limit hit for ${sha256}, queueing request...`);\n\n    // Add to queue and wait\n    const queuePromise = new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error('Queue timeout'));\n      }, 10000); // 10 second timeout\n\n      requestQueue.push({\n        resolve: () => {\n          clearTimeout(timeoutId);\n          resolve();\n        },\n        reject: () => {\n          clearTimeout(timeoutId);\n          reject(new Error('Queue rejected'));\n        },\n        timestamp: Date.now()\n      });\n    });\n\n    try {\n      await queuePromise;\n    } catch (queueError) {\n      console.error(`\u274C HYBRID CDN: Queue error for ${sha256}:`, queueError);\n\n      // Return 429 Too Many Requests with retry info\n      const response = new Response(JSON.stringify({\n        error: 'Rate limit exceeded',\n        message: 'Too many concurrent requests, please retry',\n        retryAfter: 2\n      }), {\n        status: 429,\n        headers: {\n          'Content-Type': 'application/json',\n          'Retry-After': '2',\n          'Access-Control-Allow-Origin': '*',\n          'X-CDN-Processing-Time': (Date.now() - startTime).toString(),\n          'X-CDN-Queue-Size': requestQueue.length.toString()\n        }\n      });\n      addMonitoringHeaders(response);\n      return response;\n    }\n  }\n\n  // Increment active request counter\n  activeR2Requests++;\n  console.log(`\uD83D\uDD04 HYBRID CDN: Starting R2 request for ${sha256} (${activeR2Requests}/${MAX_CONCURRENT_R2_REQUESTS})`);\n\n  try {\n    return await actuallyFetchFromR2(sha256, env, url, request, startTime);\n  } finally {\n    // Decrement counter and process queue\n    activeR2Requests--;\n    processQueue();\n  }\n}\n\n// Actually fetch from R2 (the original logic)\nasync function actuallyFetchFromR2(sha256, env, url, request, startTime) {\n  try {\n    r2Hits++;\n\n    // Check if content is quarantined\n    if (env.MODERATION_KV) {\n      const quarantine = await env.MODERATION_KV.get(`quarantine:${sha256}`);\n      if (quarantine) {\n        console.log(`\uD83D\uDEAB HYBRID CDN: Content ${sha256} is quarantined`);\n        const response = new Response('Content unavailable due to content policy violation', {\n          status: 451,  // HTTP 451 Unavailable For Legal Reasons\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-CDN-Processing-Time': (Date.now() - startTime).toString(),\n            'X-CDN-Status': 'quarantined'\n          }\n        });\n        addMonitoringHeaders(response);\n        return response;\n      }\n    }\n\n    // First check if this is an image\n    const imageResult = await checkAndServeImage(sha256, env, url, request, startTime);\n    if (imageResult) {\n      return imageResult;\n    }\n\n    // Fall back to video serving\n    // Try both paths: new format (sha256.mp4) and old format (videos/sha256.mp4)\n    let r2Key = `${sha256}.mp4`;\n    console.log(`\uD83D\uDD04 HYBRID CDN: Checking R2 for video ${r2Key}`);\n\n    // Check if Range header is present\n    const range = request.headers.get('range');\n\n    // Try new path first, then legacy path\n    let r2Object = await env.R2_VIDEOS.get(r2Key);\n    if (!r2Object) {\n      r2Key = `videos/${sha256}.mp4`;\n      console.log(`\uD83D\uDD04 HYBRID CDN: Trying legacy path ${r2Key}`);\n      r2Object = await env.R2_VIDEOS.get(r2Key);\n    }\n\n    if (r2Object) {\n      if (range) {\n        // Handle byte-range request\n        console.log(`\uD83D\uDD04 HYBRID CDN: Range request for ${sha256}.mp4: ${range}`);\n        return await serveRangeFromR2(r2Key, range, env, url, sha256);\n      } else {\n        // Serve full file\n        console.log(`\u2705 HYBRID CDN: Serving ${sha256}.mp4 from R2 instantly!`);\n\n        const headers = new Headers({\n          'Content-Type': 'video/mp4',\n          'Accept-Ranges': 'bytes',  // Advertise byte-range support\n          'Content-Length': r2Object.size,\n          'Access-Control-Allow-Origin': '*',\n          'Cache-Control': 'public, max-age=31536000, immutable', // Cache for 1 year\n          'CF-Cache-Status': 'HIT', // Tell Cloudflare to cache\n          'X-Content-Type-Options': 'nosniff',\n          'ETag': `\"${sha256}\"`, // Use SHA as ETag for caching\n          'X-CDN-Processing-Time': (Date.now() - startTime).toString(),\n          'X-CDN-Cache-Status': 'r2-miss'\n        });\n\n        // Handle download vs inline\n        if (url.searchParams.get('download') === 'true') {\n          headers.set('Content-Disposition', `attachment; filename=\"${sha256}.mp4\"`);\n        } else {\n          headers.set('Content-Disposition', `inline; filename=\"${sha256}.mp4\"`);\n        }\n\n        // Create response\n        const response = new Response(r2Object.body, {\n          headers,\n          cf: {\n            cacheTtl: 31536000, // Cache for 1 year at edge\n            cacheEverything: true // Override default caching rules\n          }\n        });\n\n        addMonitoringHeaders(response);\n\n        // Store in both edge cache and memory cache for next request\n        const cache = caches.default;\n        const edgeCacheKey = new Request(url.toString(), request);\n        await cache.put(edgeCacheKey, response.clone());\n\n        const memoryCacheKey = `r2:${sha256}:${url.pathname}`;\n        await storeInMemoryCache(memoryCacheKey, response);\n\n        return response;\n      }\n    }\n\n    console.log(`\u274C HYBRID CDN: ${sha256}.mp4 not found in R2, falling back to Stream`);\n    return await fallbackToStream(sha256, env, request);\n\n  } catch (error) {\n    errors++;\n    console.error(`\u274C HYBRID CDN: R2 error for ${sha256}:`, error);\n    return await fallbackToStream(sha256, env, request);\n  }\n}\n\n// Serve MP4 by Vine ID (lookup UID, then get SHA-256)\nasync function serveByVineId(vineId, env, url, request) {\n  try {\n    if (!env.MEDIA_KV) {\n      console.log(`\u274C HYBRID CDN: No KV binding for vineID ${vineId}`);\n      return new Response('Server misconfigured', { status: 500 });\n    }\n\n    // Look up UID by vine ID\n    const vineData = await env.MEDIA_KV.get(`idx:vine:${vineId}`);\n    if (!vineData) {\n      console.log(`\u274C HYBRID CDN: No video found for vineID ${vineId}`);\n      return new Response('Not Found', { status: 404 });\n    }\n\n    const { uid } = JSON.parse(vineData);\n    console.log(`\uD83D\uDD04 HYBRID CDN: Found UID ${uid} for vineID ${vineId}`);\n\n    // Now serve as MP4 by UID\n    return await serveMP4ByUID(uid, env, url, request);\n\n  } catch (error) {\n    console.error(`\u274C HYBRID CDN: Vine lookup error for ${vineId}:`, error);\n    return new Response('Server Error', { status: 500 });\n  }\n}\n\n// Serve MP4 by UID (convert to SHA-256 first)\nasync function serveMP4ByUID(uid, env, url, request) {\n  try {\n    // Look up video record to get SHA-256\n    if (!env.MEDIA_KV) {\n      console.log(`\uD83D\uDD04 HYBRID CDN: No KV binding, proxying to Stream for UID ${uid}`);\n      return await proxyToStreamUID(uid, env, request);\n    }\n\n    const videoData = await env.MEDIA_KV.get(`video:${uid}`);\n    if (!videoData) {\n      console.log(`\u274C HYBRID CDN: No video record for UID ${uid}`);\n      return new Response('Not Found', { status: 404 });\n    }\n\n    const video = JSON.parse(videoData);\n    if (video.sha256) {\n      console.log(`\uD83D\uDD04 HYBRID CDN: Found SHA-256 ${video.sha256} for UID ${uid}, serving from R2`);\n      return await serveFromR2(video.sha256, env, url, request);\n    }\n\n    console.log(`\uD83D\uDD04 HYBRID CDN: No SHA-256 for UID ${uid}, proxying to Stream`);\n    return await proxyToStreamUID(uid, env, request);\n\n  } catch (error) {\n    console.error(`\u274C HYBRID CDN: KV error for UID ${uid}:`, error);\n    return await proxyToStreamUID(uid, env, request);\n  }\n}\n\n// Serve Blossom-style request (redirect to HLS)\nasync function serveBlossom(sha256, env) {\n  try {\n    if (!env.MEDIA_KV) {\n      return new Response('Server misconfigured', { status: 500 });\n    }\n\n    // Look up UID by SHA-256\n    const indexData = await env.MEDIA_KV.get(`idx:sha256:${sha256}`);\n    if (!indexData) {\n      return new Response('Not Found', { status: 404 });\n    }\n\n    const { uid } = JSON.parse(indexData);\n\n    // Construct HLS URL\n    const streamDomain = env.STREAM_CUSTOMER_DOMAIN || 'customer-4c3uhd5qzuhwz9hu.cloudflarestream.com';\n    const hlsUrl = `https://${streamDomain}/${uid}/manifest/video.m3u8`;\n\n    console.log(`\uD83D\uDD04 HYBRID CDN: Redirecting Blossom ${sha256} to HLS ${hlsUrl}`);\n    return Response.redirect(hlsUrl, 302);\n\n  } catch (error) {\n    console.error(`\u274C HYBRID CDN: Blossom error for ${sha256}:`, error);\n    return new Response('Server Error', { status: 500 });\n  }\n}\n\n// Fallback to Stream for SHA-256 requests\nasync function fallbackToStream(sha256, env, request) {\n  try {\n    if (!env.MEDIA_KV) {\n      return new Response('Server misconfigured', { status: 500 });\n    }\n\n    // Look up UID by SHA-256\n    const indexData = await env.MEDIA_KV.get(`idx:sha256:${sha256}`);\n    if (!indexData) {\n      return new Response('Not Found', { status: 404 });\n    }\n\n    const { uid } = JSON.parse(indexData);\n    return await proxyToStreamUID(uid, env, request);\n\n  } catch (error) {\n    console.error(`\u274C HYBRID CDN: Fallback error for ${sha256}:`, error);\n    return new Response('Server Error', { status: 500 });\n  }\n}\n\n// Proxy specific UID to Stream MP4\nasync function proxyToStreamUID(uid, env, request) {\n  const startTime = Date.now();\n  const streamDomain = env.STREAM_CUSTOMER_DOMAIN || 'customer-4c3uhd5qzuhwz9hu.cloudflarestream.com';\n  const streamUrl = `https://${streamDomain}/${uid}/downloads/default.mp4`;\n\n  console.log(`\uD83D\uDD04 HYBRID CDN: Proxying UID ${uid} to Stream: ${streamUrl}`);\n\n  // Forward the Range header if present\n  const headers = new Headers();\n  const range = request.headers.get('range');\n  if (range) {\n    headers.set('Range', range);\n    console.log(`\uD83D\uDD04 HYBRID CDN: Forwarding Range header: ${range}`);\n  }\n\n  const response = await fetch(streamUrl, { headers });\n  const responseHeaders = new Headers(response.headers);\n  responseHeaders.set('Access-Control-Allow-Origin', '*');\n  responseHeaders.set('Content-Type', 'video/mp4');\n\n  // Ensure Accept-Ranges is set\n  if (!responseHeaders.has('Accept-Ranges')) {\n    responseHeaders.set('Accept-Ranges', 'bytes');\n  }\n\n  const finalResponse = new Response(response.body, {\n    status: response.status,\n    statusText: response.statusText,\n    headers: responseHeaders\n  });\n\n  finalResponse.headers.set('X-CDN-Processing-Time', (Date.now() - startTime).toString());\n  finalResponse.headers.set('X-CDN-Cache-Status', 'stream-proxy');\n  addMonitoringHeaders(finalResponse);\n\n  return finalResponse;\n}\n\n// Check and serve image from R2 if available\nasync function checkAndServeImage(sha256, env, url, request, startTime = Date.now()) {\n  try {\n    if (!env.MEDIA_KV) {\n      return null;\n    }\n\n    // Check if this SHA-256 is an image\n    const indexData = await env.MEDIA_KV.get(`idx:sha256:${sha256}`);\n    if (!indexData) {\n      return null;\n    }\n\n    const index = JSON.parse(indexData);\n    if (index.type !== 'image') {\n      return null;\n    }\n\n    // Get image metadata\n    const imageData = await env.MEDIA_KV.get(`image:${sha256}`);\n    if (!imageData) {\n      return null;\n    }\n\n    const image = JSON.parse(imageData);\n    const r2Key = image.r2Key || `images/${sha256}${getExtensionFromMimeType(image.contentType)}`;\n\n    console.log(`\uD83D\uDCF8 HYBRID CDN: Checking R2 for image ${r2Key}`);\n\n    const r2Object = await env.R2_VIDEOS.get(r2Key);\n    if (r2Object) {\n      console.log(`\u2705 HYBRID CDN: Serving image ${sha256} from R2 instantly!`);\n\n      const headers = new Headers({\n        'Content-Type': image.contentType || 'image/jpeg',\n        'Access-Control-Allow-Origin': '*',\n        'Cache-Control': 'public, max-age=31536000', // Cache for 1 year\n        'X-CDN-Processing-Time': (Date.now() - startTime).toString(),\n        'X-CDN-Cache-Status': 'r2-image-hit'\n      });\n\n      // Handle download vs inline\n      const extension = getExtensionFromMimeType(image.contentType);\n      if (url.searchParams.get('download') === 'true') {\n        headers.set('Content-Disposition', `attachment; filename=\"${sha256}${extension}\"`);\n      } else {\n        headers.set('Content-Disposition', `inline; filename=\"${sha256}${extension}\"`);\n      }\n\n      const response = new Response(r2Object.body, { headers });\n      addMonitoringHeaders(response);\n\n      // Store in memory cache\n      const memoryCacheKey = `r2:${sha256}:${url.pathname}`;\n      await storeInMemoryCache(memoryCacheKey, response);\n\n      return response;\n    }\n\n    console.log(`\u274C HYBRID CDN: Image ${sha256} not found in R2`);\n    return null;\n\n  } catch (error) {\n    console.error(`\u274C HYBRID CDN: Error checking image for ${sha256}:`, error);\n    return null;\n  }\n}\n\n// Handle byte-range requests for R2 objects\nasync function serveRangeFromR2(r2Key, rangeHeader, env, url, sha256) {\n  const startTime = Date.now();\n  try {\n    // Parse the Range header (e.g., \"bytes=0-1023\")\n    const match = rangeHeader.match(/bytes=(\\d+)-(\\d*)/);\n    if (!match) {\n      return new Response('Invalid Range header', { status: 400 });\n    }\n\n    const start = parseInt(match[1], 10);\n\n    // First get object info to know the total size\n    const r2Object = await env.R2_VIDEOS.head(r2Key);\n    if (!r2Object) {\n      return new Response('Not Found', { status: 404 });\n    }\n\n    const totalSize = r2Object.size;\n    const end = match[2] ? parseInt(match[2], 10) : totalSize - 1;\n\n    // Validate range\n    if (start >= totalSize || end >= totalSize || start > end) {\n      return new Response('Range Not Satisfiable', {\n        status: 416,\n        headers: {\n          'Content-Range': `bytes */${totalSize}`\n        }\n      });\n    }\n\n    // Get the specific byte range from R2\n    const rangeObject = await env.R2_VIDEOS.get(r2Key, {\n      range: { offset: start, length: (end - start) + 1 }\n    });\n\n    if (!rangeObject) {\n      return new Response('Not Found', { status: 404 });\n    }\n\n    const contentLength = (end - start) + 1;\n\n    console.log(`\u2705 HYBRID CDN: Serving range ${start}-${end}/${totalSize} for ${sha256}.mp4`);\n\n    const headers = new Headers({\n      'Content-Type': 'video/mp4',\n      'Content-Length': contentLength,\n      'Content-Range': `bytes ${start}-${end}/${totalSize}`,\n      'Accept-Ranges': 'bytes',\n      'Access-Control-Allow-Origin': '*',\n      'Cache-Control': 'public, max-age=31536000',\n      'X-CDN-Processing-Time': (Date.now() - startTime).toString(),\n      'X-CDN-Cache-Status': 'r2-range-hit'\n    });\n\n    // Handle download vs inline\n    if (url.searchParams.get('download') === 'true') {\n      headers.set('Content-Disposition', `attachment; filename=\"${sha256}.mp4\"`);\n    } else {\n      headers.set('Content-Disposition', `inline; filename=\"${sha256}.mp4\"`);\n    }\n\n    const response = new Response(rangeObject.body, {\n      status: 206,  // Partial Content\n      headers\n    });\n\n    addMonitoringHeaders(response);\n    return response;\n\n  } catch (error) {\n    errors++;\n    console.error(`\u274C HYBRID CDN: Range request error for ${r2Key}:`, error);\n    const response = new Response('Range request failed', {\n      status: 500,\n      headers: {\n        'X-CDN-Processing-Time': (Date.now() - startTime).toString(),\n        'X-CDN-Error-Count': errors.toString()\n      }\n    });\n    addMonitoringHeaders(response);\n    return response;\n  }\n}\n\n// Get file extension from MIME type\nfunction getExtensionFromMimeType(contentType) {\n  if (!contentType) return '.jpg';\n\n  const mimeToExt = {\n    'image/jpeg': '.jpg',\n    'image/jpg': '.jpg',\n    'image/png': '.png',\n    'image/gif': '.gif',\n    'image/webp': '.webp',\n    'image/avif': '.avif',\n    'image/svg+xml': '.svg',\n    'image/bmp': '.bmp',\n    'image/tiff': '.tiff'\n  };\n\n  return mimeToExt[contentType.toLowerCase()] || '.jpg';\n}\n\n// Handle Media Transformations requests (Cloudflare 2025 feature)\nasync function handleMediaTransformation(request, env, url) {\n  try {\n    const path = url.pathname;\n    console.log(`\uD83C\uDFAC Media Transformations request: ${path}`);\n\n    // Parse the transformation parameters and target path\n    // Pattern: /cdn-cgi/media/mode=frame,time=1s,width=640,height=360/<target_path>\n    const transformMatch = path.match(/^\\/cdn-cgi\\/media\\/([^\\/]+)\\/(.+)$/);\n    if (!transformMatch) {\n      return new Response('Invalid Media Transformations URL', { status: 400 });\n    }\n\n    const [, params, targetPath] = transformMatch;\n    const paramMap = {};\n\n    // Parse comma-separated parameters\n    params.split(',').forEach(param => {\n      const [key, value] = param.split('=');\n      paramMap[key] = value;\n    });\n\n    console.log(`\uD83D\uDCCA Transform params:`, paramMap);\n    console.log(`\uD83C\uDFAF Target path: ${targetPath}`);\n\n    // For frame extraction from videos in R2\n    if (paramMap.mode === 'frame' && targetPath.match(/^([a-f0-9]{64})\\.mp4$/)) {\n      const sha256 = targetPath.slice(0, -4);\n\n      // Check if we already have a cached thumbnail\n      const thumbnailKey = `thumbnails/${sha256}.jpg`;\n      const cachedThumbnail = await env.R2_VIDEOS.get(thumbnailKey);\n\n      if (cachedThumbnail) {\n        console.log(`\u2705 Serving cached thumbnail for ${sha256}`);\n        return new Response(cachedThumbnail.body, {\n          headers: {\n            'Content-Type': 'image/jpeg',\n            'Cache-Control': 'public, max-age=31536000, immutable',\n            'X-Thumbnail-Status': 'cached-media-transform'\n          }\n        });\n      }\n\n      // Generate thumbnail using Media Transformations\n      const videoUrl = `https://cdn.divine.video/${targetPath}`;\n      const transformUrl = new URL(url.origin + path);\n\n      // Fetch the transformed frame\n      const frameResponse = await fetch(transformUrl, {\n        cf: {\n          // Enable Media Transformations\n          mediaTransform: true,\n          image: {\n            width: parseInt(paramMap.width) || 640,\n            height: parseInt(paramMap.height) || 360,\n            fit: paramMap.fit || 'cover',\n            quality: 80,\n            format: 'jpeg'\n          }\n        }\n      });\n\n      if (frameResponse.ok) {\n        const frameData = await frameResponse.arrayBuffer();\n\n        // Cache the generated thumbnail\n        await env.R2_VIDEOS.put(thumbnailKey, frameData, {\n          httpMetadata: {\n            contentType: 'image/jpeg'\n          },\n          customMetadata: {\n            sha256,\n            generatedAt: new Date().toISOString(),\n            method: 'media-transformations'\n          }\n        });\n\n        console.log(`\u2705 Generated and cached thumbnail using Media Transformations`);\n\n        return new Response(frameData, {\n          headers: {\n            'Content-Type': 'image/jpeg',\n            'Cache-Control': 'public, max-age=31536000, immutable',\n            'X-Thumbnail-Status': 'generated-media-transform'\n          }\n        });\n      }\n    }\n\n    // For other Media Transformations, proxy the request\n    return await fetch(url.origin + path, {\n      method: request.method,\n      headers: request.headers,\n      body: request.body,\n      cf: {\n        mediaTransform: true\n      }\n    });\n\n  } catch (error) {\n    errors++;\n    console.error('\u274C Media Transformations error:', error);\n    const response = new Response('Media Transformations failed', {\n      status: 500,\n      headers: {\n        'X-Error': error.message,\n        'X-CDN-Error-Count': errors.toString()\n      }\n    });\n    addMonitoringHeaders(response);\n    return response;\n  }\n}\n\n// Default proxy to Stream for HLS, thumbnails, etc.\nasync function proxyToStream(request, env, path) {\n  const streamDomain = env.STREAM_CUSTOMER_DOMAIN || 'customer-4c3uhd5qzuhwz9hu.cloudflarestream.com';\n  const streamUrl = `https://${streamDomain}${path}`;\n\n  const headers = new Headers(request.headers);\n  headers.delete('Host');\n\n  const hasBody = ['POST', 'PUT', 'PATCH'].includes(request.method);\n\n  const response = await fetch(streamUrl, {\n    method: request.method,\n    headers: headers,\n    body: hasBody ? request.body : undefined\n  });\n\n  const newHeaders = new Headers(response.headers);\n  newHeaders.set('Access-Control-Allow-Origin', '*');\n  newHeaders.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  newHeaders.set('Access-Control-Allow-Headers', 'Content-Type');\n\n  const finalResponse = new Response(response.body, {\n    status: response.status,\n    statusText: response.statusText,\n    headers: newHeaders\n  });\n\n  finalResponse.headers.set('X-CDN-Cache-Status', 'stream-default-proxy');\n  addMonitoringHeaders(finalResponse);\n\n  return finalResponse;\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/rabble/code/vine_fun/cf_streaming_service/src/cdn_proxy_worker.mjs\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/rabble/.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/rabble/.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/rabble/code/vine_fun/cf_streaming_service/src/cdn_proxy_worker.mjs\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/rabble/code/vine_fun/cf_streaming_service/.wrangler/tmp/bundle-8SelOJ/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/rabble/.nvm/versions/node/v23.7.0/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/rabble/code/vine_fun/cf_streaming_service/.wrangler/tmp/bundle-8SelOJ/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/rabble/code/vine_fun/cf_streaming_service/.wrangler/tmp/bundle-8SelOJ/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
